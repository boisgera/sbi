{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>sbi</code>: simulation-based inference","text":"<p><code>sbi</code>: A Python toolbox for simulation-based inference.</p> <p></p> <p>Inference can be run in a single line of code</p> <pre><code>posterior = infer(simulator, prior, method='SNPE', num_simulations=1000)\n</code></pre> <p>or in a few lines for more flexibility:</p> <pre><code>inference = SNPE(prior=prior)\n_ = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior()\n</code></pre> <p><code>sbi</code> lets you choose from a variety of amortized and sequential SBI methods:</p> <p>Amortized methods return a posterior that can be applied to many different observations without retraining, whereas sequential methods focus the inference on one particular observation to be more simulation-efficient. For an overview of implemented methods see below, or checkout or GitHub page.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li> <p>To learn about the general motivation behind simulation-based inference, and the   inference methods included in <code>sbi</code>, read on below.</p> </li> <li> <p>For example applications to canonical problems in neuroscience, browse the recent   research article Training deep neural density estimators to identify mechanistic models of neural dynamics.</p> </li> <li> <p>If you want to get started using <code>sbi</code> on your own problem, jump to   installation and then check out the tutorial.</p> </li> </ul>"},{"location":"#motivation-and-approach","title":"Motivation and approach","text":"<p>Many areas of science and engineering make extensive use of complex, stochastic, numerical simulations to describe the structure and dynamics of the processes being investigated.</p> <p>A key challenge in simulation-based science is constraining these simulation models\u2019 parameters, which are intepretable quantities, with observational data. Bayesian inference provides a general and powerful framework to invert the simulators, i.e. describe the parameters which are consistent both with empirical data and prior knowledge.</p> <p>In the case of simulators, a key quantity required for statistical inference, the likelihood of observed data given parameters, \\(\\mathcal{L}(\\theta) = p(x_o|\\theta)\\), is typically intractable, rendering conventional statistical approaches inapplicable.</p> <p><code>sbi</code> implements powerful machine-learning methods that address this problem. Roughly, these algorithms can be categorized as:</p> <ul> <li>Neural Posterior Estimation (amortized <code>NPE</code> and sequential <code>SNPE</code>),</li> <li>Neural Likelihood Estimation (<code>(S)NLE</code>), and</li> <li>Neural Ratio Estimation (<code>(S)NRE</code>).</li> </ul> <p>Depending on the characteristics of the problem, e.g. the dimensionalities of the parameter space and the observation space, one of the methods will be more suitable.</p> <p></p> <p>Goal: Algorithmically identify mechanistic models which are consistent with data.</p> <p>Each of the methods above needs three inputs: A candidate mechanistic model, prior knowledge or constraints on model parameters, and observational data (or summary statistics thereof).</p> <p>The methods then proceed by</p> <ol> <li>sampling parameters from the prior followed by simulating synthetic data from    these parameters,</li> <li>learning the (probabilistic) association between data (or    data features) and underlying parameters, i.e. to learn statistical inference from    simulated data. The way in which this association is learned differs between the    above methods, but all use deep neural networks.</li> <li>This learned neural network is then applied to empirical data to derive the full    space of parameters consistent with the data and the prior, i.e. the posterior    distribution. High posterior probability is assigned to parameters which are    consistent with both the data and the prior, low probability to inconsistent    parameters. While SNPE directly learns the posterior distribution, SNLE and SNRE need    an extra MCMC sampling step to construct a posterior.</li> <li>If needed, an initial estimate of the posterior can be used to adaptively generate    additional informative simulations.</li> </ol>"},{"location":"#publications","title":"Publications","text":"<p>See Cranmer, Brehmer, Louppe (2020) for a recent review on simulation-based inference.</p> <p>The following papers offer additional details on the inference methods implemented in <code>sbi</code>. You can find a tutorial on how to run each of these methods here.</p>"},{"location":"#posterior-estimation-snpe","title":"Posterior estimation (<code>(S)NPE</code>)","text":"<ul> <li> <p>Fast \u03b5-free Inference of Simulation Models with Bayesian Conditional Density Estimation by Papamakarios &amp; Murray (NeurIPS 2016) [PDF] [BibTeX]</p> </li> <li> <p>Flexible statistical inference for mechanistic models of neural dynamics  by Lueckmann, Goncalves, Bassetto, \u00d6cal, Nonnenmacher &amp; Macke (NeurIPS 2017) [PDF] [BibTeX]</p> </li> <li> <p>Automatic posterior transformation for likelihood-free inferenceby Greenberg, Nonnenmacher &amp; Macke (ICML 2019) [PDF] [BibTeX]</p> </li> <li> <p>Truncated proposals for scalable and hassle-free simulation-based inference  by Deistler, Goncalves &amp; Macke (NeurIPS 2022) [Paper]</p> </li> </ul>"},{"location":"#likelihood-estimation-snle","title":"Likelihood-estimation (<code>(S)NLE</code>)","text":"<ul> <li> <p>Sequential neural likelihood: Fast likelihood-free inference with autoregressive flowsby Papamakarios, Sterratt &amp; Murray (AISTATS 2019) [PDF] [BibTeX]</p> </li> <li> <p>Variational methods for simulation-based inference  by Gl\u00f6ckler, Deistler, Macke (ICLR 2022) [Paper]</p> </li> <li> <p>Flexible and efficient simulation-based inference for models of decision-making  by Boelts, Lueckmann, Gao, Macke (Elife 2022) [Paper]</p> </li> </ul>"},{"location":"#likelihood-ratio-estimation-snre","title":"Likelihood-ratio-estimation (<code>(S)NRE</code>)","text":"<ul> <li> <p>Likelihood-free MCMC with Amortized Approximate Likelihood Ratiosby Hermans, Begy &amp; Louppe (ICML 2020) [PDF]</p> </li> <li> <p>On Contrastive Learning for Likelihood-free InferenceDurkan, Murray &amp; Papamakarios (ICML 2020) [PDF]</p> </li> <li> <p>Towards Reliable Simulation-Based Inference with Balanced Neural Ratio Estimationby Delaunoy, Hermans, Rozet, Wehenkel &amp; Louppe (NeurIPS 2022) [PDF]</p> </li> <li> <p>Contrastive Neural Ratio EstimationBenjamin Kurt Miller, Christoph Weniger, Patrick Forr\u00e9 (NeurIPS 2022) [PDF]</p> </li> </ul>"},{"location":"#utilities","title":"Utilities","text":"<ul> <li> <p>Restriction estimatorby Deistler, Macke &amp; Goncalves (PNAS 2022) [Paper]</p> </li> <li> <p>Simulation-based calibrationby Talts, Betancourt, Simpson, Vehtari, Gelman (arxiv 2018) [Paper])</p> </li> <li> <p>Expected coverage (sample-based)as computed in Deistler, Goncalves, Macke [Paper] and in Rozet, Louppe [Paper]</p> </li> </ul>"},{"location":"citation/","title":"Citation","text":"<p>If you use <code>sbi</code> consider citing the sbi software paper, in addition to the original research articles describing the specific sbi-algorithm(s) you are using. </p> <pre><code>@article{tejero-cantero2020sbi,\n  doi = {10.21105/joss.02505},\n  url = {https://doi.org/10.21105/joss.02505},\n  year = {2020},\n  publisher = {The Open Journal},\n  volume = {5},\n  number = {52},\n  pages = {2505},\n  author = {Alvaro Tejero-Cantero and Jan Boelts and Michael Deistler and Jan-Matthis Lueckmann and Conor Durkan and Pedro J. Gon\u00e7alves and David S. Greenberg and Jakob H. Macke},\n  title = {sbi: A toolkit for simulation-based inference},\n  journal = {Journal of Open Source Software}\n}\n</code></pre> <p>The above citation refers to the original version of the <code>sbi</code> project and has a persistent DOI. Additionally, new releases of <code>sbi</code> are citable via Zenodo, where we create a new DOI for every release.</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting <code>sbi</code> developer Jan Boelts via email (jan.boelts@uni-tuebingen.de). All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contribute/","title":"Guide","text":""},{"location":"contribute/#user-experiences-bugs-and-feature-requests","title":"User experiences, bugs, and feature requests","text":"<p>If you are using <code>sbi</code> to infer the parameters of a simulator, we would be delighted to know how it worked for you. If it didn\u2019t work according to plan, please open up an issue and tell us more about your use case: the dimensionality of the input parameters and of the output, as well as the setup you used to run inference (i.e. number of simulations, number of rounds,\u2026).</p> <p>To report bugs and suggest features (including better documentation), please equally head over to issues on GitHub.</p>"},{"location":"contribute/#code-contributions","title":"Code contributions","text":"<p>Contributions to the <code>sbi</code> package are welcome! In general, we use pull requests to make changes to <code>sbi</code>. So, if you are planning to make a contribution, please fork, create a feature branch and then make a PR from your feature branch to the upstream <code>sbi</code> (details). To give credits to contributors, we consider adding contributors who repeatedly and substantially contributed to <code>sbi</code> to the list of authors of the package at the end of every year. Additionally, we mention all contributors in the releases.</p>"},{"location":"contribute/#development-environment","title":"Development environment","text":"<p>Clone the repo and install all the dependencies using the <code>environment.yml</code> file to create a conda environment: <code>conda env create -f environment.yml</code>. If you already have an <code>sbi</code> environment and want to refresh dependencies, just run <code>conda env update -f environment.yml --prune</code>.</p> <p>Alternatively, you can install via <code>setup.py</code> using <code>pip install -e \".[dev]\"</code> (the dev flag installs development and testing dependencies).</p>"},{"location":"contribute/#style-conventions","title":"Style conventions","text":"<p>For docstrings and comments, we use Google Style.</p> <p>Code needs to pass through the following tools, which are installed alongside <code>sbi</code>:</p> <p>black: Automatic code formatting for Python. You can run black manually from the console using <code>black .</code> in the top directory of the repository, which will format all files.</p> <p>isort: Used to consistently order imports. You can run isort manually from the console using <code>isort</code> in the top directory.</p> <p>pyright: Used for static type checking.</p> <p><code>black</code> and <code>isort</code> and <code>pyright</code> are checked as part of our CI actions. If these checks fail please make sure you have installed the latest versions for each of them and run them locally.</p>"},{"location":"contribute/#online-documentation","title":"Online documentation","text":"<p>Most of the documentation is written in markdown (basic markdown guide).</p> <p>You can directly fix mistakes and suggest clearer formulations in markdown files simply by initiating a PR on through GitHub. Click on documentation file and look for the little pencil at top right.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#license","title":"License","text":"<p><code>sbi</code> is licensed under the Affero General Public License version 3 (AGPLv3) and</p> <p>Copyright (C) 2020 \u00c1lvaro Tejero-Cantero, Jakob H. Macke, Jan-Matthis L\u00fcckmann, Michael Deistler, Jan F. B\u00f6lts.</p> <p>Copyright (C) 2020 Conor M. Durkan.</p>"},{"location":"credits/#support","title":"Support","text":"<p><code>sbi</code> has been supported by the German Federal Ministry of Education and Research (BMBF) through the project ADIMEM, FKZ 01IS18052 A-D). ADIMEM is a collaborative project between the groups of Jakob Macke (Uni T\u00fcbingen), Philipp Berens (Uni T\u00fcbingen), Philipp Hennig (Uni T\u00fcbingen) and Marcel Oberlaender (caesar Bonn) which aims to develop inference methods for mechanistic models.</p> <p></p>"},{"location":"credits/#important-dependencies-and-prior-art","title":"Important dependencies and prior art","text":"<ul> <li> <p><code>sbi</code> is the successor to <code>delfi</code>, a Theano-based   toolbox for sequential neural posterior estimation developed at mackelab. If you were   using <code>delfi</code>, we strongly recommend to move your inference over to <code>sbi</code>. Please open   issues if you find unexpected behaviour or missing features. We will consider these   bugs and give them priority.</p> </li> <li> <p><code>sbi</code> as a PyTorch-based toolbox started as a fork of   conormdurkan/lfi, by Conor   M.Durkan.</p> </li> <li> <p><code>sbi</code> uses density estimators from bayesiains/nflows by Conor M.Durkan, George Papamakarios and Artur Bekasov. These are proxied through <code>pyknos</code>, a package focused on density estimation.</p> </li> <li> <p><code>sbi</code> uses <code>PyTorch</code> and tries to align with the interfaces (e.g. for probability   distributions) adopted by <code>PyTorch</code>.</p> </li> <li> <p>See README.md for a list of   publications describing the methods implemented in <code>sbi</code>.</p> </li> </ul>"},{"location":"faq/","title":"Frequently asked questions","text":"<p>Can the algorithms deal with invalid data, e.g. NaN or inf?</p> <p>What should I do when my \u2018posterior samples are outside of the prior support\u2019 in SNPE?</p> <p>When using multiple workers, I get a pickling error. Can I still use multiprocessing?</p> <p>Can I use the GPU for training the density estimator?</p> <p>How should I save and load objects in <code>sbi</code>?</p> <p>Can I stop neural network training and resume it later?</p> <p>How can I use a prior that is not defined in PyTorch?</p>"},{"location":"install/","title":"Installation","text":"<p><code>sbi</code> requires Python 3.6 or higher. We recommend to use a <code>conda</code> virtual environment (Miniconda installation instructions). If <code>conda</code> is installed on the system, an environment for installing <code>sbi</code> can be created as follows: <pre><code># Create an environment for sbi (indicate Python 3.6 or higher); activate it\n$ conda create -n sbi_env python=3.7 &amp;&amp; conda activate sbi_env\n</code></pre></p> <p>Independent of whether you are using <code>conda</code> or not, <code>sbi</code> can be installed using <code>pip</code>: <pre><code>$ pip install sbi\n</code></pre></p> <p>To test the installation, drop into a python prompt and run <pre><code>from sbi.examples.minimal import simple\nposterior = simple()\nprint(posterior)\n</code></pre></p>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#inference","title":"Inference","text":"<p>Runs simulation-based inference and returns the posterior.</p> <p>This function provides a simple interface to run sbi. Inference is run for a single round and hence the returned posterior \\(p(\\theta|x)\\) can be sampled and evaluated for any \\(x\\) (i.e. it is amortized).</p> <p>The scope of this function is limited to the most essential features of sbi. For more flexibility (e.g. multi-round inference, different density estimators) please use the flexible interface described here: https://www.mackelab.org/sbi/tutorial/02_flexible_interface/</p> <p>Parameters:</p> Name Type Description Default <code>simulator</code> <code>Callable</code> <p>A function that takes parameters \\(\\theta\\) and maps them to simulations, or observations, <code>x</code>, \\(\\mathrm{sim}(\\theta)\\to x\\). Any regular Python callable (i.e. function or class with <code>__call__</code> method) can be used.</p> required <code>prior</code> <code>Distribution</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. Any object with <code>.log_prob()</code>and <code>.sample()</code> (for example, a PyTorch distribution) can be used.</p> required <code>method</code> <code>str</code> <p>What inference method to use. Either of SNPE, SNLE or SNRE.</p> required <code>num_simulations</code> <code>int</code> <p>Number of simulation calls. More simulations means a longer runtime, but a better posterior estimate.</p> required <code>num_workers</code> <code>int</code> <p>Number of parallel workers to use for simulations.</p> <code>1</code> <p>Returns: Posterior over parameters conditional on observations (amortized).</p> Source code in <code>sbi/inference/base.py</code> <pre><code>def infer(\n    simulator: Callable,\n    prior: Distribution,\n    method: str,\n    num_simulations: int,\n    num_workers: int = 1,\n) -&gt; NeuralPosterior:\n    r\"\"\"Runs simulation-based inference and returns the posterior.\n\n    This function provides a simple interface to run sbi. Inference is run for a single\n    round and hence the returned posterior $p(\\theta|x)$ can be sampled and evaluated\n    for any $x$ (i.e. it is amortized).\n\n    The scope of this function is limited to the most essential features of sbi. For\n    more flexibility (e.g. multi-round inference, different density estimators) please\n    use the flexible interface described here:\n    https://www.mackelab.org/sbi/tutorial/02_flexible_interface/\n\n    Args:\n        simulator: A function that takes parameters $\\theta$ and maps them to\n            simulations, or observations, `x`, $\\mathrm{sim}(\\theta)\\to x$. Any\n            regular Python callable (i.e. function or class with `__call__` method)\n            can be used.\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. Any\n            object with `.log_prob()`and `.sample()` (for example, a PyTorch\n            distribution) can be used.\n        method: What inference method to use. Either of SNPE, SNLE or SNRE.\n        num_simulations: Number of simulation calls. More simulations means a longer\n            runtime, but a better posterior estimate.\n        num_workers: Number of parallel workers to use for simulations.\n\n    Returns: Posterior over parameters conditional on observations (amortized).\n    \"\"\"\n\n    try:\n        method_fun: Callable = getattr(sbi.inference, method.upper())\n    except AttributeError:\n        raise NameError(\n            \"Method not available. `method` must be one of 'SNPE', 'SNLE', 'SNRE'.\"\n        )\n\n    simulator, prior = prepare_for_sbi(simulator, prior)\n\n    inference = method_fun(prior=prior)\n    theta, x = simulate_for_sbi(\n        simulator=simulator,\n        proposal=prior,\n        num_simulations=num_simulations,\n        num_workers=num_workers,\n    )\n    _ = inference.append_simulations(theta, x).train()\n    posterior = inference.build_posterior()\n\n    return posterior\n</code></pre> <p>Prepare simulator and prior for usage in sbi.</p> <p>NOTE: This is a wrapper around <code>process_prior</code> and <code>process_simulator</code> which can be used in isolation as well.</p> <p>Attempts to meet the following requirements by reshaping and type-casting:</p> <ul> <li>the simulator function receives as input and returns a Tensor.</li> <li>the simulator can simulate batches of parameters and return batches of data.</li> <li>the prior does not produce batches and samples and evaluates to Tensor.</li> <li>the output shape is a <code>torch.Size((1,N))</code> (i.e, has a leading batch dimension 1).</li> </ul> <p>If this is not possible, a suitable exception will be raised.</p> <p>Parameters:</p> Name Type Description Default <code>simulator</code> <code>Callable</code> <p>Simulator as provided by the user.</p> required <code>prior</code> <p>Prior as provided by the user.</p> required <p>Returns:</p> Type Description <code>Tuple[Callable, Distribution]</code> <p>Tuple (simulator, prior) checked and matching the requirements of sbi.</p> Source code in <code>sbi/utils/user_input_checks.py</code> <pre><code>def prepare_for_sbi(simulator: Callable, prior) -&gt; Tuple[Callable, Distribution]:\n    \"\"\"Prepare simulator and prior for usage in sbi.\n\n    NOTE: This is a wrapper around `process_prior` and `process_simulator` which can be\n    used in isolation as well.\n\n    Attempts to meet the following requirements by reshaping and type-casting:\n\n    - the simulator function receives as input and returns a Tensor.&lt;br/&gt;\n    - the simulator can simulate batches of parameters and return batches of data.&lt;br/&gt;\n    - the prior does not produce batches and samples and evaluates to Tensor.&lt;br/&gt;\n    - the output shape is a `torch.Size((1,N))` (i.e, has a leading batch dimension 1).\n\n    If this is not possible, a suitable exception will be raised.\n\n    Args:\n        simulator: Simulator as provided by the user.\n        prior: Prior as provided by the user.\n\n    Returns:\n        Tuple (simulator, prior) checked and matching the requirements of sbi.\n    \"\"\"\n\n    # Check prior, return PyTorch prior.\n    prior, _, prior_returns_numpy = process_prior(prior)\n\n    # Check simulator, returns PyTorch simulator able to simulate batches.\n    simulator = process_simulator(simulator, prior, prior_returns_numpy)\n\n    # Consistency check after making ready for sbi.\n    check_sbi_inputs(simulator, prior)\n\n    return simulator, prior\n</code></pre> <p>Returns (\\(\\theta, x\\)) pairs obtained from sampling the proposal and simulating.</p> <p>This function performs two steps:</p> <ul> <li>Sample parameters \\(\\theta\\) from the <code>proposal</code>.</li> <li>Simulate these parameters to obtain \\(x\\).</li> </ul> <p>Parameters:</p> Name Type Description Default <code>simulator</code> <code>Callable</code> <p>A function that takes parameters \\(\\theta\\) and maps them to simulations, or observations, <code>x</code>, \\(\\text{sim}(\\theta)\\to x\\). Any regular Python callable (i.e. function or class with <code>__call__</code> method) can be used.</p> required <code>proposal</code> <code>Any</code> <p>Probability distribution that the parameters \\(\\theta\\) are sampled from.</p> required <code>num_simulations</code> <code>int</code> <p>Number of simulations that are run.</p> required <code>num_workers</code> <code>int</code> <p>Number of parallel workers to use for simulations.</p> <code>1</code> <code>simulation_batch_size</code> <code>int</code> <p>Number of parameter sets that the simulator maps to data x at once. If None, we simulate all parameter sets at the same time. If &gt;= 1, the simulator has to process data of shape (simulation_batch_size, parameter_dimension).</p> <code>1</code> <code>seed</code> <code>Optional[int]</code> <p>Seed for reproducibility.</p> <code>None</code> <code>show_progress_bar</code> <code>bool</code> <p>Whether to show a progress bar for simulating. This will not affect whether there will be a progressbar while drawing samples from the proposal.</p> <code>True</code> <p>Returns: Sampled parameters \\(\\theta\\) and simulation-outputs \\(x\\).</p> Source code in <code>sbi/inference/base.py</code> <pre><code>def simulate_for_sbi(\n    simulator: Callable,\n    proposal: Any,\n    num_simulations: int,\n    num_workers: int = 1,\n    simulation_batch_size: int = 1,\n    seed: Optional[int] = None,\n    show_progress_bar: bool = True,\n) -&gt; Tuple[Tensor, Tensor]:\n    r\"\"\"Returns ($\\theta, x$) pairs obtained from sampling the proposal and simulating.\n\n    This function performs two steps:\n\n    - Sample parameters $\\theta$ from the `proposal`.\n    - Simulate these parameters to obtain $x$.\n\n    Args:\n        simulator: A function that takes parameters $\\theta$ and maps them to\n            simulations, or observations, `x`, $\\text{sim}(\\theta)\\to x$. Any\n            regular Python callable (i.e. function or class with `__call__` method)\n            can be used.\n        proposal: Probability distribution that the parameters $\\theta$ are sampled\n            from.\n        num_simulations: Number of simulations that are run.\n        num_workers: Number of parallel workers to use for simulations.\n        simulation_batch_size: Number of parameter sets that the simulator\n            maps to data x at once. If None, we simulate all parameter sets at the\n            same time. If &gt;= 1, the simulator has to process data of shape\n            (simulation_batch_size, parameter_dimension).\n        seed: Seed for reproducibility.\n        show_progress_bar: Whether to show a progress bar for simulating. This will not\n            affect whether there will be a progressbar while drawing samples from the\n            proposal.\n\n    Returns: Sampled parameters $\\theta$ and simulation-outputs $x$.\n    \"\"\"\n\n    theta = proposal.sample((num_simulations,))\n\n    x = simulate_in_batches(\n        simulator=simulator,\n        theta=theta,\n        sim_batch_size=simulation_batch_size,\n        num_workers=num_workers,\n        seed=seed,\n        show_progress_bars=show_progress_bar,\n    )\n\n    return theta, x\n</code></pre> <p>             Bases: <code>PosteriorEstimator</code></p> Source code in <code>sbi/inference/snpe/snpe_a.py</code> <pre><code>class SNPE_A(PosteriorEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        density_estimator: Union[str, Callable] = \"mdn_snpe_a\",\n        num_components: int = 10,\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"WARNING\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"SNPE-A [1].\n\n        [1] _Fast epsilon-free Inference of Simulation Models with Bayesian Conditional\n            Density Estimation_, Papamakarios et al., NeurIPS 2016,\n            https://arxiv.org/abs/1605.06376.\n\n        This class implements SNPE-A. SNPE-A trains across multiple rounds with a\n        maximum-likelihood-loss. This will make training converge to the proposal\n        posterior instead of the true posterior. To correct for this, SNPE-A applies a\n        post-hoc correction after training. This correction has to be performed\n        analytically. Thus, SNPE-A is limited to Gaussian distributions for all but the\n        last round. In the last round, SNPE-A can use a Mixture of Gaussians.\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. Any\n                object with `.log_prob()`and `.sample()` (for example, a PyTorch\n                distribution) can be used.\n            density_estimator: If it is a string (only \"mdn_snpe_a\" is valid), use a\n                pre-configured mixture of densities network. Alternatively, a function\n                that builds a custom neural network can be provided. The function will\n                be called with the first batch of simulations (theta, x), which can\n                thus be used for shape inference and potentially for z-scoring. It\n                needs to return a PyTorch `nn.Module` implementing the density\n                estimator. The density estimator needs to provide the methods\n                `.log_prob` and `.sample()`. Note that until the last round only a\n                single (multivariate) Gaussian component is used for training (see\n                Algorithm 1 in [1]). In the last round, this component is replicated\n                `num_components` times, its parameters are perturbed with a very small\n                noise, and then the last training round is done with the expanded\n                Gaussian mixture as estimator for the proposal posterior.\n            num_components: Number of components of the mixture of Gaussians in the\n                last round. This overrides the `num_components` value passed to\n                `posterior_nn()`.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during training.\n        \"\"\"\n\n        # Catch invalid inputs.\n        if not ((density_estimator == \"mdn_snpe_a\") or callable(density_estimator)):\n            raise TypeError(\n                \"The `density_estimator` passed to SNPE_A needs to be a \"\n                \"callable or the string 'mdn_snpe_a'!\"\n            )\n\n        # `num_components` will be used to replicate the Gaussian in the last round.\n        self._num_components = num_components\n        self._ran_final_round = False\n\n        # WARNING: sneaky trick ahead. We proxy the parent's `train` here,\n        # requiring the signature to have `num_atoms`, save it for use below, and\n        # continue. It's sneaky because we are using the object (self) as a namespace\n        # to pass arguments between functions, and that's implicit state management.\n        kwargs = utils.del_entries(\n            locals(),\n            entries=(\"self\", \"__class__\", \"num_components\"),\n        )\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        final_round: bool = False,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        calibration_kernel: Optional[Callable] = None,\n        resume_training: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n        component_perturbation: float = 5e-3,\n    ) -&gt; nn.Module:\n        r\"\"\"Return density estimator that approximates the proposal posterior.\n\n        [1] _Fast epsilon-free Inference of Simulation Models with Bayesian Conditional\n            Density Estimation_, Papamakarios et al., NeurIPS 2016,\n            https://arxiv.org/abs/1605.06376.\n\n        Training is performed with maximum likelihood on samples from the latest round,\n        which leads the algorithm to converge to the proposal posterior.\n\n        Args:\n            final_round: Whether we are in the last round of training or not. For all\n                but the last round, Algorithm 1 from [1] is executed. In last the\n                round, Algorithm 2 from [1] is executed once.\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            calibration_kernel: A function to calibrate the loss with respect to the\n                simulations `x`. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            force_first_round_loss: If `True`, train with maximum likelihood,\n                i.e., potentially ignoring the correction for using a proposal\n                distribution different from the prior.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round. Not supported for\n                SNPE-A.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n            component_perturbation: The standard deviation applied to all weights and\n                biases when, in the last round, the Mixture of Gaussians is build from\n                a single Gaussian. This value can be problem-specific and also depends\n                on the number of mixture components.\n\n        Returns:\n            Density estimator that approximates the distribution $p(\\theta|x)$.\n        \"\"\"\n\n        assert not retrain_from_scratch, \"\"\"Retraining from scratch is not supported in\n            SNPE-A yet. The reason for this is that, if we reininitialized the density\n            estimator, the z-scoring would change, which would break the posthoc\n            correction. This is a pure implementation issue.\"\"\"\n\n        kwargs = utils.del_entries(\n            locals(),\n            entries=(\n                \"self\",\n                \"__class__\",\n                \"final_round\",\n                \"component_perturbation\",\n            ),\n        )\n\n        # SNPE-A always discards the prior samples.\n        kwargs[\"discard_prior_samples\"] = True\n        kwargs[\"force_first_round_loss\"] = True\n\n        self._round = max(self._data_round_index)\n\n        if final_round:\n            # If there is (will be) only one round, train with Algorithm 2 from [1].\n            if self._round == 0:\n                self._build_neural_net = partial(\n                    self._build_neural_net, num_components=self._num_components\n                )\n            # Run Algorithm 2 from [1].\n            elif not self._ran_final_round:\n                # Now switch to the specified number of components. This method will\n                # only be used if `retrain_from_scratch=True`. Otherwise,\n                # the MDN will be built from replicating the single-component net for\n                # `num_component` times (via `_expand_mog()`).\n                self._build_neural_net = partial(\n                    self._build_neural_net, num_components=self._num_components\n                )\n\n                # Extend the MDN to the originally desired number of components.\n                self._expand_mog(eps=component_perturbation)\n            else:\n                warnings.warn(\n                    \"You have already run SNPE-A with `final_round=True`. Running it\"\n                    \"again with this setting will not allow computing the posthoc\"\n                    \"correction applied in SNPE-A. Thus, you will get an error when \"\n                    \"calling `.build_posterior()` after training.\",\n                    UserWarning,\n                )\n        else:\n            # Run Algorithm 1 from [1].\n            # Wrap the function that builds the MDN such that we can make\n            # sure that there is only one component when running.\n            self._build_neural_net = partial(self._build_neural_net, num_components=1)\n\n        if final_round:\n            self._ran_final_round = True\n\n        return super().train(**kwargs)\n\n    def correct_for_proposal(\n        self,\n        density_estimator: Optional[TorchModule] = None,\n    ) -&gt; \"SNPE_A_MDN\":\n        r\"\"\"Build mixture of Gaussians that approximates the posterior.\n\n        Returns a `SNPE_A_MDN` object, which applies the posthoc-correction required in\n        SNPE-A.\n\n        Args:\n            density_estimator: The density estimator that the posterior is based on.\n                If `None`, use the latest neural density estimator that was trained.\n\n        Returns:\n            Posterior $p(\\theta|x)$  with `.sample()` and `.log_prob()` methods.\n        \"\"\"\n        if density_estimator is None:\n            density_estimator = deepcopy(\n                self._neural_net\n            )  # PosteriorEstimator.train() also returns a deepcopy, mimic this here\n            # If internal net is used device is defined.\n            device = self._device\n        else:\n            # Otherwise, infer it from the device of the net parameters.\n            device = str(next(density_estimator.parameters()).device)\n\n        # Set proposal of the density estimator.\n        # This also evokes the z-scoring correction if necessary.\n        if (\n            self._proposal_roundwise[-1] is self._prior\n            or self._proposal_roundwise[-1] is None\n        ):\n            proposal = self._prior\n            assert isinstance(\n                proposal, (MultivariateNormal, utils.BoxUniform)\n            ), \"\"\"Prior must be `torch.distributions.MultivariateNormal` or `sbi.utils.\n                BoxUniform`\"\"\"\n        else:\n            assert isinstance(\n                self._proposal_roundwise[-1], DirectPosterior\n            ), \"\"\"The proposal you passed to `append_simulations` is neither the prior\n                nor a `DirectPosterior`. SNPE-A currently only supports these scenarios.\n                \"\"\"\n            proposal = self._proposal_roundwise[-1]\n\n        # Create the SNPE_A_MDN\n        wrapped_density_estimator = SNPE_A_MDN(\n            flow=density_estimator,  # type: ignore\n            proposal=proposal,\n            prior=self._prior,\n            device=device,\n        )\n        return wrapped_density_estimator\n\n    def build_posterior(\n        self,\n        density_estimator: Optional[TorchModule] = None,\n        prior: Optional[Distribution] = None,\n    ) -&gt; \"DirectPosterior\":\n        r\"\"\"Build posterior from the neural density estimator.\n\n        This method first corrects the estimated density with `correct_for_proposal`\n        and then returns a `DirectPosterior`.\n\n        Args:\n            density_estimator: The density estimator that the posterior is based on.\n                If `None`, use the latest neural density estimator that was trained.\n            prior: Prior distribution.\n\n        Returns:\n            Posterior $p(\\theta|x)$  with `.sample()` and `.log_prob()` methods.\n        \"\"\"\n        if prior is None:\n            assert (\n                self._prior is not None\n            ), \"\"\"You did not pass a prior. You have to pass the prior either at\n                initialization `inference = SNPE_A(prior)` or to `.build_posterior\n                (prior=prior)`.\"\"\"\n            prior = self._prior\n\n        wrapped_density_estimator = self.correct_for_proposal(\n            density_estimator=density_estimator\n        )\n        self._posterior = DirectPosterior(\n            posterior_estimator=wrapped_density_estimator,  # type: ignore\n            prior=prior,\n        )\n        return deepcopy(self._posterior)\n\n    def _log_prob_proposal_posterior(\n        self,\n        theta: Tensor,\n        x: Tensor,\n        masks: Tensor,\n        proposal: Optional[Any],\n    ) -&gt; Tensor:\n        \"\"\"Return the log-probability of the proposal posterior.\n\n        For SNPE-A this is the same as `self._neural_net.log_prob(theta, x)` in\n        `_loss()` to be found in `snpe_base.py`.\n\n        Args:\n            theta: Batch of parameters \u03b8.\n            x: Batch of data.\n            masks: Mask that is True for prior samples in the batch in order to train\n                them with prior loss.\n            proposal: Proposal distribution.\n\n        Returns: Log-probability of the proposal posterior.\n        \"\"\"\n        return self._neural_net.log_prob(theta, x)\n\n    def _expand_mog(self, eps: float = 1e-5):\n        \"\"\"\n        Replicate a singe Gaussian trained with Algorithm 1 before continuing\n        with Algorithm 2. The weights and biases of the associated MDN layers\n        are repeated `num_components` times, slightly perturbed to break the\n        symmetry such that the gradients in the subsequent training are not\n        all identical.\n\n        Args:\n            eps: Standard deviation for the random perturbation.\n        \"\"\"\n        assert isinstance(self._neural_net._distribution, MultivariateGaussianMDN)\n\n        # Increase the number of components\n        self._neural_net._distribution._num_components = self._num_components\n\n        # Expand the 1-dim Gaussian.\n        for name, param in self._neural_net.named_parameters():\n            if any(\n                key in name for key in [\"logits\", \"means\", \"unconstrained\", \"upper\"]\n            ):\n                if \"bias\" in name:\n                    param.data = param.data.repeat(self._num_components)\n                    param.data.add_(torch.randn_like(param.data) * eps)\n                    param.grad = None  # let autograd construct a new gradient\n                elif \"weight\" in name:\n                    param.data = param.data.repeat(self._num_components, 1)\n                    param.data.add_(torch.randn_like(param.data) * eps)\n                    param.grad = None  # let autograd construct a new gradient\n</code></pre> <p>             Bases: <code>PosteriorEstimator</code></p> Source code in <code>sbi/inference/snpe/snpe_c.py</code> <pre><code>class SNPE_C(PosteriorEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        density_estimator: Union[str, Callable] = \"maf\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"WARNING\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"SNPE-C / APT [1].\n\n        [1] _Automatic Posterior Transformation for Likelihood-free Inference_,\n            Greenberg et al., ICML 2019, https://arxiv.org/abs/1905.07488.\n\n        This class implements two loss variants of SNPE-C: the non-atomic and the atomic\n        version. The atomic loss of SNPE-C can be used for any density estimator,\n        i.e. also for normalizing flows. However, it suffers from leakage issues. On\n        the other hand, the non-atomic loss can only be used only if the proposal\n        distribution is a mixture of Gaussians, the density estimator is a mixture of\n        Gaussians, and the prior is either Gaussian or Uniform. It does not suffer from\n        leakage issues. At the beginning of each round, we print whether the non-atomic\n        or the atomic version is used.\n\n        In this codebase, we will automatically switch to the non-atomic loss if the\n        following criteria are fulfilled:&lt;br/&gt;\n        - proposal is a `DirectPosterior` with density_estimator `mdn`, as built\n            with `utils.sbi.posterior_nn()`.&lt;br/&gt;\n        - the density estimator is a `mdn`, as built with\n            `utils.sbi.posterior_nn()`.&lt;br/&gt;\n        - `isinstance(prior, MultivariateNormal)` (from `torch.distributions`) or\n            `isinstance(prior, sbi.utils.BoxUniform)`\n\n        Note that custom implementations of any of these densities (or estimators) will\n        not trigger the non-atomic loss, and the algorithm will fall back onto using\n        the atomic loss.\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them.\n            density_estimator: If it is a string, use a pre-configured network of the\n                provided type (one of nsf, maf, mdn, made). Alternatively, a function\n                that builds a custom neural network can be provided. The function will\n                be called with the first batch of simulations (theta, x), which can\n                thus be used for shape inference and potentially for z-scoring. It\n                needs to return a PyTorch `nn.Module` implementing the density\n                estimator. The density estimator needs to provide the methods\n                `.log_prob` and `.sample()`.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during training.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        num_atoms: int = 10,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        calibration_kernel: Optional[Callable] = None,\n        resume_training: bool = False,\n        force_first_round_loss: bool = False,\n        discard_prior_samples: bool = False,\n        use_combined_loss: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n    ) -&gt; nn.Module:\n        r\"\"\"Return density estimator that approximates the distribution $p(\\theta|x)$.\n\n        Args:\n            num_atoms: Number of atoms to use for classification.\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            calibration_kernel: A function to calibrate the loss with respect to the\n                simulations `x`. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            force_first_round_loss: If `True`, train with maximum likelihood,\n                i.e., potentially ignoring the correction for using a proposal\n                distribution different from the prior.\n            discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n                from the prior. Training may be sped up by ignoring such less targeted\n                samples.\n            use_combined_loss: Whether to train the neural net also on prior samples\n                using maximum likelihood in addition to training it on all samples using\n                atomic loss. The extra MLE loss helps prevent density leaking with\n                bounded priors.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n\n        Returns:\n            Density estimator that approximates the distribution $p(\\theta|x)$.\n        \"\"\"\n\n        # WARNING: sneaky trick ahead. We proxy the parent's `train` here,\n        # requiring the signature to have `num_atoms`, save it for use below, and\n        # continue. It's sneaky because we are using the object (self) as a namespace\n        # to pass arguments between functions, and that's implicit state management.\n        self._num_atoms = num_atoms\n        self._use_combined_loss = use_combined_loss\n        kwargs = del_entries(\n            locals(),\n            entries=(\"self\", \"__class__\", \"num_atoms\", \"use_combined_loss\"),\n        )\n\n        self._round = max(self._data_round_index)\n\n        if self._round &gt; 0:\n            # Set the proposal to the last proposal that was passed by the user. For\n            # atomic SNPE, it does not matter what the proposal is. For non-atomic\n            # SNPE, we only use the latest data that was passed, i.e. the one from the\n            # last proposal.\n            proposal = self._proposal_roundwise[-1]\n            self.use_non_atomic_loss = (\n                isinstance(proposal, DirectPosterior)\n                and isinstance(proposal.posterior_estimator._distribution, mdn)\n                and isinstance(self._neural_net._distribution, mdn)\n                and check_dist_class(\n                    self._prior, class_to_check=(Uniform, MultivariateNormal)\n                )[0]\n            )\n\n            algorithm = \"non-atomic\" if self.use_non_atomic_loss else \"atomic\"\n            print(f\"Using SNPE-C with {algorithm} loss\")\n\n            if self.use_non_atomic_loss:\n                # Take care of z-scoring, pre-compute and store prior terms.\n                self._set_state_for_mog_proposal()\n\n        return super().train(**kwargs)\n\n    def _set_state_for_mog_proposal(self) -&gt; None:\n        \"\"\"Set state variables that are used at each training step of non-atomic SNPE-C.\n\n        Three things are computed:\n        1) Check if z-scoring was requested. To do so, we check if the `_transform`\n            argument of the net had been a `CompositeTransform`. See pyknos mdn.py.\n        2) Define a (potentially standardized) prior. It's standardized if z-scoring\n            had been requested.\n        3) Compute (Precision * mean) for the prior. This quantity is used at every\n            training step if the prior is Gaussian.\n        \"\"\"\n\n        self.z_score_theta = isinstance(self._neural_net._transform, CompositeTransform)\n\n        self._set_maybe_z_scored_prior()\n\n        if isinstance(self._maybe_z_scored_prior, MultivariateNormal):\n            self.prec_m_prod_prior = torch.mv(\n                self._maybe_z_scored_prior.precision_matrix,  # type: ignore\n                self._maybe_z_scored_prior.loc,  # type: ignore\n            )\n\n    def _set_maybe_z_scored_prior(self) -&gt; None:\n        r\"\"\"Compute and store potentially standardized prior (if z-scoring was done).\n\n        The proposal posterior is:\n        $pp(\\theta|x) = 1/Z * q(\\theta|x) * prop(\\theta) / p(\\theta)$\n\n        Let's denote z-scored theta by `a`: a = (theta - mean) / std\n        Then pp'(a|x) = 1/Z_2 * q'(a|x) * prop'(a) / p'(a)$\n\n        The ' indicates that the evaluation occurs in standardized space. The constant\n        scaling factor has been absorbed into Z_2.\n        From the above equation, we see that we need to evaluate the prior **in\n        standardized space**. We build the standardized prior in this function.\n\n        The standardize transform that is applied to the samples theta does not use\n        the exact prior mean and std (due to implementation issues). Hence, the z-scored\n        prior will not be exactly have mean=0 and std=1.\n        \"\"\"\n\n        if self.z_score_theta:\n            scale = self._neural_net._transform._transforms[0]._scale\n            shift = self._neural_net._transform._transforms[0]._shift\n\n            # Following the definintion of the linear transform in\n            # `standardizing_transform` in `sbiutils.py`:\n            # shift=-mean / std\n            # scale=1 / std\n            # Solving these equations for mean and std:\n            estim_prior_std = 1 / scale\n            estim_prior_mean = -shift * estim_prior_std\n\n            # Compute the discrepancy of the true prior mean and std and the mean and\n            # std that was empirically estimated from samples.\n            # N(theta|m,s) = N((theta-m_e)/s_e|(m-m_e)/s_e, s/s_e)\n            # Above: m,s are true prior mean and std. m_e,s_e are estimated prior mean\n            # and std (estimated from samples and used to build standardize transform).\n            almost_zero_mean = (self._prior.mean - estim_prior_mean) / estim_prior_std\n            almost_one_std = torch.sqrt(self._prior.variance) / estim_prior_std\n\n            if isinstance(self._prior, MultivariateNormal):\n                self._maybe_z_scored_prior = MultivariateNormal(\n                    almost_zero_mean, torch.diag(almost_one_std)\n                )\n            else:\n                range_ = torch.sqrt(almost_one_std * 3.0)\n                self._maybe_z_scored_prior = utils.BoxUniform(\n                    almost_zero_mean - range_, almost_zero_mean + range_\n                )\n        else:\n            self._maybe_z_scored_prior = self._prior\n\n    def _log_prob_proposal_posterior(\n        self,\n        theta: Tensor,\n        x: Tensor,\n        masks: Tensor,\n        proposal: DirectPosterior,\n    ) -&gt; Tensor:\n        \"\"\"Return the log-probability of the proposal posterior.\n\n        If the proposal is a MoG, the density estimator is a MoG, and the prior is\n        either Gaussian or uniform, we use non-atomic loss. Else, use atomic loss (which\n        suffers from leakage).\n\n        Args:\n            theta: Batch of parameters \u03b8.\n            x: Batch of data.\n            masks: Mask that is True for prior samples in the batch in order to train\n                them with prior loss.\n            proposal: Proposal distribution.\n\n        Returns: Log-probability of the proposal posterior.\n        \"\"\"\n\n        if self.use_non_atomic_loss:\n            return self._log_prob_proposal_posterior_mog(theta, x, proposal)\n        else:\n            return self._log_prob_proposal_posterior_atomic(theta, x, masks)\n\n    def _log_prob_proposal_posterior_atomic(\n        self, theta: Tensor, x: Tensor, masks: Tensor\n    ):\n        \"\"\"Return log probability of the proposal posterior for atomic proposals.\n\n        We have two main options when evaluating the proposal posterior.\n            (1) Generate atoms from the proposal prior.\n            (2) Generate atoms from a more targeted distribution, such as the most\n                recent posterior.\n        If we choose the latter, it is likely beneficial not to do this in the first\n        round, since we would be sampling from a randomly-initialized neural density\n        estimator.\n\n        Args:\n            theta: Batch of parameters \u03b8.\n            x: Batch of data.\n            masks: Mask that is True for prior samples in the batch in order to train\n                them with prior loss.\n\n        Returns:\n            Log-probability of the proposal posterior.\n        \"\"\"\n\n        batch_size = theta.shape[0]\n\n        num_atoms = int(\n            clamp_and_warn(\"num_atoms\", self._num_atoms, min_val=2, max_val=batch_size)\n        )\n\n        # Each set of parameter atoms is evaluated using the same x,\n        # so we repeat rows of the data x, e.g. [1, 2] -&gt; [1, 1, 2, 2]\n        repeated_x = repeat_rows(x, num_atoms)\n\n        # To generate the full set of atoms for a given item in the batch,\n        # we sample without replacement num_atoms - 1 times from the rest\n        # of the theta in the batch.\n        probs = ones(batch_size, batch_size) * (1 - eye(batch_size)) / (batch_size - 1)\n\n        choices = torch.multinomial(probs, num_samples=num_atoms - 1, replacement=False)\n        contrasting_theta = theta[choices]\n\n        # We can now create our sets of atoms from the contrasting parameter sets\n        # we have generated.\n        atomic_theta = torch.cat((theta[:, None, :], contrasting_theta), dim=1).reshape(\n            batch_size * num_atoms, -1\n        )\n\n        # Evaluate large batch giving (batch_size * num_atoms) log prob posterior evals.\n        log_prob_posterior = self._neural_net.log_prob(atomic_theta, repeated_x)\n        utils.assert_all_finite(log_prob_posterior, \"posterior eval\")\n        log_prob_posterior = log_prob_posterior.reshape(batch_size, num_atoms)\n\n        # Get (batch_size * num_atoms) log prob prior evals.\n        log_prob_prior = self._prior.log_prob(atomic_theta)\n        log_prob_prior = log_prob_prior.reshape(batch_size, num_atoms)\n        utils.assert_all_finite(log_prob_prior, \"prior eval\")\n\n        # Compute unnormalized proposal posterior.\n        unnormalized_log_prob = log_prob_posterior - log_prob_prior\n\n        # Normalize proposal posterior across discrete set of atoms.\n        log_prob_proposal_posterior = unnormalized_log_prob[:, 0] - torch.logsumexp(\n            unnormalized_log_prob, dim=-1\n        )\n        utils.assert_all_finite(log_prob_proposal_posterior, \"proposal posterior eval\")\n\n        # XXX This evaluates the posterior on _all_ prior samples\n        if self._use_combined_loss:\n            log_prob_posterior_non_atomic = self._neural_net.log_prob(theta, x)\n            masks = masks.reshape(-1)\n            log_prob_proposal_posterior = (\n                masks * log_prob_posterior_non_atomic + log_prob_proposal_posterior\n            )\n\n        return log_prob_proposal_posterior\n\n    def _log_prob_proposal_posterior_mog(\n        self, theta: Tensor, x: Tensor, proposal: DirectPosterior\n    ) -&gt; Tensor:\n        \"\"\"Return log-probability of the proposal posterior for MoG proposal.\n\n        For MoG proposals and MoG density estimators, this can be done in closed form\n        and does not require atomic loss (i.e. there will be no leakage issues).\n\n        Notation:\n\n        m are mean vectors.\n        prec are precision matrices.\n        cov are covariance matrices.\n\n        _p at the end indicates that it is the proposal.\n        _d indicates that it is the density estimator.\n        _pp indicates the proposal posterior.\n\n        All tensors will have shapes (batch_dim, num_components, ...)\n\n        Args:\n            theta: Batch of parameters \u03b8.\n            x: Batch of data.\n            proposal: Proposal distribution.\n\n        Returns:\n            Log-probability of the proposal posterior.\n        \"\"\"\n\n        # Evaluate the proposal. MDNs do not have functionality to run the embedding_net\n        # and then get the mixture_components (**without** calling log_prob()). Hence,\n        # we call them separately here.\n        encoded_x = proposal.posterior_estimator._embedding_net(proposal.default_x)\n        dist = (\n            proposal.posterior_estimator._distribution\n        )  # defined to avoid ugly black formatting.\n        logits_p, m_p, prec_p, _, _ = dist.get_mixture_components(encoded_x)\n        norm_logits_p = logits_p - torch.logsumexp(logits_p, dim=-1, keepdim=True)\n\n        # Evaluate the density estimator.\n        encoded_x = self._neural_net._embedding_net(x)\n        dist = self._neural_net._distribution  # defined to avoid black formatting.\n        logits_d, m_d, prec_d, _, _ = dist.get_mixture_components(encoded_x)\n        norm_logits_d = logits_d - torch.logsumexp(logits_d, dim=-1, keepdim=True)\n\n        # z-score theta if it z-scoring had been requested.\n        theta = self._maybe_z_score_theta(theta)\n\n        # Compute the MoG parameters of the proposal posterior.\n        (\n            logits_pp,\n            m_pp,\n            prec_pp,\n            cov_pp,\n        ) = self._automatic_posterior_transformation(\n            norm_logits_p, m_p, prec_p, norm_logits_d, m_d, prec_d\n        )\n\n        # Compute the log_prob of theta under the product.\n        log_prob_proposal_posterior = utils.mog_log_prob(\n            theta, logits_pp, m_pp, prec_pp\n        )\n        utils.assert_all_finite(\n            log_prob_proposal_posterior,\n            \"\"\"the evaluation of the MoG proposal posterior. This is likely due to a\n            numerical instability in the training procedure. Please create an issue on\n            Github.\"\"\",\n        )\n\n        return log_prob_proposal_posterior\n\n    def _automatic_posterior_transformation(\n        self,\n        logits_p: Tensor,\n        means_p: Tensor,\n        precisions_p: Tensor,\n        logits_d: Tensor,\n        means_d: Tensor,\n        precisions_d: Tensor,\n    ):\n        r\"\"\"Returns the MoG parameters of the proposal posterior.\n\n        The proposal posterior is:\n        $pp(\\theta|x) = 1/Z * q(\\theta|x) * prop(\\theta) / p(\\theta)$\n        In words: proposal posterior = posterior estimate * proposal / prior.\n\n        If the posterior estimate and the proposal are MoG and the prior is either\n        Gaussian or uniform, we can solve this in closed-form. The is implemented in\n        this function.\n\n        This function implements Appendix A1 from Greenberg et al. 2019.\n\n        We have to build L*K components. How do we do this?\n        Example: proposal has two components, density estimator has three components.\n        Let's call the two components of the proposal i,j and the three components\n        of the density estimator x,y,z. We have to multiply every component of the\n        proposal with every component of the density estimator. So, what we do is:\n        1) for the proposal, build: i,i,i,j,j,j. Done with torch.repeat_interleave()\n        2) for the density estimator, build: x,y,z,x,y,z. Done with torch.repeat()\n        3) Multiply them with simple matrix operations.\n\n        Args:\n            logits_p: Component weight of each Gaussian of the proposal.\n            means_p: Mean of each Gaussian of the proposal.\n            precisions_p: Precision matrix of each Gaussian of the proposal.\n            logits_d: Component weight for each Gaussian of the density estimator.\n            means_d: Mean of each Gaussian of the density estimator.\n            precisions_d: Precision matrix of each Gaussian of the density estimator.\n\n        Returns: (Component weight, mean, precision matrix, covariance matrix) of each\n            Gaussian of the proposal posterior. Has L*K terms (proposal has L terms,\n            density estimator has K terms).\n        \"\"\"\n\n        precisions_pp, covariances_pp = self._precisions_proposal_posterior(\n            precisions_p, precisions_d\n        )\n\n        means_pp = self._means_proposal_posterior(\n            covariances_pp, means_p, precisions_p, means_d, precisions_d\n        )\n\n        logits_pp = self._logits_proposal_posterior(\n            means_pp,\n            precisions_pp,\n            covariances_pp,\n            logits_p,\n            means_p,\n            precisions_p,\n            logits_d,\n            means_d,\n            precisions_d,\n        )\n\n        return logits_pp, means_pp, precisions_pp, covariances_pp\n\n    def _precisions_proposal_posterior(\n        self, precisions_p: Tensor, precisions_d: Tensor\n    ):\n        \"\"\"Return the precisions and covariances of the proposal posterior.\n\n        Args:\n            precisions_p: Precision matrices of the proposal distribution.\n            precisions_d: Precision matrices of the density estimator.\n\n        Returns: (Precisions, Covariances) of the proposal posterior. L*K terms.\n        \"\"\"\n\n        num_comps_p = precisions_p.shape[1]\n        num_comps_d = precisions_d.shape[1]\n\n        precisions_p_rep = precisions_p.repeat_interleave(num_comps_d, dim=1)\n        precisions_d_rep = precisions_d.repeat(1, num_comps_p, 1, 1)\n\n        precisions_pp = precisions_p_rep + precisions_d_rep\n        if isinstance(self._maybe_z_scored_prior, MultivariateNormal):\n            precisions_pp -= self._maybe_z_scored_prior.precision_matrix\n\n        covariances_pp = torch.inverse(precisions_pp)\n\n        return precisions_pp, covariances_pp\n\n    def _means_proposal_posterior(\n        self,\n        covariances_pp: Tensor,\n        means_p: Tensor,\n        precisions_p: Tensor,\n        means_d: Tensor,\n        precisions_d: Tensor,\n    ):\n        \"\"\"Return the means of the proposal posterior.\n\n        means_pp = C_ix * (P_i * m_i + P_x * m_x - P_o * m_o).\n\n        Args:\n            covariances_pp: Covariance matrices of the proposal posterior.\n            means_p: Means of the proposal distribution.\n            precisions_p: Precision matrices of the proposal distribution.\n            means_d: Means of the density estimator.\n            precisions_d: Precision matrices of the density estimator.\n\n        Returns: Means of the proposal posterior. L*K terms.\n        \"\"\"\n\n        num_comps_p = precisions_p.shape[1]\n        num_comps_d = precisions_d.shape[1]\n\n        # First, compute the product P_i * m_i and P_j * m_j\n        prec_m_prod_p = batched_mixture_mv(precisions_p, means_p)\n        prec_m_prod_d = batched_mixture_mv(precisions_d, means_d)\n\n        # Repeat them to allow for matrix operations: same trick as for the precisions.\n        prec_m_prod_p_rep = prec_m_prod_p.repeat_interleave(num_comps_d, dim=1)\n        prec_m_prod_d_rep = prec_m_prod_d.repeat(1, num_comps_p, 1)\n\n        # Means = C_ij * (P_i * m_i + P_x * m_x - P_o * m_o).\n        summed_cov_m_prod_rep = prec_m_prod_p_rep + prec_m_prod_d_rep\n        if isinstance(self._maybe_z_scored_prior, MultivariateNormal):\n            summed_cov_m_prod_rep -= self.prec_m_prod_prior\n\n        means_pp = batched_mixture_mv(covariances_pp, summed_cov_m_prod_rep)\n\n        return means_pp\n\n    @staticmethod\n    def _logits_proposal_posterior(\n        means_pp: Tensor,\n        precisions_pp: Tensor,\n        covariances_pp: Tensor,\n        logits_p: Tensor,\n        means_p: Tensor,\n        precisions_p: Tensor,\n        logits_d: Tensor,\n        means_d: Tensor,\n        precisions_d: Tensor,\n    ):\n        \"\"\"Return the component weights (i.e. logits) of the proposal posterior.\n\n        Args:\n            means_pp: Means of the proposal posterior.\n            precisions_pp: Precision matrices of the proposal posterior.\n            covariances_pp: Covariance matrices of the proposal posterior.\n            logits_p: Component weights (i.e. logits) of the proposal distribution.\n            means_p: Means of the proposal distribution.\n            precisions_p: Precision matrices of the proposal distribution.\n            logits_d: Component weights (i.e. logits) of the density estimator.\n            means_d: Means of the density estimator.\n            precisions_d: Precision matrices of the density estimator.\n\n        Returns: Component weights of the proposal posterior. L*K terms.\n        \"\"\"\n\n        num_comps_p = precisions_p.shape[1]\n        num_comps_d = precisions_d.shape[1]\n\n        # Compute log(alpha_i * beta_j)\n        logits_p_rep = logits_p.repeat_interleave(num_comps_d, dim=1)\n        logits_d_rep = logits_d.repeat(1, num_comps_p)\n        logit_factors = logits_p_rep + logits_d_rep\n\n        # Compute sqrt(det()/(det()*det()))\n        logdet_covariances_pp = torch.logdet(covariances_pp)\n        logdet_covariances_p = -torch.logdet(precisions_p)\n        logdet_covariances_d = -torch.logdet(precisions_d)\n\n        # Repeat the proposal and density estimator terms such that there are LK terms.\n        # Same trick as has been used above.\n        logdet_covariances_p_rep = logdet_covariances_p.repeat_interleave(\n            num_comps_d, dim=1\n        )\n        logdet_covariances_d_rep = logdet_covariances_d.repeat(1, num_comps_p)\n\n        log_sqrt_det_ratio = 0.5 * (\n            logdet_covariances_pp\n            - (logdet_covariances_p_rep + logdet_covariances_d_rep)\n        )\n\n        # Compute for proposal, density estimator, and proposal posterior:\n        # mu_i.T * P_i * mu_i\n        exponent_p = batched_mixture_vmv(precisions_p, means_p)\n        exponent_d = batched_mixture_vmv(precisions_d, means_d)\n        exponent_pp = batched_mixture_vmv(precisions_pp, means_pp)\n\n        # Extend proposal and density estimator exponents to get LK terms.\n        exponent_p_rep = exponent_p.repeat_interleave(num_comps_d, dim=1)\n        exponent_d_rep = exponent_d.repeat(1, num_comps_p)\n        exponent = -0.5 * (exponent_p_rep + exponent_d_rep - exponent_pp)\n\n        logits_pp = logit_factors + log_sqrt_det_ratio + exponent\n\n        return logits_pp\n\n    def _maybe_z_score_theta(self, theta: Tensor) -&gt; Tensor:\n        \"\"\"Return potentially standardized theta if z-scoring was requested.\"\"\"\n\n        if self.z_score_theta:\n            theta, _ = self._neural_net._transform(theta)\n\n        return theta\n</code></pre> <p>             Bases: <code>LikelihoodEstimator</code></p> Source code in <code>sbi/inference/snle/snle_a.py</code> <pre><code>class SNLE_A(LikelihoodEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        density_estimator: Union[str, Callable] = \"maf\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"WARNING\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"Sequential Neural Likelihood [1].\n\n        [1] Sequential Neural Likelihood: Fast Likelihood-free Inference with\n        Autoregressive Flows_, Papamakarios et al., AISTATS 2019,\n        https://arxiv.org/abs/1805.07226\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. If `None`, the\n                prior must be passed to `.build_posterior()`.\n            density_estimator: If it is a string, use a pre-configured network of the\n                provided type (one of nsf, maf, mdn, made). Alternatively, a function\n                that builds a custom neural network can be provided. The function will\n                be called with the first batch of simulations (theta, x), which can\n                thus be used for shape inference and potentially for z-scoring. It\n                needs to return a PyTorch `nn.Module` implementing the density\n                estimator. The density estimator needs to provide the methods\n                `.log_prob` and `.sample()`.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n</code></pre> <p>             Bases: <code>RatioEstimator</code></p> Source code in <code>sbi/inference/snre/snre_a.py</code> <pre><code>class SNRE_A(RatioEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        classifier: Union[str, Callable] = \"resnet\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"warning\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"AALR[1], here known as SNRE_A.\n\n        [1] _Likelihood-free MCMC with Amortized Approximate Likelihood Ratios_, Hermans\n            et al., ICML 2020, https://arxiv.org/abs/1903.04057\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. If `None`, the\n                prior must be passed to `.build_posterior()`.\n            classifier: Classifier trained to approximate likelihood ratios. If it is\n                a string, use a pre-configured network of the provided type (one of\n                linear, mlp, resnet). Alternatively, a function that builds a custom\n                neural network can be provided. The function will be called with the\n                first batch of simulations (theta, x), which can thus be used for shape\n                inference and potentially for z-scoring. It needs to return a PyTorch\n                `nn.Module` implementing the classifier.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        resume_training: bool = False,\n        discard_prior_samples: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n        loss_kwargs: Dict[str, Any] = {},\n    ) -&gt; nn.Module:\n        r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n        Args:\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n                from the prior. Training may be sped up by ignoring such less targeted\n                samples.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n            loss_kwargs: Additional or updated kwargs to be passed to the self._loss fn.\n\n        Returns:\n            Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n        \"\"\"\n\n        # AALR is defined for `num_atoms=2`.\n        # Proxy to `super().__call__` to ensure right parameter.\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        return super().train(**kwargs, num_atoms=2)\n\n    def _loss(self, theta: Tensor, x: Tensor, num_atoms: int) -&gt; Tensor:\n        \"\"\"Returns the binary cross-entropy loss for the trained classifier.\n\n        The classifier takes as input a $(\\theta,x)$ pair. It is trained to predict 1\n        if the pair was sampled from the joint $p(\\theta,x)$, and to predict 0 if the\n        pair was sampled from the marginals $p(\\theta)p(x)$.\n        \"\"\"\n\n        assert theta.shape[0] == x.shape[0], \"Batch sizes for theta and x must match.\"\n        batch_size = theta.shape[0]\n\n        logits = self._classifier_logits(theta, x, num_atoms)\n        likelihood = torch.sigmoid(logits).squeeze()\n\n        # Alternating pairs where there is one sampled from the joint and one\n        # sampled from the marginals. The first element is sampled from the\n        # joint p(theta, x) and is labelled 1. The second element is sampled\n        # from the marginals p(theta)p(x) and is labelled 0. And so on.\n        labels = ones(2 * batch_size, device=self._device)  # two atoms\n        labels[1::2] = 0.0\n\n        # Binary cross entropy to learn the likelihood (AALR-specific)\n        return nn.BCELoss()(likelihood, labels)\n</code></pre> <p>             Bases: <code>RatioEstimator</code></p> Source code in <code>sbi/inference/snre/snre_b.py</code> <pre><code>class SNRE_B(RatioEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        classifier: Union[str, Callable] = \"resnet\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"warning\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"SRE[1], here known as SNRE_B.\n\n        [1] _On Contrastive Learning for Likelihood-free Inference_, Durkan et al.,\n            ICML 2020, https://arxiv.org/pdf/2002.03712\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. If `None`, the\n                prior must be passed to `.build_posterior()`.\n            classifier: Classifier trained to approximate likelihood ratios. If it is\n                a string, use a pre-configured network of the provided type (one of\n                linear, mlp, resnet). Alternatively, a function that builds a custom\n                neural network can be provided. The function will be called with the\n                first batch of simulations (theta, x), which can thus be used for shape\n                inference and potentially for z-scoring. It needs to return a PyTorch\n                `nn.Module` implementing the classifier.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        num_atoms: int = 10,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        resume_training: bool = False,\n        discard_prior_samples: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n    ) -&gt; nn.Module:\n        r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n        Args:\n            num_atoms: Number of atoms to use for classification.\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n                from the prior. Training may be sped up by ignoring such less targeted\n                samples.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n\n        Returns:\n            Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n        \"\"\"\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        return super().train(**kwargs)\n\n    def _loss(self, theta: Tensor, x: Tensor, num_atoms: int) -&gt; Tensor:\n        r\"\"\"Return cross-entropy (via softmax activation) loss for 1-out-of-`num_atoms`\n        classification.\n\n        The classifier takes as input `num_atoms` $(\\theta,x)$ pairs. Out of these\n        pairs, one pair was sampled from the joint $p(\\theta,x)$ and all others from the\n        marginals $p(\\theta)p(x)$. The classifier is trained to predict which of the\n        pairs was sampled from the joint $p(\\theta,x)$.\n        \"\"\"\n\n        assert theta.shape[0] == x.shape[0], \"Batch sizes for theta and x must match.\"\n        batch_size = theta.shape[0]\n        logits = self._classifier_logits(theta, x, num_atoms)\n\n        # For 1-out-of-`num_atoms` classification each datapoint consists\n        # of `num_atoms` points, with one of them being the correct one.\n        # We have a batch of `batch_size` such datapoints.\n        logits = logits.reshape(batch_size, num_atoms)\n\n        # Index 0 is the theta-x-pair sampled from the joint p(theta,x) and hence the\n        # \"correct\" one for the 1-out-of-N classification.\n        log_prob = logits[:, 0] - torch.logsumexp(logits, dim=-1)\n\n        return -torch.mean(log_prob)\n</code></pre> <p>             Bases: <code>RatioEstimator</code></p> Source code in <code>sbi/inference/snre/snre_c.py</code> <pre><code>class SNRE_C(RatioEstimator):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        classifier: Union[str, Callable] = \"resnet\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"warning\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"NRE-C[1] is a generalization of the non-sequential (amortized) versions of\n        SNRE_A and SNRE_B. We call the algorithm SNRE_C within `sbi`.\n\n        NRE-C:\n        (1) like SNRE_B, features a \"multiclass\" loss function where several marginally\n            drawn parameter-data pairs are contrasted against a jointly drawn pair.\n        (2) like AALR/NRE_A, i.e., the non-sequential version of SNRE_A, it encourages\n            the approximate ratio $p(\\theta,x)/p(\\theta)p(x)$, accessed through\n            `.potential()` within `sbi`, to be exact at optimum. This addresses the\n            issue that SNRE_B estimates this ratio only up to an arbitrary function\n            (normalizing constant) of the data $x$.\n\n        Just like for all ratio estimation algorithms, the sequential version of SNRE_C\n        will be estimated only up to a function (normalizing constant) of the data $x$\n        in rounds after the first.\n\n        [1] _Contrastive Neural Ratio Estimation_, Benajmin Kurt Miller, et. al.,\n            NeurIPS 2022, https://arxiv.org/abs/2210.06170\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. If `None`, the\n                prior must be passed to `.build_posterior()`.\n            classifier: Classifier trained to approximate likelihood ratios. If it is\n                a string, use a pre-configured network of the provided type (one of\n                linear, mlp, resnet). Alternatively, a function that builds a custom\n                neural network can be provided. The function will be called with the\n                first batch of simulations (theta, x), which can thus be used for shape\n                inference and potentially for z-scoring. It needs to return a PyTorch\n                `nn.Module` implementing the classifier.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        num_classes: int = 5,\n        gamma: float = 1.0,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        resume_training: bool = False,\n        discard_prior_samples: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n    ) -&gt; nn.Module:\n        r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n        Args:\n            num_classes: Number of theta to classify against, corresponds to $K$ in\n                _Contrastive Neural Ratio Estimation_. Minimum value is 1. Similar to\n                `num_atoms` for SNRE_B except SNRE_C has an additional independently\n                drawn sample. The total number of alternative parameters `NRE-C` \"sees\"\n                is $2K-1$ or `2 * num_classes - 1` divided between two loss terms.\n            gamma: Determines the relative weight of the sum of all $K$ dependently\n                drawn classes against the marginally drawn one. Specifically,\n                $p(y=k) :=p_K$, $p(y=0) := p_0$, $p_0 = 1 - K p_K$, and finally\n                $\\gamma := K p_K / p_0$.\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            exclude_invalid_x: Whether to exclude simulation outputs `x=NaN` or `x=\u00b1\u221e`\n                during training. Expect errors, silent or explicit, when `False`.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n                from the prior. Training may be sped up by ignoring such less targeted\n                samples.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n\n        Returns:\n            Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n        \"\"\"\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        kwargs[\"num_atoms\"] = kwargs.pop(\"num_classes\") + 1\n        kwargs[\"loss_kwargs\"] = {\"gamma\": kwargs.pop(\"gamma\")}\n        return super().train(**kwargs)\n\n    def _loss(\n        self, theta: Tensor, x: Tensor, num_atoms: int, gamma: float\n    ) -&gt; torch.Tensor:\n        r\"\"\"Return cross-entropy loss (via ''multi-class sigmoid'' activation) for\n        1-out-of-`K + 1` classification.\n\n        At optimum, this loss function returns the exact likelihood-to-evidence ratio\n        in the first round.\n        Details of loss computation are described in Contrastive Neural Ratio\n        Estimation[1]. The paper does not discuss the sequential case.\n\n        [1] _Contrastive Neural Ratio Estimation_, Benajmin Kurt Miller, et. al.,\n            NeurIPS 2022, https://arxiv.org/abs/2210.06170\n        \"\"\"\n\n        # Reminder: K = num_classes\n        # The algorithm is written with K, so we convert back to K format rather than\n        # reasoning in num_atoms.\n        num_classes = num_atoms - 1\n        assert num_classes &gt;= 1, f\"num_classes = {num_classes} must be greater than 1.\"\n\n        assert theta.shape[0] == x.shape[0], \"Batch sizes for theta and x must match.\"\n        batch_size = theta.shape[0]\n\n        # We append an contrastive theta to the marginal case because we will remove\n        # the jointly drawn\n        # sample in the logits_marginal[:, 0] position. That makes the remaining sample\n        # marginally drawn.\n        # We have a batch of `batch_size` datapoints.\n        logits_marginal = self._classifier_logits(theta, x, num_classes + 1).reshape(\n            batch_size, num_classes + 1\n        )\n        logits_joint = self._classifier_logits(theta, x, num_classes).reshape(\n            batch_size, num_classes\n        )\n\n        dtype = logits_marginal.dtype\n        device = logits_marginal.device\n\n        # Index 0 is the theta-x-pair sampled from the joint p(theta,x) and hence\n        # we remove the jointly drawn sample from the logits_marginal\n        logits_marginal = logits_marginal[:, 1:]\n        # ... and retain it in the logits_joint. Now we have two arrays with K choices.\n\n        # To use logsumexp, we extend the denominator logits with loggamma\n        loggamma = torch.tensor(gamma, dtype=dtype, device=device).log()\n        logK = torch.tensor(num_classes, dtype=dtype, device=device).log()\n        denominator_marginal = torch.concat(\n            [loggamma + logits_marginal, logK.expand((batch_size, 1))],\n            dim=-1,\n        )\n        denominator_joint = torch.concat(\n            [loggamma + logits_joint, logK.expand((batch_size, 1))],\n            dim=-1,\n        )\n\n        # Compute the contributions to the loss from each term in the classification.\n        log_prob_marginal = logK - torch.logsumexp(denominator_marginal, dim=-1)\n        log_prob_joint = (\n            loggamma + logits_joint[:, 0] - torch.logsumexp(denominator_joint, dim=-1)\n        )\n\n        # relative weights. p_marginal := p_0, and p_joint := p_K * K from the notation.\n        p_marginal, p_joint = self._get_prior_probs_marginal_and_joint(gamma)\n        return -torch.mean(p_marginal * log_prob_marginal + p_joint * log_prob_joint)\n\n    @staticmethod\n    def _get_prior_probs_marginal_and_joint(gamma: float) -&gt; Tuple[float, float]:\n        r\"\"\"Return a tuple (p_marginal, p_joint) where `p_marginal := `$p_0$,\n        `p_joint := `$p_K \\cdot K$.\n\n        We let the joint (dependently drawn) class to be equally likely across K\n        options. The marginal class is therefore restricted to get the remaining\n        probability.\n        \"\"\"\n        p_joint = gamma / (1 + gamma)\n        p_marginal = 1 / (1 + gamma)\n        return p_marginal, p_joint\n</code></pre> <p>             Bases: <code>SNRE_A</code></p> Source code in <code>sbi/inference/snre/bnre.py</code> <pre><code>class BNRE(SNRE_A):\n    def __init__(\n        self,\n        prior: Optional[Distribution] = None,\n        classifier: Union[str, Callable] = \"resnet\",\n        device: str = \"cpu\",\n        logging_level: Union[int, str] = \"warning\",\n        summary_writer: Optional[TensorboardSummaryWriter] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"Balanced neural ratio estimation (BNRE)[1]. BNRE is a variation of NRE\n        aiming to produce more conservative posterior approximations\n\n        [1] Delaunoy, A., Hermans, J., Rozet, F., Wehenkel, A., &amp; Louppe, G..\n        Towards Reliable Simulation-Based Inference with Balanced Neural Ratio\n        Estimation.\n        NeurIPS 2022. https://arxiv.org/abs/2208.13624\n\n        Args:\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. If `None`, the\n                prior must be passed to `.build_posterior()`.\n            classifier: Classifier trained to approximate likelihood ratios. If it is\n                a string, use a pre-configured network of the provided type (one of\n                linear, mlp, resnet). Alternatively, a function that builds a custom\n                neural network can be provided. The function will be called with the\n                first batch of simulations $(\\theta, x)$, which can thus be used for\n                shape inference and potentially for z-scoring. It needs to return a\n                PyTorch `nn.Module` implementing the classifier.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n            logging_level: Minimum severity of messages to log. One of the strings\n                INFO, WARNING, DEBUG, ERROR and CRITICAL.\n            summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n                file location (default is `&lt;current working directory&gt;/logs`.)\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        super().__init__(**kwargs)\n\n    def train(\n        self,\n        regularization_strength: float = 100.0,\n        training_batch_size: int = 50,\n        learning_rate: float = 5e-4,\n        validation_fraction: float = 0.1,\n        stop_after_epochs: int = 20,\n        max_num_epochs: int = 2**31 - 1,\n        clip_max_norm: Optional[float] = 5.0,\n        resume_training: bool = False,\n        discard_prior_samples: bool = False,\n        retrain_from_scratch: bool = False,\n        show_train_summary: bool = False,\n        dataloader_kwargs: Optional[Dict] = None,\n    ) -&gt; nn.Module:\n        r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n        Args:\n\n            regularization_strength: The multiplicative coefficient applied to the\n                balancing regularizer ($\\lambda$).\n            training_batch_size: Training batch size.\n            learning_rate: Learning rate for Adam optimizer.\n            validation_fraction: The fraction of data to use for validation.\n            stop_after_epochs: The number of epochs to wait for improvement on the\n                validation set before terminating training.\n            max_num_epochs: Maximum number of epochs to run. If reached, we stop\n                training even when the validation loss is still decreasing. Otherwise,\n                we train until validation loss increases (see also `stop_after_epochs`).\n            clip_max_norm: Value at which to clip the total gradient norm in order to\n                prevent exploding gradients. Use None for no clipping.\n            exclude_invalid_x: Whether to exclude simulation outputs `x=NaN` or `x=\u00b1\u221e`\n                during training. Expect errors, silent or explicit, when `False`.\n            resume_training: Can be used in case training time is limited, e.g. on a\n                cluster. If `True`, the split between train and validation set, the\n                optimizer, the number of epochs, and the best validation log-prob will\n                be restored from the last time `.train()` was called.\n            discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n                from the prior. Training may be sped up by ignoring such less targeted\n                samples.\n            retrain_from_scratch: Whether to retrain the conditional density\n                estimator for the posterior from scratch each round.\n            show_train_summary: Whether to print the number of epochs and validation\n                loss and leakage after the training.\n            dataloader_kwargs: Additional or updated kwargs to be passed to the training\n                and validation dataloaders (like, e.g., a collate_fn)\n        Returns:\n            Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n        \"\"\"\n        kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n        kwargs[\"loss_kwargs\"] = {\n            \"regularization_strength\": kwargs.pop(\"regularization_strength\")\n        }\n        return super().train(**kwargs)\n\n    def _loss(\n        self, theta: Tensor, x: Tensor, num_atoms: int, regularization_strength: float\n    ) -&gt; Tensor:\n        \"\"\"Returns the binary cross-entropy loss for the trained classifier.\n\n        The classifier takes as input a $(\\theta,x)$ pair. It is trained to predict 1\n        if the pair was sampled from the joint $p(\\theta,x)$, and to predict 0 if the\n        pair was sampled from the marginals $p(\\theta)p(x)$.\n        \"\"\"\n\n        assert theta.shape[0] == x.shape[0], \"Batch sizes for theta and x must match.\"\n        batch_size = theta.shape[0]\n\n        logits = self._classifier_logits(theta, x, num_atoms)\n        likelihood = torch.sigmoid(logits).squeeze()\n\n        # Alternating pairs where there is one sampled from the joint and one\n        # sampled from the marginals. The first element is sampled from the\n        # joint p(theta, x) and is labelled 1. The second element is sampled\n        # from the marginals p(theta)p(x) and is labelled 0. And so on.\n        labels = ones(2 * batch_size, device=self._device)  # two atoms\n        labels[1::2] = 0.0\n\n        # Binary cross entropy to learn the likelihood (AALR-specific)\n        bce = nn.BCELoss()(likelihood, labels)\n\n        # Balancing regularizer\n        regularizer = (\n            (torch.sigmoid(logits[0::2]) + torch.sigmoid(logits[1::2]) - 1)\n            .mean()\n            .square()\n        )\n\n        return bce + regularization_strength * regularizer\n</code></pre> <p>             Bases: <code>ABCBASE</code></p> Source code in <code>sbi/inference/abc/mcabc.py</code> <pre><code>class MCABC(ABCBASE):\n    def __init__(\n        self,\n        simulator: Callable,\n        prior,\n        distance: Union[str, Callable] = \"l2\",\n        num_workers: int = 1,\n        simulation_batch_size: int = 1,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"Monte-Carlo Approximate Bayesian Computation (Rejection ABC) [1].\n\n        [1] Pritchard, J. K., Seielstad, M. T., Perez-Lezaun, A., &amp; Feldman, M. W.\n        (1999). Population growth of human Y chromosomes: a study of Y chromosome\n        microsatellites. Molecular biology and evolution, 16(12), 1791-1798.\n\n        Args:\n            simulator: A function that takes parameters $\\theta$ and maps them to\n                simulations, or observations, `x`, $\\mathrm{sim}(\\theta)\\to x$. Any\n                regular Python callable (i.e. function or class with `__call__` method)\n                can be used.\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. Any\n                object with `.log_prob()`and `.sample()` (for example, a PyTorch\n                distribution) can be used.\n            distance: Distance function to compare observed and simulated data. Can be\n                a custom function or one of `l1`, `l2`, `mse`.\n            num_workers: Number of parallel workers to use for simulations.\n            simulation_batch_size: Number of parameter sets that the simulator\n                maps to data x at once. If None, we simulate all parameter sets at the\n                same time. If &gt;= 1, the simulator has to process data of shape\n                (simulation_batch_size, parameter_dimension).\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n        \"\"\"\n\n        super().__init__(\n            simulator=simulator,\n            prior=prior,\n            distance=distance,\n            num_workers=num_workers,\n            simulation_batch_size=simulation_batch_size,\n            show_progress_bars=show_progress_bars,\n        )\n\n    def __call__(\n        self,\n        x_o: Union[Tensor, ndarray],\n        num_simulations: int,\n        eps: Optional[float] = None,\n        quantile: Optional[float] = None,\n        lra: bool = False,\n        sass: bool = False,\n        sass_fraction: float = 0.25,\n        sass_expansion_degree: int = 1,\n        kde: bool = False,\n        kde_kwargs: Dict[str, Any] = {},\n        return_summary: bool = False,\n    ) -&gt; Union[Tuple[Tensor, dict], Tuple[KDEWrapper, dict], Tensor, KDEWrapper]:\n        r\"\"\"Run MCABC and return accepted parameters or KDE object fitted on them.\n\n        Args:\n            x_o: Observed data.\n            num_simulations: Number of simulations to run.\n            eps: Acceptance threshold $\\epsilon$ for distance between observed and\n                simulated data.\n            quantile: Upper quantile of smallest distances for which the corresponding\n                parameters are returned, e.g, q=0.01 will return the top 1%. Exactly\n                one of quantile or `eps` have to be passed.\n            lra: Whether to run linear regression adjustment as in Beaumont et al. 2002\n            sass: Whether to determine semi-automatic summary statistics as in\n                Fearnhead &amp; Prangle 2012.\n            sass_fraction: Fraction of simulation budget used for the initial sass run.\n            sass_expansion_degree: Degree of the polynomial feature expansion for the\n                sass regression, default 1 - no expansion.\n            kde: Whether to run KDE on the accepted parameters to return a KDE\n                object from which one can sample.\n            kde_kwargs: kwargs for performing KDE:\n                'bandwidth='; either a float, or a string naming a bandwidth\n                heuristics, e.g., 'cv' (cross validation), 'silvermann' or 'scott',\n                default 'cv'.\n                'transform': transform applied to the parameters before doing KDE.\n                'sample_weights': weights associated with samples. See 'get_kde' for\n                more details\n            return_summary: Whether to return the distances and data corresponding to\n                the accepted parameters.\n\n        Returns:\n            theta (if kde False): accepted parameters\n            kde (if kde True): KDE object based on accepted parameters from which one\n                can .sample() and .log_prob().\n            summary (if summary True): dictionary containing the accepted paramters (if\n                kde True), distances and simulated data x.\n        \"\"\"\n\n        # Exactly one of eps or quantile need to be passed.\n        assert (eps is not None) ^ (\n            quantile is not None\n        ), \"Eps or quantile must be passed, but not both.\"\n\n        # Run SASS and change the simulator and x_o accordingly.\n        if sass:\n            num_pilot_simulations = int(sass_fraction * num_simulations)\n            self.logger.info(\n                f\"Running SASS with {num_pilot_simulations} pilot samples.\"\n            )\n            num_simulations -= num_pilot_simulations\n\n            pilot_theta = self.prior.sample((num_pilot_simulations,))\n            pilot_x = self._batched_simulator(pilot_theta)\n\n            sass_transform = self.get_sass_transform(\n                pilot_theta, pilot_x, sass_expansion_degree\n            )\n\n            simulator = lambda theta: sass_transform(self._batched_simulator(theta))\n            x_o = sass_transform(x_o)\n        else:\n            simulator = self._batched_simulator\n\n        # Simulate and calculate distances.\n        theta = self.prior.sample((num_simulations,))\n        x = simulator(theta)\n\n        # Infer shape of x to test and set x_o.\n        self.x_shape = x[0].unsqueeze(0).shape\n        self.x_o = process_x(x_o, self.x_shape)\n\n        distances = self.distance(self.x_o, x)\n\n        # Select based on acceptance threshold epsilon.\n        if eps is not None:\n            is_accepted = distances &lt; eps\n            num_accepted = is_accepted.sum().item()\n            assert num_accepted &gt; 0, f\"No parameters accepted, eps={eps} too small\"\n\n            theta_accepted = theta[is_accepted]\n            distances_accepted = distances[is_accepted]\n            x_accepted = x[is_accepted]\n\n        # Select based on quantile on sorted distances.\n        elif quantile is not None:\n            num_top_samples = int(num_simulations * quantile)\n            sort_idx = torch.argsort(distances)\n            theta_accepted = theta[sort_idx][:num_top_samples]\n            distances_accepted = distances[sort_idx][:num_top_samples]\n            x_accepted = x[sort_idx][:num_top_samples]\n\n        else:\n            raise ValueError(\"One of epsilon or quantile has to be passed.\")\n\n        # Maybe adjust theta with LRA.\n        if lra:\n            self.logger.info(\"Running Linear regression adjustment.\")\n            final_theta = self.run_lra(theta_accepted, x_accepted, observation=self.x_o)\n        else:\n            final_theta = theta_accepted\n\n        if kde:\n            self.logger.info(\n                f\"\"\"KDE on {final_theta.shape[0]} samples with bandwidth option\n                {kde_kwargs[\"bandwidth\"] if \"bandwidth\" in kde_kwargs else \"cv\"}.\n                Beware that KDE can give unreliable results when used with too few\n                samples and in high dimensions.\"\"\"\n            )\n\n            kde_dist = get_kde(final_theta, **kde_kwargs)\n\n            if return_summary:\n                return (\n                    kde_dist,\n                    dict(theta=final_theta, distances=distances_accepted, x=x_accepted),\n                )\n            else:\n                return kde_dist\n        elif return_summary:\n            return final_theta, dict(distances=distances_accepted, x=x_accepted)\n        else:\n            return final_theta\n</code></pre> <p>             Bases: <code>ABCBASE</code></p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>class SMCABC(ABCBASE):\n    def __init__(\n        self,\n        simulator: Callable,\n        prior: Distribution,\n        distance: Union[str, Callable] = \"l2\",\n        num_workers: int = 1,\n        simulation_batch_size: int = 1,\n        show_progress_bars: bool = True,\n        kernel: Optional[str] = \"gaussian\",\n        algorithm_variant: str = \"C\",\n    ):\n        r\"\"\"Sequential Monte Carlo Approximate Bayesian Computation.\n\n        We distinguish between three different SMC methods here:\n            - A: Toni et al. 2010 (Phd Thesis)\n            - B: Sisson et al. 2007 (with correction from 2009)\n            - C: Beaumont et al. 2009\n\n        In Toni et al. 2010 we find an overview of the differences on page 34:\n            - B: same as A except for resampling of weights if the effective sampling\n                size is too small.\n            - C: same as A except for calculation of the covariance of the perturbation\n                kernel: the kernel covariance is a scaled version of the covariance of\n                the previous population.\n\n        Args:\n            simulator: A function that takes parameters $\\theta$ and maps them to\n                simulations, or observations, `x`, $\\mathrm{sim}(\\theta)\\to x$. Any\n                regular Python callable (i.e. function or class with `__call__` method)\n                can be used.\n            prior: A probability distribution that expresses prior knowledge about the\n                parameters, e.g. which ranges are meaningful for them. Any\n                object with `.log_prob()`and `.sample()` (for example, a PyTorch\n                distribution) can be used.\n            distance: Distance function to compare observed and simulated data. Can be\n                a custom function or one of `l1`, `l2`, `mse`.\n            num_workers: Number of parallel workers to use for simulations.\n            simulation_batch_size: Number of parameter sets that the simulator\n                maps to data x at once. If None, we simulate all parameter sets at the\n                same time. If &gt;= 1, the simulator has to process data of shape\n                (simulation_batch_size, parameter_dimension).\n            show_progress_bars: Whether to show a progressbar during simulation and\n                sampling.\n            kernel: Perturbation kernel.\n            algorithm_variant: Indicating the choice of algorithm variant, A, B, or C.\n\n        \"\"\"\n\n        super().__init__(\n            simulator=simulator,\n            prior=prior,\n            distance=distance,\n            num_workers=num_workers,\n            simulation_batch_size=simulation_batch_size,\n            show_progress_bars=show_progress_bars,\n        )\n\n        kernels = (\"gaussian\", \"uniform\")\n        assert (\n            kernel in kernels\n        ), f\"Kernel '{kernel}' not supported. Choose one from {kernels}.\"\n        self.kernel = kernel\n\n        algorithm_variants = (\"A\", \"B\", \"C\")\n        assert algorithm_variant in algorithm_variants, (\n            f\"SMCABC variant '{algorithm_variant}' not supported, choose one from\"\n            \" {algorithm_variants}.\"\n        )\n        self.algorithm_variant = algorithm_variant\n        self.distance_to_x0 = None\n        self.simulation_counter = 0\n        self.num_simulations = 0\n\n        # Define simulator that keeps track of budget.\n        def simulate_with_budget(theta):\n            self.simulation_counter += theta.shape[0]\n            return self._batched_simulator(theta)\n\n        self._simulate_with_budget = simulate_with_budget\n\n    def __call__(\n        self,\n        x_o: Union[Tensor, ndarray],\n        num_particles: int,\n        num_initial_pop: int,\n        num_simulations: int,\n        epsilon_decay: float,\n        distance_based_decay: bool = False,\n        ess_min: Optional[float] = None,\n        kernel_variance_scale: float = 1.0,\n        use_last_pop_samples: bool = True,\n        return_summary: bool = False,\n        kde: bool = False,\n        kde_kwargs: Dict[str, Any] = {},\n        kde_sample_weights: bool = False,\n        lra: bool = False,\n        lra_with_weights: bool = False,\n        sass: bool = False,\n        sass_fraction: float = 0.25,\n        sass_expansion_degree: int = 1,\n    ) -&gt; Union[Tensor, KDEWrapper, Tuple[Tensor, dict], Tuple[KDEWrapper, dict]]:\n        r\"\"\"Run SMCABC and return accepted parameters or KDE object fitted on them.\n\n        Args:\n            x_o: Observed data.\n            num_particles: Number of particles in each population.\n            num_initial_pop: Number of simulations used for initial population.\n            num_simulations: Total number of possible simulations.\n            epsilon_decay: Factor with which the acceptance threshold $\\epsilon$ decays.\n            distance_based_decay: Whether the $\\epsilon$ decay is constant over\n                populations or calculated from the previous populations distribution of\n                distances.\n            ess_min: Threshold of effective sampling size for resampling weights. Not\n                used when None (default).\n            kernel_variance_scale: Factor for scaling the perturbation kernel variance.\n            use_last_pop_samples: Whether to fill up the current population with\n                samples from the previous population when the budget is used up. If\n                False, the current population is discarded and the previous population\n                is returned.\n            lra: Whether to run linear regression adjustment as in Beaumont et al. 2002\n            lra_with_weights: Whether to run lra as weighted linear regression with SMC\n                weights\n            sass: Whether to determine semi-automatic summary statistics as in\n                Fearnhead &amp; Prangle 2012.\n            sass_fraction: Fraction of simulation budget used for the initial sass run.\n            sass_expansion_degree: Degree of the polynomial feature expansion for the\n                sass regression, default 1 - no expansion.\n            kde: Whether to run KDE on the accepted parameters to return a KDE\n                object from which one can sample.\n            kde_kwargs: kwargs for performing KDE:\n                'bandwidth='; either a float, or a string naming a bandwidth\n                heuristics, e.g., 'cv' (cross validation), 'silvermann' or 'scott',\n                default 'cv'.\n                'transform': transform applied to the parameters before doing KDE.\n                'sample_weights': weights associated with samples. See 'get_kde' for\n                more details\n            kde_sample_weights: Whether perform weighted KDE with SMC weights or on raw\n                particles.\n            return_summary: Whether to return a dictionary with all accepted particles,\n                weights, etc. at the end.\n\n        Returns:\n            theta (if kde False): accepted parameters of the last population.\n            kde (if kde True): KDE object fitted on accepted parameters, from which one\n                can .sample() and .log_prob().\n            summary (if return_summary True): dictionary containing the accepted\n                paramters (if kde True), distances and simulated data x of all\n                populations.\n        \"\"\"\n\n        pop_idx = 0\n        self.num_simulations = num_simulations\n\n        # Pilot run for SASS.\n        if sass:\n            num_pilot_simulations = int(sass_fraction * num_simulations)\n            self.logger.info(\n                f\"Running SASS with {num_pilot_simulations} pilot samples.\"\n            )\n            sass_transform = self.run_sass_set_xo(\n                num_particles, num_pilot_simulations, x_o, lra, sass_expansion_degree\n            )\n            # Udpate simulator and xo\n            x_o = sass_transform(self.x_o)\n\n            def sass_simulator(theta):\n                self.simulation_counter += theta.shape[0]\n                return sass_transform(self._batched_simulator(theta))\n\n            self._simulate_with_budget = sass_simulator\n\n        # run initial population\n        particles, epsilon, distances, x = self._set_xo_and_sample_initial_population(\n            x_o, num_particles, num_initial_pop\n        )\n        log_weights = torch.log(1 / num_particles * ones(num_particles))\n\n        self.logger.info(\n            (\n                f\"population={pop_idx}, eps={epsilon}, ess={1.0}, \"\n                f\"num_sims={num_initial_pop}\"\n            )\n        )\n\n        all_particles = [particles]\n        all_log_weights = [log_weights]\n        all_distances = [distances]\n        all_epsilons = [epsilon]\n        all_x = [x]\n\n        while self.simulation_counter &lt; self.num_simulations:\n            pop_idx += 1\n            # Decay based on quantile of distances from previous pop.\n            if distance_based_decay:\n                epsilon = self._get_next_epsilon(\n                    all_distances[pop_idx - 1], epsilon_decay\n                )\n            # Constant decay.\n            else:\n                epsilon *= epsilon_decay\n\n            # Get kernel variance from previous pop.\n            self.kernel_variance = self.get_kernel_variance(\n                all_particles[pop_idx - 1],\n                torch.exp(all_log_weights[pop_idx - 1]),\n                samples_per_dim=500,\n                kernel_variance_scale=kernel_variance_scale,\n            )\n            particles, log_weights, distances, x = self._sample_next_population(\n                particles=all_particles[pop_idx - 1],\n                log_weights=all_log_weights[pop_idx - 1],\n                distances=all_distances[pop_idx - 1],\n                epsilon=epsilon,\n                x=all_x[pop_idx - 1],\n                use_last_pop_samples=use_last_pop_samples,\n            )\n\n            # Resample population if effective sampling size is too small.\n            if ess_min is not None:\n                particles, log_weights = self.resample_if_ess_too_small(\n                    particles, log_weights, ess_min, pop_idx\n                )\n\n            self.logger.info(\n                (\n                    f\"population={pop_idx} done: eps={epsilon:.6f},\"\n                    f\" num_sims={self.simulation_counter}.\"\n                )\n            )\n\n            # collect results\n            all_particles.append(particles)\n            all_log_weights.append(log_weights)\n            all_distances.append(distances)\n            all_epsilons.append(epsilon)\n            all_x.append(x)\n\n        # Maybe run LRA and adjust weights.\n        if lra:\n            self.logger.info(\"Running Linear regression adjustment.\")\n            adjusted_particles, adjusted_weights = self.run_lra_update_weights(\n                particles=all_particles[-1],\n                xs=all_x[-1],\n                observation=process_x(x_o),\n                log_weights=all_log_weights[-1],\n                lra_with_weights=lra_with_weights,\n            )\n            final_particles = adjusted_particles\n        else:\n            final_particles = all_particles[-1]\n\n        if kde:\n            self.logger.info(\n                f\"\"\"KDE on {final_particles.shape[0]} samples with bandwidth option\n                {kde_kwargs[\"bandwidth\"] if \"bandwidth\" in kde_kwargs else \"cv\"}.\n                Beware that KDE can give unreliable results when used with too few\n                samples and in high dimensions.\"\"\"\n            )\n            # Maybe get particles weights from last population for weighted KDE.\n            if kde_sample_weights:\n                kde_kwargs[\"sample_weights\"] = all_log_weights[-1].exp()\n\n            kde_dist = get_kde(final_particles, **kde_kwargs)\n\n            if return_summary:\n                return (\n                    kde_dist,\n                    dict(\n                        particles=all_particles,\n                        weights=all_log_weights,\n                        epsilons=all_epsilons,\n                        distances=all_distances,\n                        xs=all_x,\n                    ),\n                )\n            else:\n                return kde_dist\n\n        if return_summary:\n            return (\n                final_particles,\n                dict(\n                    particles=all_particles,\n                    weights=all_log_weights,\n                    epsilons=all_epsilons,\n                    distances=all_distances,\n                    xs=all_x,\n                ),\n            )\n        else:\n            return final_particles\n\n    def _set_xo_and_sample_initial_population(\n        self,\n        x_o: Array,\n        num_particles: int,\n        num_initial_pop: int,\n    ) -&gt; Tuple[Tensor, float, Tensor, Tensor]:\n        \"\"\"Return particles, epsilon and distances of initial population.\"\"\"\n\n        assert (\n            num_particles &lt;= num_initial_pop\n        ), \"number of initial round simulations must be greater than population size\"\n\n        theta = self.prior.sample((num_initial_pop,))\n        x = self._simulate_with_budget(theta)\n\n        # Infer x shape to test and set x_o.\n        self.x_shape = x[0].unsqueeze(0).shape\n        self.x_o = process_x(x_o, self.x_shape)\n\n        distances = self.distance(self.x_o, x)\n        sortidx = torch.argsort(distances)\n        particles = theta[sortidx][:num_particles]\n        # Take last accepted distance as epsilon.\n        initial_epsilon = distances[sortidx][num_particles - 1]\n\n        if not torch.isfinite(initial_epsilon):\n            initial_epsilon = 1e8\n\n        return (\n            particles,\n            initial_epsilon,\n            distances[sortidx][:num_particles],\n            x[sortidx][:num_particles],\n        )\n\n    def _sample_next_population(\n        self,\n        particles: Tensor,\n        log_weights: Tensor,\n        distances: Tensor,\n        epsilon: float,\n        x: Tensor,\n        use_last_pop_samples: bool = True,\n    ) -&gt; Tuple[Tensor, Tensor, Tensor, Tensor]:\n        \"\"\"Return particles, weights and distances of new population.\"\"\"\n\n        new_particles = []\n        new_log_weights = []\n        new_distances = []\n        new_x = []\n\n        num_accepted_particles = 0\n        num_particles = particles.shape[0]\n\n        while num_accepted_particles &lt; num_particles:\n            # Upperbound for batch size to not exceed simulation budget.\n            num_batch = min(\n                num_particles - num_accepted_particles,\n                self.num_simulations - self.simulation_counter,\n            )\n\n            # Sample from previous population and perturb.\n            particle_candidates = self._sample_and_perturb(\n                particles, torch.exp(log_weights), num_samples=num_batch\n            )\n            # Simulate and select based on distance.\n            x_candidates = self._simulate_with_budget(particle_candidates)\n            dists = self.distance(self.x_o, x_candidates)\n            is_accepted = dists &lt;= epsilon\n            num_accepted_batch = is_accepted.sum().item()\n\n            if num_accepted_batch &gt; 0:\n                new_particles.append(particle_candidates[is_accepted])\n                new_log_weights.append(\n                    self._calculate_new_log_weights(\n                        particle_candidates[is_accepted],\n                        particles,\n                        log_weights,\n                    )\n                )\n                new_distances.append(dists[is_accepted])\n                new_x.append(x_candidates[is_accepted])\n                num_accepted_particles += num_accepted_batch\n\n            # If simulation budget was exceeded and we still need particles, take\n            # previous population or fill up with previous population.\n            if (\n                self.simulation_counter &gt;= self.num_simulations\n                and num_accepted_particles &lt; num_particles\n            ):\n                if use_last_pop_samples:\n                    num_remaining = num_particles - num_accepted_particles\n                    self.logger.info(\n                        f\"\"\"Simulation Budget exceeded, filling up with {num_remaining}\n                        samples from last population.\"\"\"\n                    )\n                    # Some new particles have been accepted already, therefore\n                    # fill up the remaining once with old particles and weights.\n                    new_particles.append(particles[:num_remaining, :])\n                    # Recalculate weights with new particles.\n                    new_log_weights = [\n                        self._calculate_new_log_weights(\n                            torch.cat(new_particles),\n                            particles,\n                            log_weights,\n                        )\n                    ]\n                    new_distances.append(distances[:num_remaining])\n                    new_x.append(x[:num_remaining])\n                else:\n                    self.logger.info(\n                        \"Simulation Budget exceeded, returning previous population.\"\n                    )\n                    new_particles = [particles]\n                    new_log_weights = [log_weights]\n                    new_distances = [distances]\n                    new_x = [x]\n\n                break\n\n        # collect lists of tensors into tensors\n        new_particles = torch.cat(new_particles)\n        new_log_weights = torch.cat(new_log_weights)\n        new_distances = torch.cat(new_distances)\n        new_x = torch.cat(new_x)\n\n        # normalize the new weights\n        new_log_weights -= torch.logsumexp(new_log_weights, dim=0)\n\n        # Return sorted wrt distances.\n        sort_idx = torch.argsort(new_distances)\n\n        return (\n            new_particles[sort_idx],\n            new_log_weights[sort_idx],\n            new_distances[sort_idx],\n            new_x[sort_idx],\n        )\n\n    def _get_next_epsilon(self, distances: Tensor, quantile: float) -&gt; float:\n        \"\"\"Return epsilon for next round based on quantile of this round's distances.\n\n        Note: distances are made unique to avoid repeated distances from simulations\n        that result in the same observation.\n\n        Args:\n            distances: The distances accepted in this round.\n            quantile: Quantile in the distance distribution to determine new epsilon.\n\n        Returns:\n            epsilon: Epsilon for the next population.\n        \"\"\"\n        # Take unique distances to skip same distances simulations (return is sorted).\n        distances = torch.unique(distances)\n        # Cumsum as cdf proxy.\n        distances_cdf = torch.cumsum(distances, dim=0) / distances.sum()\n        # Take the q quantile of distances.\n        try:\n            qidx = torch.where(distances_cdf &gt;= quantile)[0][0]\n        except IndexError:\n            self.logger.warning(\n                (\n                    f\"Accepted unique distances={distances} don't match \"\n                    f\"quantile={quantile:.2f}. Selecting last distance.\"\n                )\n            )\n            qidx = -1\n\n        # The new epsilon is given by that distance.\n        return distances[qidx].item()\n\n    def _calculate_new_log_weights(\n        self,\n        new_particles: Tensor,\n        old_particles: Tensor,\n        old_log_weights: Tensor,\n    ) -&gt; Tensor:\n        \"\"\"Return new log weights following formulas in publications A,B anc C.\"\"\"\n\n        # Prior can be batched across new particles.\n        prior_log_probs = self.prior.log_prob(new_particles)\n\n        # Contstruct function to get kernel log prob for given old particle.\n        # The kernel is centered on each old particle as in all three variants (A,B,C).\n        def kernel_log_prob(new_particle):\n            return self.get_new_kernel(old_particles).log_prob(new_particle)\n\n        # We still have to loop over particles here because\n        # the kernel log probs are already batched across old particles.\n        log_weighted_sum = tensor(\n            [\n                torch.logsumexp(old_log_weights + kernel_log_prob(new_particle), dim=0)\n                for new_particle in new_particles\n            ],\n            dtype=torch.float32,\n        )\n        # new weights are prior probs over weighted sum:\n        return prior_log_probs - log_weighted_sum\n\n    @staticmethod\n    def sample_from_population_with_weights(\n        particles: Tensor, weights: Tensor, num_samples: int = 1\n    ) -&gt; Tensor:\n        \"\"\"Return samples from particles sampled with weights.\"\"\"\n\n        # define multinomial with weights as probs\n        multi = Multinomial(probs=weights)\n        # sample num samples, with replacement\n        samples = multi.sample(sample_shape=torch.Size((num_samples,)))\n        # get indices of success trials\n        indices = torch.where(samples)[1]\n        # return those indices from trace\n        return particles[indices]\n\n    def _sample_and_perturb(\n        self, particles: Tensor, weights: Tensor, num_samples: int = 1\n    ) -&gt; Tensor:\n        \"\"\"Sample and perturb batch of new parameters from trace.\n\n        Reject sampled and perturbed parameters outside of prior.\n        \"\"\"\n\n        num_accepted = 0\n        parameters = []\n        while num_accepted &lt; num_samples:\n            parms = self.sample_from_population_with_weights(\n                particles, weights, num_samples=num_samples - num_accepted\n            )\n\n            # Create kernel on params and perturb.\n            parms_perturbed = self.get_new_kernel(parms).sample()\n\n            is_within_prior = within_support(self.prior, parms_perturbed)\n            num_accepted += int(is_within_prior.sum().item())\n\n            if num_accepted &gt; 0:\n                parameters.append(parms_perturbed[is_within_prior])\n\n        return torch.cat(parameters)\n\n    def get_kernel_variance(\n        self,\n        particles: Tensor,\n        weights: Tensor,\n        samples_per_dim: int = 100,\n        kernel_variance_scale: float = 1.0,\n    ) -&gt; Tensor:\n        if self.kernel == \"gaussian\":\n            # For variant C, Beaumont et al. 2009, the kernel variance comes from the\n            # previous population.\n            if self.algorithm_variant == \"C\":\n                # Calculate weighted covariance of particles.\n                population_cov = torch.tensor(\n                    np.atleast_2d(np.cov(particles, rowvar=False, aweights=weights)),\n                    dtype=torch.float32,\n                )\n                # Make sure variance is nonsingular.\n                try:\n                    torch.cholesky(kernel_variance_scale * population_cov)\n                except RuntimeError:\n                    self.logger.warning(\n                        \"\"\"\"Singular particle covariance, using unit covariance.\"\"\"\n                    )\n                    population_cov = torch.eye(particles.shape[1])\n                return kernel_variance_scale * population_cov\n            # While for Toni et al. and Sisson et al. it comes from the parameter\n            # ranges.\n            elif self.algorithm_variant in (\"A\", \"B\"):\n                particle_ranges = self.get_particle_ranges(\n                    particles, weights, samples_per_dim=samples_per_dim\n                )\n                return kernel_variance_scale * torch.diag(particle_ranges)\n            else:\n                raise ValueError(f\"Variant, '{self.algorithm_variant}' not supported.\")\n        elif self.kernel == \"uniform\":\n            # Variance spans the range of parameters for every dimension.\n            return kernel_variance_scale * self.get_particle_ranges(\n                particles, weights, samples_per_dim=samples_per_dim\n            )\n        else:\n            raise ValueError(f\"Kernel, '{self.kernel}' not supported.\")\n\n    def get_new_kernel(self, thetas: Tensor) -&gt; Distribution:\n        \"\"\"Return new kernel distribution for a given set of paramters.\"\"\"\n\n        if self.kernel == \"gaussian\":\n            assert self.kernel_variance.ndim == 2\n            return MultivariateNormal(\n                loc=thetas, covariance_matrix=self.kernel_variance\n            )\n\n        elif self.kernel == \"uniform\":\n            low = thetas - self.kernel_variance\n            high = thetas + self.kernel_variance\n            # Move batch shape to event shape to get Uniform that is multivariate in\n            # parameter dimension.\n            return Uniform(low=low, high=high).to_event(1)\n        else:\n            raise ValueError(f\"Kernel, '{self.kernel}' not supported.\")\n\n    def resample_if_ess_too_small(\n        self,\n        particles: Tensor,\n        log_weights: Tensor,\n        ess_min: float,\n        pop_idx: int,\n    ) -&gt; Tuple[Tensor, Tensor]:\n        \"\"\"Return resampled particles and uniform weights if effectice sampling size is\n        too small.\n        \"\"\"\n\n        num_particles = particles.shape[0]\n        ess = (1 / torch.sum(torch.exp(2.0 * log_weights), dim=0)) / num_particles\n        # Resampling of weights for low ESS only for Sisson et al. 2007.\n        if ess &lt; ess_min:\n            self.logger.info(f\"ESS={ess:.2f} too low, resampling pop {pop_idx}...\")\n            # First resample, then set to uniform weights as in Sisson et al. 2007.\n            particles = self.sample_from_population_with_weights(\n                particles, torch.exp(log_weights), num_samples=num_particles\n            )\n            log_weights = torch.log(1 / num_particles * ones(num_particles))\n\n        return particles, log_weights\n\n    def run_lra_update_weights(\n        self,\n        particles: Tensor,\n        xs: Tensor,\n        observation: Tensor,\n        log_weights: Tensor,\n        lra_with_weights: bool,\n    ) -&gt; Tuple[Tensor, Tensor]:\n        \"\"\"Return particles and weights adjusted with LRA.\n\n        Runs (weighted) linear regression from xs onto particles to adjust the\n        particles.\n\n        Updates the SMC weights according to the new particles.\n        \"\"\"\n\n        adjusted_particels = self.run_lra(\n            theta=particles,\n            x=xs,\n            observation=observation,\n            sample_weight=log_weights.exp() if lra_with_weights else None,\n        )\n\n        # Update SMC weights with LRA adjusted weights\n        adjusted_log_weights = self._calculate_new_log_weights(\n            new_particles=adjusted_particels,\n            old_particles=particles,\n            old_log_weights=log_weights,\n        )\n\n        return adjusted_particels, adjusted_log_weights\n\n    def run_sass_set_xo(\n        self,\n        num_particles: int,\n        num_pilot_simulations: int,\n        x_o,\n        lra: bool = False,\n        sass_expansion_degree: int = 1,\n    ) -&gt; Callable:\n        \"\"\"Return transform for semi-automatic summary statistics.\n\n        Runs an single round of rejection abc with fixed budget and accepts\n        num_particles simulations to run the regression for sass.\n\n        Sets self.x_o once the x_shape can be derived from simulations.\n        \"\"\"\n        (\n            pilot_particles,\n            _,\n            _,\n            pilot_xs,\n        ) = self._set_xo_and_sample_initial_population(\n            x_o, num_particles, num_pilot_simulations\n        )\n        # Adjust with LRA.\n        if lra:\n            pilot_particles = self.run_lra(pilot_particles, pilot_xs, self.x_o)\n        sass_transform = self.get_sass_transform(\n            pilot_particles,\n            pilot_xs,\n            expansion_degree=sass_expansion_degree,\n            sample_weight=None,\n        )\n        return sass_transform\n\n    def get_particle_ranges(\n        self, particles: Tensor, weights: Tensor, samples_per_dim: int = 100\n    ) -&gt; Tensor:\n        \"\"\"Return range of particles in each parameter dimension.\"\"\"\n\n        # get weighted samples\n        samples = self.sample_from_population_with_weights(\n            particles,\n            weights,\n            num_samples=samples_per_dim * particles.shape[1],\n        )\n\n        # Variance spans the range of particles for every dimension.\n        particle_ranges = samples.max(0).values - samples.min(0).values\n        assert particle_ranges.ndim &lt; 2\n        return particle_ranges\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_a.SNPE_A.__init__","title":"<code>__init__(prior=None, density_estimator='mdn_snpe_a', num_components=10, device='cpu', logging_level='WARNING', summary_writer=None, show_progress_bars=True)</code>","text":"<p>SNPE-A [1].</p> <p>[1] Fast epsilon-free Inference of Simulation Models with Bayesian Conditional     Density Estimation, Papamakarios et al., NeurIPS 2016,     https://arxiv.org/abs/1605.06376.</p> <p>This class implements SNPE-A. SNPE-A trains across multiple rounds with a maximum-likelihood-loss. This will make training converge to the proposal posterior instead of the true posterior. To correct for this, SNPE-A applies a post-hoc correction after training. This correction has to be performed analytically. Thus, SNPE-A is limited to Gaussian distributions for all but the last round. In the last round, SNPE-A can use a Mixture of Gaussians.</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. Any object with <code>.log_prob()</code>and <code>.sample()</code> (for example, a PyTorch distribution) can be used.</p> <code>None</code> <code>density_estimator</code> <code>Union[str, Callable]</code> <p>If it is a string (only \u201cmdn_snpe_a\u201d is valid), use a pre-configured mixture of densities network. Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the density estimator. The density estimator needs to provide the methods <code>.log_prob</code> and <code>.sample()</code>. Note that until the last round only a single (multivariate) Gaussian component is used for training (see Algorithm 1 in [1]). In the last round, this component is replicated <code>num_components</code> times, its parameters are perturbed with a very small noise, and then the last training round is done with the expanded Gaussian mixture as estimator for the proposal posterior.</p> <code>'mdn_snpe_a'</code> <code>num_components</code> <code>int</code> <p>Number of components of the mixture of Gaussians in the last round. This overrides the <code>num_components</code> value passed to <code>posterior_nn()</code>.</p> <code>10</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'WARNING'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during training.</p> <code>True</code> Source code in <code>sbi/inference/snpe/snpe_a.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    density_estimator: Union[str, Callable] = \"mdn_snpe_a\",\n    num_components: int = 10,\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"WARNING\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"SNPE-A [1].\n\n    [1] _Fast epsilon-free Inference of Simulation Models with Bayesian Conditional\n        Density Estimation_, Papamakarios et al., NeurIPS 2016,\n        https://arxiv.org/abs/1605.06376.\n\n    This class implements SNPE-A. SNPE-A trains across multiple rounds with a\n    maximum-likelihood-loss. This will make training converge to the proposal\n    posterior instead of the true posterior. To correct for this, SNPE-A applies a\n    post-hoc correction after training. This correction has to be performed\n    analytically. Thus, SNPE-A is limited to Gaussian distributions for all but the\n    last round. In the last round, SNPE-A can use a Mixture of Gaussians.\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. Any\n            object with `.log_prob()`and `.sample()` (for example, a PyTorch\n            distribution) can be used.\n        density_estimator: If it is a string (only \"mdn_snpe_a\" is valid), use a\n            pre-configured mixture of densities network. Alternatively, a function\n            that builds a custom neural network can be provided. The function will\n            be called with the first batch of simulations (theta, x), which can\n            thus be used for shape inference and potentially for z-scoring. It\n            needs to return a PyTorch `nn.Module` implementing the density\n            estimator. The density estimator needs to provide the methods\n            `.log_prob` and `.sample()`. Note that until the last round only a\n            single (multivariate) Gaussian component is used for training (see\n            Algorithm 1 in [1]). In the last round, this component is replicated\n            `num_components` times, its parameters are perturbed with a very small\n            noise, and then the last training round is done with the expanded\n            Gaussian mixture as estimator for the proposal posterior.\n        num_components: Number of components of the mixture of Gaussians in the\n            last round. This overrides the `num_components` value passed to\n            `posterior_nn()`.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during training.\n    \"\"\"\n\n    # Catch invalid inputs.\n    if not ((density_estimator == \"mdn_snpe_a\") or callable(density_estimator)):\n        raise TypeError(\n            \"The `density_estimator` passed to SNPE_A needs to be a \"\n            \"callable or the string 'mdn_snpe_a'!\"\n        )\n\n    # `num_components` will be used to replicate the Gaussian in the last round.\n    self._num_components = num_components\n    self._ran_final_round = False\n\n    # WARNING: sneaky trick ahead. We proxy the parent's `train` here,\n    # requiring the signature to have `num_atoms`, save it for use below, and\n    # continue. It's sneaky because we are using the object (self) as a namespace\n    # to pass arguments between functions, and that's implicit state management.\n    kwargs = utils.del_entries(\n        locals(),\n        entries=(\"self\", \"__class__\", \"num_components\"),\n    )\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_a.SNPE_A.build_posterior","title":"<code>build_posterior(density_estimator=None, prior=None)</code>","text":"<p>Build posterior from the neural density estimator.</p> <p>This method first corrects the estimated density with <code>correct_for_proposal</code> and then returns a <code>DirectPosterior</code>.</p> <p>Parameters:</p> Name Type Description Default <code>density_estimator</code> <code>Optional[TorchModule]</code> <p>The density estimator that the posterior is based on. If <code>None</code>, use the latest neural density estimator that was trained.</p> <code>None</code> <code>prior</code> <code>Optional[Distribution]</code> <p>Prior distribution.</p> <code>None</code> <p>Returns:</p> Type Description <code>DirectPosterior</code> <p>Posterior \\(p(\\theta|x)\\)  with <code>.sample()</code> and <code>.log_prob()</code> methods.</p> Source code in <code>sbi/inference/snpe/snpe_a.py</code> <pre><code>def build_posterior(\n    self,\n    density_estimator: Optional[TorchModule] = None,\n    prior: Optional[Distribution] = None,\n) -&gt; \"DirectPosterior\":\n    r\"\"\"Build posterior from the neural density estimator.\n\n    This method first corrects the estimated density with `correct_for_proposal`\n    and then returns a `DirectPosterior`.\n\n    Args:\n        density_estimator: The density estimator that the posterior is based on.\n            If `None`, use the latest neural density estimator that was trained.\n        prior: Prior distribution.\n\n    Returns:\n        Posterior $p(\\theta|x)$  with `.sample()` and `.log_prob()` methods.\n    \"\"\"\n    if prior is None:\n        assert (\n            self._prior is not None\n        ), \"\"\"You did not pass a prior. You have to pass the prior either at\n            initialization `inference = SNPE_A(prior)` or to `.build_posterior\n            (prior=prior)`.\"\"\"\n        prior = self._prior\n\n    wrapped_density_estimator = self.correct_for_proposal(\n        density_estimator=density_estimator\n    )\n    self._posterior = DirectPosterior(\n        posterior_estimator=wrapped_density_estimator,  # type: ignore\n        prior=prior,\n    )\n    return deepcopy(self._posterior)\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_a.SNPE_A.correct_for_proposal","title":"<code>correct_for_proposal(density_estimator=None)</code>","text":"<p>Build mixture of Gaussians that approximates the posterior.</p> <p>Returns a <code>SNPE_A_MDN</code> object, which applies the posthoc-correction required in SNPE-A.</p> <p>Parameters:</p> Name Type Description Default <code>density_estimator</code> <code>Optional[TorchModule]</code> <p>The density estimator that the posterior is based on. If <code>None</code>, use the latest neural density estimator that was trained.</p> <code>None</code> <p>Returns:</p> Type Description <code>SNPE_A_MDN</code> <p>Posterior \\(p(\\theta|x)\\)  with <code>.sample()</code> and <code>.log_prob()</code> methods.</p> Source code in <code>sbi/inference/snpe/snpe_a.py</code> <pre><code>def correct_for_proposal(\n    self,\n    density_estimator: Optional[TorchModule] = None,\n) -&gt; \"SNPE_A_MDN\":\n    r\"\"\"Build mixture of Gaussians that approximates the posterior.\n\n    Returns a `SNPE_A_MDN` object, which applies the posthoc-correction required in\n    SNPE-A.\n\n    Args:\n        density_estimator: The density estimator that the posterior is based on.\n            If `None`, use the latest neural density estimator that was trained.\n\n    Returns:\n        Posterior $p(\\theta|x)$  with `.sample()` and `.log_prob()` methods.\n    \"\"\"\n    if density_estimator is None:\n        density_estimator = deepcopy(\n            self._neural_net\n        )  # PosteriorEstimator.train() also returns a deepcopy, mimic this here\n        # If internal net is used device is defined.\n        device = self._device\n    else:\n        # Otherwise, infer it from the device of the net parameters.\n        device = str(next(density_estimator.parameters()).device)\n\n    # Set proposal of the density estimator.\n    # This also evokes the z-scoring correction if necessary.\n    if (\n        self._proposal_roundwise[-1] is self._prior\n        or self._proposal_roundwise[-1] is None\n    ):\n        proposal = self._prior\n        assert isinstance(\n            proposal, (MultivariateNormal, utils.BoxUniform)\n        ), \"\"\"Prior must be `torch.distributions.MultivariateNormal` or `sbi.utils.\n            BoxUniform`\"\"\"\n    else:\n        assert isinstance(\n            self._proposal_roundwise[-1], DirectPosterior\n        ), \"\"\"The proposal you passed to `append_simulations` is neither the prior\n            nor a `DirectPosterior`. SNPE-A currently only supports these scenarios.\n            \"\"\"\n        proposal = self._proposal_roundwise[-1]\n\n    # Create the SNPE_A_MDN\n    wrapped_density_estimator = SNPE_A_MDN(\n        flow=density_estimator,  # type: ignore\n        proposal=proposal,\n        prior=self._prior,\n        device=device,\n    )\n    return wrapped_density_estimator\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_a.SNPE_A.train","title":"<code>train(final_round=False, training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, calibration_kernel=None, resume_training=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None, component_perturbation=0.005)</code>","text":"<p>Return density estimator that approximates the proposal posterior.</p> <p>[1] Fast epsilon-free Inference of Simulation Models with Bayesian Conditional     Density Estimation, Papamakarios et al., NeurIPS 2016,     https://arxiv.org/abs/1605.06376.</p> <p>Training is performed with maximum likelihood on samples from the latest round, which leads the algorithm to converge to the proposal posterior.</p> <p>Parameters:</p> Name Type Description Default <code>final_round</code> <code>bool</code> <p>Whether we are in the last round of training or not. For all but the last round, Algorithm 1 from [1] is executed. In last the round, Algorithm 2 from [1] is executed once.</p> <code>False</code> <code>training_batch_size</code> <code>int</code> <p>Training batch size.</p> <code>50</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for Adam optimizer.</p> <code>0.0005</code> <code>validation_fraction</code> <code>float</code> <p>The fraction of data to use for validation.</p> <code>0.1</code> <code>stop_after_epochs</code> <code>int</code> <p>The number of epochs to wait for improvement on the validation set before terminating training.</p> <code>20</code> <code>max_num_epochs</code> <code>int</code> <p>Maximum number of epochs to run. If reached, we stop training even when the validation loss is still decreasing. Otherwise, we train until validation loss increases (see also <code>stop_after_epochs</code>).</p> <code>2 ** 31 - 1</code> <code>clip_max_norm</code> <code>Optional[float]</code> <p>Value at which to clip the total gradient norm in order to prevent exploding gradients. Use None for no clipping.</p> <code>5.0</code> <code>calibration_kernel</code> <code>Optional[Callable]</code> <p>A function to calibrate the loss with respect to the simulations <code>x</code>. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.</p> <code>None</code> <code>resume_training</code> <code>bool</code> <p>Can be used in case training time is limited, e.g. on a cluster. If <code>True</code>, the split between train and validation set, the optimizer, the number of epochs, and the best validation log-prob will be restored from the last time <code>.train()</code> was called.</p> <code>False</code> <code>force_first_round_loss</code> <p>If <code>True</code>, train with maximum likelihood, i.e., potentially ignoring the correction for using a proposal distribution different from the prior.</p> required <code>retrain_from_scratch</code> <code>bool</code> <p>Whether to retrain the conditional density estimator for the posterior from scratch each round. Not supported for SNPE-A.</p> <code>False</code> <code>show_train_summary</code> <code>bool</code> <p>Whether to print the number of epochs and validation loss and leakage after the training.</p> <code>False</code> <code>dataloader_kwargs</code> <code>Optional[Dict]</code> <p>Additional or updated kwargs to be passed to the training and validation dataloaders (like, e.g., a collate_fn)</p> <code>None</code> <code>component_perturbation</code> <code>float</code> <p>The standard deviation applied to all weights and biases when, in the last round, the Mixture of Gaussians is build from a single Gaussian. This value can be problem-specific and also depends on the number of mixture components.</p> <code>0.005</code> <p>Returns:</p> Type Description <code>Module</code> <p>Density estimator that approximates the distribution \\(p(\\theta|x)\\).</p> Source code in <code>sbi/inference/snpe/snpe_a.py</code> <pre><code>def train(\n    self,\n    final_round: bool = False,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    calibration_kernel: Optional[Callable] = None,\n    resume_training: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n    component_perturbation: float = 5e-3,\n) -&gt; nn.Module:\n    r\"\"\"Return density estimator that approximates the proposal posterior.\n\n    [1] _Fast epsilon-free Inference of Simulation Models with Bayesian Conditional\n        Density Estimation_, Papamakarios et al., NeurIPS 2016,\n        https://arxiv.org/abs/1605.06376.\n\n    Training is performed with maximum likelihood on samples from the latest round,\n    which leads the algorithm to converge to the proposal posterior.\n\n    Args:\n        final_round: Whether we are in the last round of training or not. For all\n            but the last round, Algorithm 1 from [1] is executed. In last the\n            round, Algorithm 2 from [1] is executed once.\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        calibration_kernel: A function to calibrate the loss with respect to the\n            simulations `x`. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        force_first_round_loss: If `True`, train with maximum likelihood,\n            i.e., potentially ignoring the correction for using a proposal\n            distribution different from the prior.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round. Not supported for\n            SNPE-A.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n        component_perturbation: The standard deviation applied to all weights and\n            biases when, in the last round, the Mixture of Gaussians is build from\n            a single Gaussian. This value can be problem-specific and also depends\n            on the number of mixture components.\n\n    Returns:\n        Density estimator that approximates the distribution $p(\\theta|x)$.\n    \"\"\"\n\n    assert not retrain_from_scratch, \"\"\"Retraining from scratch is not supported in\n        SNPE-A yet. The reason for this is that, if we reininitialized the density\n        estimator, the z-scoring would change, which would break the posthoc\n        correction. This is a pure implementation issue.\"\"\"\n\n    kwargs = utils.del_entries(\n        locals(),\n        entries=(\n            \"self\",\n            \"__class__\",\n            \"final_round\",\n            \"component_perturbation\",\n        ),\n    )\n\n    # SNPE-A always discards the prior samples.\n    kwargs[\"discard_prior_samples\"] = True\n    kwargs[\"force_first_round_loss\"] = True\n\n    self._round = max(self._data_round_index)\n\n    if final_round:\n        # If there is (will be) only one round, train with Algorithm 2 from [1].\n        if self._round == 0:\n            self._build_neural_net = partial(\n                self._build_neural_net, num_components=self._num_components\n            )\n        # Run Algorithm 2 from [1].\n        elif not self._ran_final_round:\n            # Now switch to the specified number of components. This method will\n            # only be used if `retrain_from_scratch=True`. Otherwise,\n            # the MDN will be built from replicating the single-component net for\n            # `num_component` times (via `_expand_mog()`).\n            self._build_neural_net = partial(\n                self._build_neural_net, num_components=self._num_components\n            )\n\n            # Extend the MDN to the originally desired number of components.\n            self._expand_mog(eps=component_perturbation)\n        else:\n            warnings.warn(\n                \"You have already run SNPE-A with `final_round=True`. Running it\"\n                \"again with this setting will not allow computing the posthoc\"\n                \"correction applied in SNPE-A. Thus, you will get an error when \"\n                \"calling `.build_posterior()` after training.\",\n                UserWarning,\n            )\n    else:\n        # Run Algorithm 1 from [1].\n        # Wrap the function that builds the MDN such that we can make\n        # sure that there is only one component when running.\n        self._build_neural_net = partial(self._build_neural_net, num_components=1)\n\n    if final_round:\n        self._ran_final_round = True\n\n    return super().train(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_c.SNPE_C.__init__","title":"<code>__init__(prior=None, density_estimator='maf', device='cpu', logging_level='WARNING', summary_writer=None, show_progress_bars=True)</code>","text":"<p>SNPE-C / APT [1].</p> <p>[1] Automatic Posterior Transformation for Likelihood-free Inference,     Greenberg et al., ICML 2019, https://arxiv.org/abs/1905.07488.</p> <p>This class implements two loss variants of SNPE-C: the non-atomic and the atomic version. The atomic loss of SNPE-C can be used for any density estimator, i.e. also for normalizing flows. However, it suffers from leakage issues. On the other hand, the non-atomic loss can only be used only if the proposal distribution is a mixture of Gaussians, the density estimator is a mixture of Gaussians, and the prior is either Gaussian or Uniform. It does not suffer from leakage issues. At the beginning of each round, we print whether the non-atomic or the atomic version is used.</p> <p>In this codebase, we will automatically switch to the non-atomic loss if the following criteria are fulfilled: - proposal is a <code>DirectPosterior</code> with density_estimator <code>mdn</code>, as built     with <code>utils.sbi.posterior_nn()</code>. - the density estimator is a <code>mdn</code>, as built with     <code>utils.sbi.posterior_nn()</code>. - <code>isinstance(prior, MultivariateNormal)</code> (from <code>torch.distributions</code>) or     <code>isinstance(prior, sbi.utils.BoxUniform)</code></p> <p>Note that custom implementations of any of these densities (or estimators) will not trigger the non-atomic loss, and the algorithm will fall back onto using the atomic loss.</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them.</p> <code>None</code> <code>density_estimator</code> <code>Union[str, Callable]</code> <p>If it is a string, use a pre-configured network of the provided type (one of nsf, maf, mdn, made). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the density estimator. The density estimator needs to provide the methods <code>.log_prob</code> and <code>.sample()</code>.</p> <code>'maf'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'WARNING'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during training.</p> <code>True</code> Source code in <code>sbi/inference/snpe/snpe_c.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    density_estimator: Union[str, Callable] = \"maf\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"WARNING\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"SNPE-C / APT [1].\n\n    [1] _Automatic Posterior Transformation for Likelihood-free Inference_,\n        Greenberg et al., ICML 2019, https://arxiv.org/abs/1905.07488.\n\n    This class implements two loss variants of SNPE-C: the non-atomic and the atomic\n    version. The atomic loss of SNPE-C can be used for any density estimator,\n    i.e. also for normalizing flows. However, it suffers from leakage issues. On\n    the other hand, the non-atomic loss can only be used only if the proposal\n    distribution is a mixture of Gaussians, the density estimator is a mixture of\n    Gaussians, and the prior is either Gaussian or Uniform. It does not suffer from\n    leakage issues. At the beginning of each round, we print whether the non-atomic\n    or the atomic version is used.\n\n    In this codebase, we will automatically switch to the non-atomic loss if the\n    following criteria are fulfilled:&lt;br/&gt;\n    - proposal is a `DirectPosterior` with density_estimator `mdn`, as built\n        with `utils.sbi.posterior_nn()`.&lt;br/&gt;\n    - the density estimator is a `mdn`, as built with\n        `utils.sbi.posterior_nn()`.&lt;br/&gt;\n    - `isinstance(prior, MultivariateNormal)` (from `torch.distributions`) or\n        `isinstance(prior, sbi.utils.BoxUniform)`\n\n    Note that custom implementations of any of these densities (or estimators) will\n    not trigger the non-atomic loss, and the algorithm will fall back onto using\n    the atomic loss.\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them.\n        density_estimator: If it is a string, use a pre-configured network of the\n            provided type (one of nsf, maf, mdn, made). Alternatively, a function\n            that builds a custom neural network can be provided. The function will\n            be called with the first batch of simulations (theta, x), which can\n            thus be used for shape inference and potentially for z-scoring. It\n            needs to return a PyTorch `nn.Module` implementing the density\n            estimator. The density estimator needs to provide the methods\n            `.log_prob` and `.sample()`.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during training.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snpe.snpe_c.SNPE_C.train","title":"<code>train(num_atoms=10, training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, calibration_kernel=None, resume_training=False, force_first_round_loss=False, discard_prior_samples=False, use_combined_loss=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None)</code>","text":"<p>Return density estimator that approximates the distribution \\(p(\\theta|x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>num_atoms</code> <code>int</code> <p>Number of atoms to use for classification.</p> <code>10</code> <code>training_batch_size</code> <code>int</code> <p>Training batch size.</p> <code>50</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for Adam optimizer.</p> <code>0.0005</code> <code>validation_fraction</code> <code>float</code> <p>The fraction of data to use for validation.</p> <code>0.1</code> <code>stop_after_epochs</code> <code>int</code> <p>The number of epochs to wait for improvement on the validation set before terminating training.</p> <code>20</code> <code>max_num_epochs</code> <code>int</code> <p>Maximum number of epochs to run. If reached, we stop training even when the validation loss is still decreasing. Otherwise, we train until validation loss increases (see also <code>stop_after_epochs</code>).</p> <code>2 ** 31 - 1</code> <code>clip_max_norm</code> <code>Optional[float]</code> <p>Value at which to clip the total gradient norm in order to prevent exploding gradients. Use None for no clipping.</p> <code>5.0</code> <code>calibration_kernel</code> <code>Optional[Callable]</code> <p>A function to calibrate the loss with respect to the simulations <code>x</code>. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.</p> <code>None</code> <code>resume_training</code> <code>bool</code> <p>Can be used in case training time is limited, e.g. on a cluster. If <code>True</code>, the split between train and validation set, the optimizer, the number of epochs, and the best validation log-prob will be restored from the last time <code>.train()</code> was called.</p> <code>False</code> <code>force_first_round_loss</code> <code>bool</code> <p>If <code>True</code>, train with maximum likelihood, i.e., potentially ignoring the correction for using a proposal distribution different from the prior.</p> <code>False</code> <code>discard_prior_samples</code> <code>bool</code> <p>Whether to discard samples simulated in round 1, i.e. from the prior. Training may be sped up by ignoring such less targeted samples.</p> <code>False</code> <code>use_combined_loss</code> <code>bool</code> <p>Whether to train the neural net also on prior samples using maximum likelihood in addition to training it on all samples using atomic loss. The extra MLE loss helps prevent density leaking with bounded priors.</p> <code>False</code> <code>retrain_from_scratch</code> <code>bool</code> <p>Whether to retrain the conditional density estimator for the posterior from scratch each round.</p> <code>False</code> <code>show_train_summary</code> <code>bool</code> <p>Whether to print the number of epochs and validation loss and leakage after the training.</p> <code>False</code> <code>dataloader_kwargs</code> <code>Optional[Dict]</code> <p>Additional or updated kwargs to be passed to the training and validation dataloaders (like, e.g., a collate_fn)</p> <code>None</code> <p>Returns:</p> Type Description <code>Module</code> <p>Density estimator that approximates the distribution \\(p(\\theta|x)\\).</p> Source code in <code>sbi/inference/snpe/snpe_c.py</code> <pre><code>def train(\n    self,\n    num_atoms: int = 10,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    calibration_kernel: Optional[Callable] = None,\n    resume_training: bool = False,\n    force_first_round_loss: bool = False,\n    discard_prior_samples: bool = False,\n    use_combined_loss: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n) -&gt; nn.Module:\n    r\"\"\"Return density estimator that approximates the distribution $p(\\theta|x)$.\n\n    Args:\n        num_atoms: Number of atoms to use for classification.\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        calibration_kernel: A function to calibrate the loss with respect to the\n            simulations `x`. See Lueckmann, Gon\u00e7alves et al., NeurIPS 2017.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        force_first_round_loss: If `True`, train with maximum likelihood,\n            i.e., potentially ignoring the correction for using a proposal\n            distribution different from the prior.\n        discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n            from the prior. Training may be sped up by ignoring such less targeted\n            samples.\n        use_combined_loss: Whether to train the neural net also on prior samples\n            using maximum likelihood in addition to training it on all samples using\n            atomic loss. The extra MLE loss helps prevent density leaking with\n            bounded priors.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n\n    Returns:\n        Density estimator that approximates the distribution $p(\\theta|x)$.\n    \"\"\"\n\n    # WARNING: sneaky trick ahead. We proxy the parent's `train` here,\n    # requiring the signature to have `num_atoms`, save it for use below, and\n    # continue. It's sneaky because we are using the object (self) as a namespace\n    # to pass arguments between functions, and that's implicit state management.\n    self._num_atoms = num_atoms\n    self._use_combined_loss = use_combined_loss\n    kwargs = del_entries(\n        locals(),\n        entries=(\"self\", \"__class__\", \"num_atoms\", \"use_combined_loss\"),\n    )\n\n    self._round = max(self._data_round_index)\n\n    if self._round &gt; 0:\n        # Set the proposal to the last proposal that was passed by the user. For\n        # atomic SNPE, it does not matter what the proposal is. For non-atomic\n        # SNPE, we only use the latest data that was passed, i.e. the one from the\n        # last proposal.\n        proposal = self._proposal_roundwise[-1]\n        self.use_non_atomic_loss = (\n            isinstance(proposal, DirectPosterior)\n            and isinstance(proposal.posterior_estimator._distribution, mdn)\n            and isinstance(self._neural_net._distribution, mdn)\n            and check_dist_class(\n                self._prior, class_to_check=(Uniform, MultivariateNormal)\n            )[0]\n        )\n\n        algorithm = \"non-atomic\" if self.use_non_atomic_loss else \"atomic\"\n        print(f\"Using SNPE-C with {algorithm} loss\")\n\n        if self.use_non_atomic_loss:\n            # Take care of z-scoring, pre-compute and store prior terms.\n            self._set_state_for_mog_proposal()\n\n    return super().train(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snle.snle_a.SNLE_A.__init__","title":"<code>__init__(prior=None, density_estimator='maf', device='cpu', logging_level='WARNING', summary_writer=None, show_progress_bars=True)</code>","text":"<p>Sequential Neural Likelihood [1].</p> <p>[1] Sequential Neural Likelihood: Fast Likelihood-free Inference with Autoregressive Flows_, Papamakarios et al., AISTATS 2019, https://arxiv.org/abs/1805.07226</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. If <code>None</code>, the prior must be passed to <code>.build_posterior()</code>.</p> <code>None</code> <code>density_estimator</code> <code>Union[str, Callable]</code> <p>If it is a string, use a pre-configured network of the provided type (one of nsf, maf, mdn, made). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the density estimator. The density estimator needs to provide the methods <code>.log_prob</code> and <code>.sample()</code>.</p> <code>'maf'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'WARNING'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/snle/snle_a.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    density_estimator: Union[str, Callable] = \"maf\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"WARNING\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"Sequential Neural Likelihood [1].\n\n    [1] Sequential Neural Likelihood: Fast Likelihood-free Inference with\n    Autoregressive Flows_, Papamakarios et al., AISTATS 2019,\n    https://arxiv.org/abs/1805.07226\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. If `None`, the\n            prior must be passed to `.build_posterior()`.\n        density_estimator: If it is a string, use a pre-configured network of the\n            provided type (one of nsf, maf, mdn, made). Alternatively, a function\n            that builds a custom neural network can be provided. The function will\n            be called with the first batch of simulations (theta, x), which can\n            thus be used for shape inference and potentially for z-scoring. It\n            needs to return a PyTorch `nn.Module` implementing the density\n            estimator. The density estimator needs to provide the methods\n            `.log_prob` and `.sample()`.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_a.SNRE_A.__init__","title":"<code>__init__(prior=None, classifier='resnet', device='cpu', logging_level='warning', summary_writer=None, show_progress_bars=True)</code>","text":"<p>AALR[1], here known as SNRE_A.</p> <p>[1] Likelihood-free MCMC with Amortized Approximate Likelihood Ratios, Hermans     et al., ICML 2020, https://arxiv.org/abs/1903.04057</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. If <code>None</code>, the prior must be passed to <code>.build_posterior()</code>.</p> <code>None</code> <code>classifier</code> <code>Union[str, Callable]</code> <p>Classifier trained to approximate likelihood ratios. If it is a string, use a pre-configured network of the provided type (one of linear, mlp, resnet). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the classifier.</p> <code>'resnet'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'warning'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/snre/snre_a.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    classifier: Union[str, Callable] = \"resnet\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"warning\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"AALR[1], here known as SNRE_A.\n\n    [1] _Likelihood-free MCMC with Amortized Approximate Likelihood Ratios_, Hermans\n        et al., ICML 2020, https://arxiv.org/abs/1903.04057\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. If `None`, the\n            prior must be passed to `.build_posterior()`.\n        classifier: Classifier trained to approximate likelihood ratios. If it is\n            a string, use a pre-configured network of the provided type (one of\n            linear, mlp, resnet). Alternatively, a function that builds a custom\n            neural network can be provided. The function will be called with the\n            first batch of simulations (theta, x), which can thus be used for shape\n            inference and potentially for z-scoring. It needs to return a PyTorch\n            `nn.Module` implementing the classifier.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_a.SNRE_A.train","title":"<code>train(training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, resume_training=False, discard_prior_samples=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None, loss_kwargs={})</code>","text":"<p>Return classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>training_batch_size</code> <code>int</code> <p>Training batch size.</p> <code>50</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for Adam optimizer.</p> <code>0.0005</code> <code>validation_fraction</code> <code>float</code> <p>The fraction of data to use for validation.</p> <code>0.1</code> <code>stop_after_epochs</code> <code>int</code> <p>The number of epochs to wait for improvement on the validation set before terminating training.</p> <code>20</code> <code>max_num_epochs</code> <code>int</code> <p>Maximum number of epochs to run. If reached, we stop training even when the validation loss is still decreasing. Otherwise, we train until validation loss increases (see also <code>stop_after_epochs</code>).</p> <code>2 ** 31 - 1</code> <code>clip_max_norm</code> <code>Optional[float]</code> <p>Value at which to clip the total gradient norm in order to prevent exploding gradients. Use None for no clipping.</p> <code>5.0</code> <code>resume_training</code> <code>bool</code> <p>Can be used in case training time is limited, e.g. on a cluster. If <code>True</code>, the split between train and validation set, the optimizer, the number of epochs, and the best validation log-prob will be restored from the last time <code>.train()</code> was called.</p> <code>False</code> <code>discard_prior_samples</code> <code>bool</code> <p>Whether to discard samples simulated in round 1, i.e. from the prior. Training may be sped up by ignoring such less targeted samples.</p> <code>False</code> <code>retrain_from_scratch</code> <code>bool</code> <p>Whether to retrain the conditional density estimator for the posterior from scratch each round.</p> <code>False</code> <code>show_train_summary</code> <code>bool</code> <p>Whether to print the number of epochs and validation loss and leakage after the training.</p> <code>False</code> <code>dataloader_kwargs</code> <code>Optional[Dict]</code> <p>Additional or updated kwargs to be passed to the training and validation dataloaders (like, e.g., a collate_fn)</p> <code>None</code> <code>loss_kwargs</code> <code>Dict[str, Any]</code> <p>Additional or updated kwargs to be passed to the self._loss fn.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Module</code> <p>Classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> Source code in <code>sbi/inference/snre/snre_a.py</code> <pre><code>def train(\n    self,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    resume_training: bool = False,\n    discard_prior_samples: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n    loss_kwargs: Dict[str, Any] = {},\n) -&gt; nn.Module:\n    r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n    Args:\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n            from the prior. Training may be sped up by ignoring such less targeted\n            samples.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n        loss_kwargs: Additional or updated kwargs to be passed to the self._loss fn.\n\n    Returns:\n        Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n    \"\"\"\n\n    # AALR is defined for `num_atoms=2`.\n    # Proxy to `super().__call__` to ensure right parameter.\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    return super().train(**kwargs, num_atoms=2)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_b.SNRE_B.__init__","title":"<code>__init__(prior=None, classifier='resnet', device='cpu', logging_level='warning', summary_writer=None, show_progress_bars=True)</code>","text":"<p>SRE[1], here known as SNRE_B.</p> <p>[1] On Contrastive Learning for Likelihood-free Inference, Durkan et al.,     ICML 2020, https://arxiv.org/pdf/2002.03712</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. If <code>None</code>, the prior must be passed to <code>.build_posterior()</code>.</p> <code>None</code> <code>classifier</code> <code>Union[str, Callable]</code> <p>Classifier trained to approximate likelihood ratios. If it is a string, use a pre-configured network of the provided type (one of linear, mlp, resnet). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the classifier.</p> <code>'resnet'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'warning'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/snre/snre_b.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    classifier: Union[str, Callable] = \"resnet\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"warning\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"SRE[1], here known as SNRE_B.\n\n    [1] _On Contrastive Learning for Likelihood-free Inference_, Durkan et al.,\n        ICML 2020, https://arxiv.org/pdf/2002.03712\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. If `None`, the\n            prior must be passed to `.build_posterior()`.\n        classifier: Classifier trained to approximate likelihood ratios. If it is\n            a string, use a pre-configured network of the provided type (one of\n            linear, mlp, resnet). Alternatively, a function that builds a custom\n            neural network can be provided. The function will be called with the\n            first batch of simulations (theta, x), which can thus be used for shape\n            inference and potentially for z-scoring. It needs to return a PyTorch\n            `nn.Module` implementing the classifier.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_b.SNRE_B.train","title":"<code>train(num_atoms=10, training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, resume_training=False, discard_prior_samples=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None)</code>","text":"<p>Return classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>num_atoms</code> <code>int</code> <p>Number of atoms to use for classification.</p> <code>10</code> <code>training_batch_size</code> <code>int</code> <p>Training batch size.</p> <code>50</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for Adam optimizer.</p> <code>0.0005</code> <code>validation_fraction</code> <code>float</code> <p>The fraction of data to use for validation.</p> <code>0.1</code> <code>stop_after_epochs</code> <code>int</code> <p>The number of epochs to wait for improvement on the validation set before terminating training.</p> <code>20</code> <code>max_num_epochs</code> <code>int</code> <p>Maximum number of epochs to run. If reached, we stop training even when the validation loss is still decreasing. Otherwise, we train until validation loss increases (see also <code>stop_after_epochs</code>).</p> <code>2 ** 31 - 1</code> <code>clip_max_norm</code> <code>Optional[float]</code> <p>Value at which to clip the total gradient norm in order to prevent exploding gradients. Use None for no clipping.</p> <code>5.0</code> <code>resume_training</code> <code>bool</code> <p>Can be used in case training time is limited, e.g. on a cluster. If <code>True</code>, the split between train and validation set, the optimizer, the number of epochs, and the best validation log-prob will be restored from the last time <code>.train()</code> was called.</p> <code>False</code> <code>discard_prior_samples</code> <code>bool</code> <p>Whether to discard samples simulated in round 1, i.e. from the prior. Training may be sped up by ignoring such less targeted samples.</p> <code>False</code> <code>retrain_from_scratch</code> <code>bool</code> <p>Whether to retrain the conditional density estimator for the posterior from scratch each round.</p> <code>False</code> <code>show_train_summary</code> <code>bool</code> <p>Whether to print the number of epochs and validation loss and leakage after the training.</p> <code>False</code> <code>dataloader_kwargs</code> <code>Optional[Dict]</code> <p>Additional or updated kwargs to be passed to the training and validation dataloaders (like, e.g., a collate_fn)</p> <code>None</code> <p>Returns:</p> Type Description <code>Module</code> <p>Classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> Source code in <code>sbi/inference/snre/snre_b.py</code> <pre><code>def train(\n    self,\n    num_atoms: int = 10,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    resume_training: bool = False,\n    discard_prior_samples: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n) -&gt; nn.Module:\n    r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n    Args:\n        num_atoms: Number of atoms to use for classification.\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n            from the prior. Training may be sped up by ignoring such less targeted\n            samples.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n\n    Returns:\n        Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n    \"\"\"\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    return super().train(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_c.SNRE_C.__init__","title":"<code>__init__(prior=None, classifier='resnet', device='cpu', logging_level='warning', summary_writer=None, show_progress_bars=True)</code>","text":"<p>NRE-C[1] is a generalization of the non-sequential (amortized) versions of SNRE_A and SNRE_B. We call the algorithm SNRE_C within <code>sbi</code>.</p> <p>NRE-C: (1) like SNRE_B, features a \u201cmulticlass\u201d loss function where several marginally     drawn parameter-data pairs are contrasted against a jointly drawn pair. (2) like AALR/NRE_A, i.e., the non-sequential version of SNRE_A, it encourages     the approximate ratio \\(p(\\theta,x)/p(\\theta)p(x)\\), accessed through     <code>.potential()</code> within <code>sbi</code>, to be exact at optimum. This addresses the     issue that SNRE_B estimates this ratio only up to an arbitrary function     (normalizing constant) of the data \\(x\\).</p> <p>Just like for all ratio estimation algorithms, the sequential version of SNRE_C will be estimated only up to a function (normalizing constant) of the data \\(x\\) in rounds after the first.</p> <p>[1] Contrastive Neural Ratio Estimation, Benajmin Kurt Miller, et. al.,     NeurIPS 2022, https://arxiv.org/abs/2210.06170</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. If <code>None</code>, the prior must be passed to <code>.build_posterior()</code>.</p> <code>None</code> <code>classifier</code> <code>Union[str, Callable]</code> <p>Classifier trained to approximate likelihood ratios. If it is a string, use a pre-configured network of the provided type (one of linear, mlp, resnet). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations (theta, x), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the classifier.</p> <code>'resnet'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'warning'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/snre/snre_c.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    classifier: Union[str, Callable] = \"resnet\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"warning\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"NRE-C[1] is a generalization of the non-sequential (amortized) versions of\n    SNRE_A and SNRE_B. We call the algorithm SNRE_C within `sbi`.\n\n    NRE-C:\n    (1) like SNRE_B, features a \"multiclass\" loss function where several marginally\n        drawn parameter-data pairs are contrasted against a jointly drawn pair.\n    (2) like AALR/NRE_A, i.e., the non-sequential version of SNRE_A, it encourages\n        the approximate ratio $p(\\theta,x)/p(\\theta)p(x)$, accessed through\n        `.potential()` within `sbi`, to be exact at optimum. This addresses the\n        issue that SNRE_B estimates this ratio only up to an arbitrary function\n        (normalizing constant) of the data $x$.\n\n    Just like for all ratio estimation algorithms, the sequential version of SNRE_C\n    will be estimated only up to a function (normalizing constant) of the data $x$\n    in rounds after the first.\n\n    [1] _Contrastive Neural Ratio Estimation_, Benajmin Kurt Miller, et. al.,\n        NeurIPS 2022, https://arxiv.org/abs/2210.06170\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. If `None`, the\n            prior must be passed to `.build_posterior()`.\n        classifier: Classifier trained to approximate likelihood ratios. If it is\n            a string, use a pre-configured network of the provided type (one of\n            linear, mlp, resnet). Alternatively, a function that builds a custom\n            neural network can be provided. The function will be called with the\n            first batch of simulations (theta, x), which can thus be used for shape\n            inference and potentially for z-scoring. It needs to return a PyTorch\n            `nn.Module` implementing the classifier.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.snre_c.SNRE_C.train","title":"<code>train(num_classes=5, gamma=1.0, training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, resume_training=False, discard_prior_samples=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None)</code>","text":"<p>Return classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>num_classes</code> <code>int</code> <p>Number of theta to classify against, corresponds to \\(K\\) in Contrastive Neural Ratio Estimation. Minimum value is 1. Similar to <code>num_atoms</code> for SNRE_B except SNRE_C has an additional independently drawn sample. The total number of alternative parameters <code>NRE-C</code> \u201csees\u201d is \\(2K-1\\) or <code>2 * num_classes - 1</code> divided between two loss terms.</p> <code>5</code> <code>gamma</code> <code>float</code> <p>Determines the relative weight of the sum of all \\(K\\) dependently drawn classes against the marginally drawn one. Specifically, \\(p(y=k) :=p_K\\), \\(p(y=0) := p_0\\), \\(p_0 = 1 - K p_K\\), and finally \\(\\gamma := K p_K / p_0\\).</p> <code>1.0</code> <code>training_batch_size</code> <code>int</code> <p>Training batch size.</p> <code>50</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for Adam optimizer.</p> <code>0.0005</code> <code>validation_fraction</code> <code>float</code> <p>The fraction of data to use for validation.</p> <code>0.1</code> <code>stop_after_epochs</code> <code>int</code> <p>The number of epochs to wait for improvement on the validation set before terminating training.</p> <code>20</code> <code>max_num_epochs</code> <code>int</code> <p>Maximum number of epochs to run. If reached, we stop training even when the validation loss is still decreasing. Otherwise, we train until validation loss increases (see also <code>stop_after_epochs</code>).</p> <code>2 ** 31 - 1</code> <code>clip_max_norm</code> <code>Optional[float]</code> <p>Value at which to clip the total gradient norm in order to prevent exploding gradients. Use None for no clipping.</p> <code>5.0</code> <code>exclude_invalid_x</code> <p>Whether to exclude simulation outputs <code>x=NaN</code> or <code>x=\u00b1\u221e</code> during training. Expect errors, silent or explicit, when <code>False</code>.</p> required <code>resume_training</code> <code>bool</code> <p>Can be used in case training time is limited, e.g. on a cluster. If <code>True</code>, the split between train and validation set, the optimizer, the number of epochs, and the best validation log-prob will be restored from the last time <code>.train()</code> was called.</p> <code>False</code> <code>discard_prior_samples</code> <code>bool</code> <p>Whether to discard samples simulated in round 1, i.e. from the prior. Training may be sped up by ignoring such less targeted samples.</p> <code>False</code> <code>retrain_from_scratch</code> <code>bool</code> <p>Whether to retrain the conditional density estimator for the posterior from scratch each round.</p> <code>False</code> <code>show_train_summary</code> <code>bool</code> <p>Whether to print the number of epochs and validation loss and leakage after the training.</p> <code>False</code> <code>dataloader_kwargs</code> <code>Optional[Dict]</code> <p>Additional or updated kwargs to be passed to the training and validation dataloaders (like, e.g., a collate_fn)</p> <code>None</code> <p>Returns:</p> Type Description <code>Module</code> <p>Classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> Source code in <code>sbi/inference/snre/snre_c.py</code> <pre><code>def train(\n    self,\n    num_classes: int = 5,\n    gamma: float = 1.0,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    resume_training: bool = False,\n    discard_prior_samples: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n) -&gt; nn.Module:\n    r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n\n    Args:\n        num_classes: Number of theta to classify against, corresponds to $K$ in\n            _Contrastive Neural Ratio Estimation_. Minimum value is 1. Similar to\n            `num_atoms` for SNRE_B except SNRE_C has an additional independently\n            drawn sample. The total number of alternative parameters `NRE-C` \"sees\"\n            is $2K-1$ or `2 * num_classes - 1` divided between two loss terms.\n        gamma: Determines the relative weight of the sum of all $K$ dependently\n            drawn classes against the marginally drawn one. Specifically,\n            $p(y=k) :=p_K$, $p(y=0) := p_0$, $p_0 = 1 - K p_K$, and finally\n            $\\gamma := K p_K / p_0$.\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        exclude_invalid_x: Whether to exclude simulation outputs `x=NaN` or `x=\u00b1\u221e`\n            during training. Expect errors, silent or explicit, when `False`.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n            from the prior. Training may be sped up by ignoring such less targeted\n            samples.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n\n    Returns:\n        Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n    \"\"\"\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    kwargs[\"num_atoms\"] = kwargs.pop(\"num_classes\") + 1\n    kwargs[\"loss_kwargs\"] = {\"gamma\": kwargs.pop(\"gamma\")}\n    return super().train(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.bnre.BNRE.__init__","title":"<code>__init__(prior=None, classifier='resnet', device='cpu', logging_level='warning', summary_writer=None, show_progress_bars=True)</code>","text":"<p>Balanced neural ratio estimation (BNRE)[1]. BNRE is a variation of NRE aiming to produce more conservative posterior approximations</p> <p>[1] Delaunoy, A., Hermans, J., Rozet, F., Wehenkel, A., &amp; Louppe, G.. Towards Reliable Simulation-Based Inference with Balanced Neural Ratio Estimation. NeurIPS 2022. https://arxiv.org/abs/2208.13624</p> <p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Optional[Distribution]</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. If <code>None</code>, the prior must be passed to <code>.build_posterior()</code>.</p> <code>None</code> <code>classifier</code> <code>Union[str, Callable]</code> <p>Classifier trained to approximate likelihood ratios. If it is a string, use a pre-configured network of the provided type (one of linear, mlp, resnet). Alternatively, a function that builds a custom neural network can be provided. The function will be called with the first batch of simulations \\((\\theta, x)\\), which can thus be used for shape inference and potentially for z-scoring. It needs to return a PyTorch <code>nn.Module</code> implementing the classifier.</p> <code>'resnet'</code> <code>device</code> <code>str</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:{0, 1, \u2026}\u201d.</p> <code>'cpu'</code> <code>logging_level</code> <code>Union[int, str]</code> <p>Minimum severity of messages to log. One of the strings INFO, WARNING, DEBUG, ERROR and CRITICAL.</p> <code>'warning'</code> <code>summary_writer</code> <code>Optional[TensorboardSummaryWriter]</code> <p>A tensorboard <code>SummaryWriter</code> to control, among others, log file location (default is <code>&lt;current working directory&gt;/logs</code>.)</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/snre/bnre.py</code> <pre><code>def __init__(\n    self,\n    prior: Optional[Distribution] = None,\n    classifier: Union[str, Callable] = \"resnet\",\n    device: str = \"cpu\",\n    logging_level: Union[int, str] = \"warning\",\n    summary_writer: Optional[TensorboardSummaryWriter] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"Balanced neural ratio estimation (BNRE)[1]. BNRE is a variation of NRE\n    aiming to produce more conservative posterior approximations\n\n    [1] Delaunoy, A., Hermans, J., Rozet, F., Wehenkel, A., &amp; Louppe, G..\n    Towards Reliable Simulation-Based Inference with Balanced Neural Ratio\n    Estimation.\n    NeurIPS 2022. https://arxiv.org/abs/2208.13624\n\n    Args:\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. If `None`, the\n            prior must be passed to `.build_posterior()`.\n        classifier: Classifier trained to approximate likelihood ratios. If it is\n            a string, use a pre-configured network of the provided type (one of\n            linear, mlp, resnet). Alternatively, a function that builds a custom\n            neural network can be provided. The function will be called with the\n            first batch of simulations $(\\theta, x)$, which can thus be used for\n            shape inference and potentially for z-scoring. It needs to return a\n            PyTorch `nn.Module` implementing the classifier.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:{0, 1, ...}\".\n        logging_level: Minimum severity of messages to log. One of the strings\n            INFO, WARNING, DEBUG, ERROR and CRITICAL.\n        summary_writer: A tensorboard `SummaryWriter` to control, among others, log\n            file location (default is `&lt;current working directory&gt;/logs`.)\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.snre.bnre.BNRE.train","title":"<code>train(regularization_strength=100.0, training_batch_size=50, learning_rate=0.0005, validation_fraction=0.1, stop_after_epochs=20, max_num_epochs=2 ** 31 - 1, clip_max_norm=5.0, resume_training=False, discard_prior_samples=False, retrain_from_scratch=False, show_train_summary=False, dataloader_kwargs=None)</code>","text":"<p>Return classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\). Args:</p> <pre><code>regularization_strength: The multiplicative coefficient applied to the\n    balancing regularizer ($\\lambda$).\ntraining_batch_size: Training batch size.\nlearning_rate: Learning rate for Adam optimizer.\nvalidation_fraction: The fraction of data to use for validation.\nstop_after_epochs: The number of epochs to wait for improvement on the\n    validation set before terminating training.\nmax_num_epochs: Maximum number of epochs to run. If reached, we stop\n    training even when the validation loss is still decreasing. Otherwise,\n    we train until validation loss increases (see also `stop_after_epochs`).\nclip_max_norm: Value at which to clip the total gradient norm in order to\n    prevent exploding gradients. Use None for no clipping.\nexclude_invalid_x: Whether to exclude simulation outputs `x=NaN` or `x=\u00b1\u221e`\n    during training. Expect errors, silent or explicit, when `False`.\nresume_training: Can be used in case training time is limited, e.g. on a\n    cluster. If `True`, the split between train and validation set, the\n    optimizer, the number of epochs, and the best validation log-prob will\n    be restored from the last time `.train()` was called.\ndiscard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n    from the prior. Training may be sped up by ignoring such less targeted\n    samples.\nretrain_from_scratch: Whether to retrain the conditional density\n    estimator for the posterior from scratch each round.\nshow_train_summary: Whether to print the number of epochs and validation\n    loss and leakage after the training.\ndataloader_kwargs: Additional or updated kwargs to be passed to the training\n    and validation dataloaders (like, e.g., a collate_fn)\n</code></pre> <p>Returns:     Classifier that approximates the ratio \\(p(\\theta,x)/p(\\theta)p(x)\\).</p> Source code in <code>sbi/inference/snre/bnre.py</code> <pre><code>def train(\n    self,\n    regularization_strength: float = 100.0,\n    training_batch_size: int = 50,\n    learning_rate: float = 5e-4,\n    validation_fraction: float = 0.1,\n    stop_after_epochs: int = 20,\n    max_num_epochs: int = 2**31 - 1,\n    clip_max_norm: Optional[float] = 5.0,\n    resume_training: bool = False,\n    discard_prior_samples: bool = False,\n    retrain_from_scratch: bool = False,\n    show_train_summary: bool = False,\n    dataloader_kwargs: Optional[Dict] = None,\n) -&gt; nn.Module:\n    r\"\"\"Return classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n    Args:\n\n        regularization_strength: The multiplicative coefficient applied to the\n            balancing regularizer ($\\lambda$).\n        training_batch_size: Training batch size.\n        learning_rate: Learning rate for Adam optimizer.\n        validation_fraction: The fraction of data to use for validation.\n        stop_after_epochs: The number of epochs to wait for improvement on the\n            validation set before terminating training.\n        max_num_epochs: Maximum number of epochs to run. If reached, we stop\n            training even when the validation loss is still decreasing. Otherwise,\n            we train until validation loss increases (see also `stop_after_epochs`).\n        clip_max_norm: Value at which to clip the total gradient norm in order to\n            prevent exploding gradients. Use None for no clipping.\n        exclude_invalid_x: Whether to exclude simulation outputs `x=NaN` or `x=\u00b1\u221e`\n            during training. Expect errors, silent or explicit, when `False`.\n        resume_training: Can be used in case training time is limited, e.g. on a\n            cluster. If `True`, the split between train and validation set, the\n            optimizer, the number of epochs, and the best validation log-prob will\n            be restored from the last time `.train()` was called.\n        discard_prior_samples: Whether to discard samples simulated in round 1, i.e.\n            from the prior. Training may be sped up by ignoring such less targeted\n            samples.\n        retrain_from_scratch: Whether to retrain the conditional density\n            estimator for the posterior from scratch each round.\n        show_train_summary: Whether to print the number of epochs and validation\n            loss and leakage after the training.\n        dataloader_kwargs: Additional or updated kwargs to be passed to the training\n            and validation dataloaders (like, e.g., a collate_fn)\n    Returns:\n        Classifier that approximates the ratio $p(\\theta,x)/p(\\theta)p(x)$.\n    \"\"\"\n    kwargs = del_entries(locals(), entries=(\"self\", \"__class__\"))\n    kwargs[\"loss_kwargs\"] = {\n        \"regularization_strength\": kwargs.pop(\"regularization_strength\")\n    }\n    return super().train(**kwargs)\n</code></pre>"},{"location":"reference/#sbi.inference.abc.mcabc.MCABC.__call__","title":"<code>__call__(x_o, num_simulations, eps=None, quantile=None, lra=False, sass=False, sass_fraction=0.25, sass_expansion_degree=1, kde=False, kde_kwargs={}, return_summary=False)</code>","text":"<p>Run MCABC and return accepted parameters or KDE object fitted on them.</p> <p>Parameters:</p> Name Type Description Default <code>x_o</code> <code>Union[Tensor, ndarray]</code> <p>Observed data.</p> required <code>num_simulations</code> <code>int</code> <p>Number of simulations to run.</p> required <code>eps</code> <code>Optional[float]</code> <p>Acceptance threshold \\(\\epsilon\\) for distance between observed and simulated data.</p> <code>None</code> <code>quantile</code> <code>Optional[float]</code> <p>Upper quantile of smallest distances for which the corresponding parameters are returned, e.g, q=0.01 will return the top 1%. Exactly one of quantile or <code>eps</code> have to be passed.</p> <code>None</code> <code>lra</code> <code>bool</code> <p>Whether to run linear regression adjustment as in Beaumont et al. 2002</p> <code>False</code> <code>sass</code> <code>bool</code> <p>Whether to determine semi-automatic summary statistics as in Fearnhead &amp; Prangle 2012.</p> <code>False</code> <code>sass_fraction</code> <code>float</code> <p>Fraction of simulation budget used for the initial sass run.</p> <code>0.25</code> <code>sass_expansion_degree</code> <code>int</code> <p>Degree of the polynomial feature expansion for the sass regression, default 1 - no expansion.</p> <code>1</code> <code>kde</code> <code>bool</code> <p>Whether to run KDE on the accepted parameters to return a KDE object from which one can sample.</p> <code>False</code> <code>kde_kwargs</code> <code>Dict[str, Any]</code> <p>kwargs for performing KDE: \u2018bandwidth=\u2019; either a float, or a string naming a bandwidth heuristics, e.g., \u2018cv\u2019 (cross validation), \u2018silvermann\u2019 or \u2018scott\u2019, default \u2018cv\u2019. \u2018transform\u2019: transform applied to the parameters before doing KDE. \u2018sample_weights\u2019: weights associated with samples. See \u2018get_kde\u2019 for more details</p> <code>{}</code> <code>return_summary</code> <code>bool</code> <p>Whether to return the distances and data corresponding to the accepted parameters.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>theta</code> <code>if kde False</code> <p>accepted parameters</p> <code>kde</code> <code>if kde True</code> <p>KDE object based on accepted parameters from which one can .sample() and .log_prob().</p> <code>summary</code> <code>if summary True</code> <p>dictionary containing the accepted paramters (if kde True), distances and simulated data x.</p> Source code in <code>sbi/inference/abc/mcabc.py</code> <pre><code>def __call__(\n    self,\n    x_o: Union[Tensor, ndarray],\n    num_simulations: int,\n    eps: Optional[float] = None,\n    quantile: Optional[float] = None,\n    lra: bool = False,\n    sass: bool = False,\n    sass_fraction: float = 0.25,\n    sass_expansion_degree: int = 1,\n    kde: bool = False,\n    kde_kwargs: Dict[str, Any] = {},\n    return_summary: bool = False,\n) -&gt; Union[Tuple[Tensor, dict], Tuple[KDEWrapper, dict], Tensor, KDEWrapper]:\n    r\"\"\"Run MCABC and return accepted parameters or KDE object fitted on them.\n\n    Args:\n        x_o: Observed data.\n        num_simulations: Number of simulations to run.\n        eps: Acceptance threshold $\\epsilon$ for distance between observed and\n            simulated data.\n        quantile: Upper quantile of smallest distances for which the corresponding\n            parameters are returned, e.g, q=0.01 will return the top 1%. Exactly\n            one of quantile or `eps` have to be passed.\n        lra: Whether to run linear regression adjustment as in Beaumont et al. 2002\n        sass: Whether to determine semi-automatic summary statistics as in\n            Fearnhead &amp; Prangle 2012.\n        sass_fraction: Fraction of simulation budget used for the initial sass run.\n        sass_expansion_degree: Degree of the polynomial feature expansion for the\n            sass regression, default 1 - no expansion.\n        kde: Whether to run KDE on the accepted parameters to return a KDE\n            object from which one can sample.\n        kde_kwargs: kwargs for performing KDE:\n            'bandwidth='; either a float, or a string naming a bandwidth\n            heuristics, e.g., 'cv' (cross validation), 'silvermann' or 'scott',\n            default 'cv'.\n            'transform': transform applied to the parameters before doing KDE.\n            'sample_weights': weights associated with samples. See 'get_kde' for\n            more details\n        return_summary: Whether to return the distances and data corresponding to\n            the accepted parameters.\n\n    Returns:\n        theta (if kde False): accepted parameters\n        kde (if kde True): KDE object based on accepted parameters from which one\n            can .sample() and .log_prob().\n        summary (if summary True): dictionary containing the accepted paramters (if\n            kde True), distances and simulated data x.\n    \"\"\"\n\n    # Exactly one of eps or quantile need to be passed.\n    assert (eps is not None) ^ (\n        quantile is not None\n    ), \"Eps or quantile must be passed, but not both.\"\n\n    # Run SASS and change the simulator and x_o accordingly.\n    if sass:\n        num_pilot_simulations = int(sass_fraction * num_simulations)\n        self.logger.info(\n            f\"Running SASS with {num_pilot_simulations} pilot samples.\"\n        )\n        num_simulations -= num_pilot_simulations\n\n        pilot_theta = self.prior.sample((num_pilot_simulations,))\n        pilot_x = self._batched_simulator(pilot_theta)\n\n        sass_transform = self.get_sass_transform(\n            pilot_theta, pilot_x, sass_expansion_degree\n        )\n\n        simulator = lambda theta: sass_transform(self._batched_simulator(theta))\n        x_o = sass_transform(x_o)\n    else:\n        simulator = self._batched_simulator\n\n    # Simulate and calculate distances.\n    theta = self.prior.sample((num_simulations,))\n    x = simulator(theta)\n\n    # Infer shape of x to test and set x_o.\n    self.x_shape = x[0].unsqueeze(0).shape\n    self.x_o = process_x(x_o, self.x_shape)\n\n    distances = self.distance(self.x_o, x)\n\n    # Select based on acceptance threshold epsilon.\n    if eps is not None:\n        is_accepted = distances &lt; eps\n        num_accepted = is_accepted.sum().item()\n        assert num_accepted &gt; 0, f\"No parameters accepted, eps={eps} too small\"\n\n        theta_accepted = theta[is_accepted]\n        distances_accepted = distances[is_accepted]\n        x_accepted = x[is_accepted]\n\n    # Select based on quantile on sorted distances.\n    elif quantile is not None:\n        num_top_samples = int(num_simulations * quantile)\n        sort_idx = torch.argsort(distances)\n        theta_accepted = theta[sort_idx][:num_top_samples]\n        distances_accepted = distances[sort_idx][:num_top_samples]\n        x_accepted = x[sort_idx][:num_top_samples]\n\n    else:\n        raise ValueError(\"One of epsilon or quantile has to be passed.\")\n\n    # Maybe adjust theta with LRA.\n    if lra:\n        self.logger.info(\"Running Linear regression adjustment.\")\n        final_theta = self.run_lra(theta_accepted, x_accepted, observation=self.x_o)\n    else:\n        final_theta = theta_accepted\n\n    if kde:\n        self.logger.info(\n            f\"\"\"KDE on {final_theta.shape[0]} samples with bandwidth option\n            {kde_kwargs[\"bandwidth\"] if \"bandwidth\" in kde_kwargs else \"cv\"}.\n            Beware that KDE can give unreliable results when used with too few\n            samples and in high dimensions.\"\"\"\n        )\n\n        kde_dist = get_kde(final_theta, **kde_kwargs)\n\n        if return_summary:\n            return (\n                kde_dist,\n                dict(theta=final_theta, distances=distances_accepted, x=x_accepted),\n            )\n        else:\n            return kde_dist\n    elif return_summary:\n        return final_theta, dict(distances=distances_accepted, x=x_accepted)\n    else:\n        return final_theta\n</code></pre>"},{"location":"reference/#sbi.inference.abc.mcabc.MCABC.__init__","title":"<code>__init__(simulator, prior, distance='l2', num_workers=1, simulation_batch_size=1, show_progress_bars=True)</code>","text":"<p>Monte-Carlo Approximate Bayesian Computation (Rejection ABC) [1].</p> <p>[1] Pritchard, J. K., Seielstad, M. T., Perez-Lezaun, A., &amp; Feldman, M. W. (1999). Population growth of human Y chromosomes: a study of Y chromosome microsatellites. Molecular biology and evolution, 16(12), 1791-1798.</p> <p>Parameters:</p> Name Type Description Default <code>simulator</code> <code>Callable</code> <p>A function that takes parameters \\(\\theta\\) and maps them to simulations, or observations, <code>x</code>, \\(\\mathrm{sim}(\\theta)\\to x\\). Any regular Python callable (i.e. function or class with <code>__call__</code> method) can be used.</p> required <code>prior</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. Any object with <code>.log_prob()</code>and <code>.sample()</code> (for example, a PyTorch distribution) can be used.</p> required <code>distance</code> <code>Union[str, Callable]</code> <p>Distance function to compare observed and simulated data. Can be a custom function or one of <code>l1</code>, <code>l2</code>, <code>mse</code>.</p> <code>'l2'</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers to use for simulations.</p> <code>1</code> <code>simulation_batch_size</code> <code>int</code> <p>Number of parameter sets that the simulator maps to data x at once. If None, we simulate all parameter sets at the same time. If &gt;= 1, the simulator has to process data of shape (simulation_batch_size, parameter_dimension).</p> <code>1</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> Source code in <code>sbi/inference/abc/mcabc.py</code> <pre><code>def __init__(\n    self,\n    simulator: Callable,\n    prior,\n    distance: Union[str, Callable] = \"l2\",\n    num_workers: int = 1,\n    simulation_batch_size: int = 1,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"Monte-Carlo Approximate Bayesian Computation (Rejection ABC) [1].\n\n    [1] Pritchard, J. K., Seielstad, M. T., Perez-Lezaun, A., &amp; Feldman, M. W.\n    (1999). Population growth of human Y chromosomes: a study of Y chromosome\n    microsatellites. Molecular biology and evolution, 16(12), 1791-1798.\n\n    Args:\n        simulator: A function that takes parameters $\\theta$ and maps them to\n            simulations, or observations, `x`, $\\mathrm{sim}(\\theta)\\to x$. Any\n            regular Python callable (i.e. function or class with `__call__` method)\n            can be used.\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. Any\n            object with `.log_prob()`and `.sample()` (for example, a PyTorch\n            distribution) can be used.\n        distance: Distance function to compare observed and simulated data. Can be\n            a custom function or one of `l1`, `l2`, `mse`.\n        num_workers: Number of parallel workers to use for simulations.\n        simulation_batch_size: Number of parameter sets that the simulator\n            maps to data x at once. If None, we simulate all parameter sets at the\n            same time. If &gt;= 1, the simulator has to process data of shape\n            (simulation_batch_size, parameter_dimension).\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n    \"\"\"\n\n    super().__init__(\n        simulator=simulator,\n        prior=prior,\n        distance=distance,\n        num_workers=num_workers,\n        simulation_batch_size=simulation_batch_size,\n        show_progress_bars=show_progress_bars,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.__call__","title":"<code>__call__(x_o, num_particles, num_initial_pop, num_simulations, epsilon_decay, distance_based_decay=False, ess_min=None, kernel_variance_scale=1.0, use_last_pop_samples=True, return_summary=False, kde=False, kde_kwargs={}, kde_sample_weights=False, lra=False, lra_with_weights=False, sass=False, sass_fraction=0.25, sass_expansion_degree=1)</code>","text":"<p>Run SMCABC and return accepted parameters or KDE object fitted on them.</p> <p>Parameters:</p> Name Type Description Default <code>x_o</code> <code>Union[Tensor, ndarray]</code> <p>Observed data.</p> required <code>num_particles</code> <code>int</code> <p>Number of particles in each population.</p> required <code>num_initial_pop</code> <code>int</code> <p>Number of simulations used for initial population.</p> required <code>num_simulations</code> <code>int</code> <p>Total number of possible simulations.</p> required <code>epsilon_decay</code> <code>float</code> <p>Factor with which the acceptance threshold \\(\\epsilon\\) decays.</p> required <code>distance_based_decay</code> <code>bool</code> <p>Whether the \\(\\epsilon\\) decay is constant over populations or calculated from the previous populations distribution of distances.</p> <code>False</code> <code>ess_min</code> <code>Optional[float]</code> <p>Threshold of effective sampling size for resampling weights. Not used when None (default).</p> <code>None</code> <code>kernel_variance_scale</code> <code>float</code> <p>Factor for scaling the perturbation kernel variance.</p> <code>1.0</code> <code>use_last_pop_samples</code> <code>bool</code> <p>Whether to fill up the current population with samples from the previous population when the budget is used up. If False, the current population is discarded and the previous population is returned.</p> <code>True</code> <code>lra</code> <code>bool</code> <p>Whether to run linear regression adjustment as in Beaumont et al. 2002</p> <code>False</code> <code>lra_with_weights</code> <code>bool</code> <p>Whether to run lra as weighted linear regression with SMC weights</p> <code>False</code> <code>sass</code> <code>bool</code> <p>Whether to determine semi-automatic summary statistics as in Fearnhead &amp; Prangle 2012.</p> <code>False</code> <code>sass_fraction</code> <code>float</code> <p>Fraction of simulation budget used for the initial sass run.</p> <code>0.25</code> <code>sass_expansion_degree</code> <code>int</code> <p>Degree of the polynomial feature expansion for the sass regression, default 1 - no expansion.</p> <code>1</code> <code>kde</code> <code>bool</code> <p>Whether to run KDE on the accepted parameters to return a KDE object from which one can sample.</p> <code>False</code> <code>kde_kwargs</code> <code>Dict[str, Any]</code> <p>kwargs for performing KDE: \u2018bandwidth=\u2019; either a float, or a string naming a bandwidth heuristics, e.g., \u2018cv\u2019 (cross validation), \u2018silvermann\u2019 or \u2018scott\u2019, default \u2018cv\u2019. \u2018transform\u2019: transform applied to the parameters before doing KDE. \u2018sample_weights\u2019: weights associated with samples. See \u2018get_kde\u2019 for more details</p> <code>{}</code> <code>kde_sample_weights</code> <code>bool</code> <p>Whether perform weighted KDE with SMC weights or on raw particles.</p> <code>False</code> <code>return_summary</code> <code>bool</code> <p>Whether to return a dictionary with all accepted particles, weights, etc. at the end.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>theta</code> <code>if kde False</code> <p>accepted parameters of the last population.</p> <code>kde</code> <code>if kde True</code> <p>KDE object fitted on accepted parameters, from which one can .sample() and .log_prob().</p> <code>summary</code> <code>if return_summary True</code> <p>dictionary containing the accepted paramters (if kde True), distances and simulated data x of all populations.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def __call__(\n    self,\n    x_o: Union[Tensor, ndarray],\n    num_particles: int,\n    num_initial_pop: int,\n    num_simulations: int,\n    epsilon_decay: float,\n    distance_based_decay: bool = False,\n    ess_min: Optional[float] = None,\n    kernel_variance_scale: float = 1.0,\n    use_last_pop_samples: bool = True,\n    return_summary: bool = False,\n    kde: bool = False,\n    kde_kwargs: Dict[str, Any] = {},\n    kde_sample_weights: bool = False,\n    lra: bool = False,\n    lra_with_weights: bool = False,\n    sass: bool = False,\n    sass_fraction: float = 0.25,\n    sass_expansion_degree: int = 1,\n) -&gt; Union[Tensor, KDEWrapper, Tuple[Tensor, dict], Tuple[KDEWrapper, dict]]:\n    r\"\"\"Run SMCABC and return accepted parameters or KDE object fitted on them.\n\n    Args:\n        x_o: Observed data.\n        num_particles: Number of particles in each population.\n        num_initial_pop: Number of simulations used for initial population.\n        num_simulations: Total number of possible simulations.\n        epsilon_decay: Factor with which the acceptance threshold $\\epsilon$ decays.\n        distance_based_decay: Whether the $\\epsilon$ decay is constant over\n            populations or calculated from the previous populations distribution of\n            distances.\n        ess_min: Threshold of effective sampling size for resampling weights. Not\n            used when None (default).\n        kernel_variance_scale: Factor for scaling the perturbation kernel variance.\n        use_last_pop_samples: Whether to fill up the current population with\n            samples from the previous population when the budget is used up. If\n            False, the current population is discarded and the previous population\n            is returned.\n        lra: Whether to run linear regression adjustment as in Beaumont et al. 2002\n        lra_with_weights: Whether to run lra as weighted linear regression with SMC\n            weights\n        sass: Whether to determine semi-automatic summary statistics as in\n            Fearnhead &amp; Prangle 2012.\n        sass_fraction: Fraction of simulation budget used for the initial sass run.\n        sass_expansion_degree: Degree of the polynomial feature expansion for the\n            sass regression, default 1 - no expansion.\n        kde: Whether to run KDE on the accepted parameters to return a KDE\n            object from which one can sample.\n        kde_kwargs: kwargs for performing KDE:\n            'bandwidth='; either a float, or a string naming a bandwidth\n            heuristics, e.g., 'cv' (cross validation), 'silvermann' or 'scott',\n            default 'cv'.\n            'transform': transform applied to the parameters before doing KDE.\n            'sample_weights': weights associated with samples. See 'get_kde' for\n            more details\n        kde_sample_weights: Whether perform weighted KDE with SMC weights or on raw\n            particles.\n        return_summary: Whether to return a dictionary with all accepted particles,\n            weights, etc. at the end.\n\n    Returns:\n        theta (if kde False): accepted parameters of the last population.\n        kde (if kde True): KDE object fitted on accepted parameters, from which one\n            can .sample() and .log_prob().\n        summary (if return_summary True): dictionary containing the accepted\n            paramters (if kde True), distances and simulated data x of all\n            populations.\n    \"\"\"\n\n    pop_idx = 0\n    self.num_simulations = num_simulations\n\n    # Pilot run for SASS.\n    if sass:\n        num_pilot_simulations = int(sass_fraction * num_simulations)\n        self.logger.info(\n            f\"Running SASS with {num_pilot_simulations} pilot samples.\"\n        )\n        sass_transform = self.run_sass_set_xo(\n            num_particles, num_pilot_simulations, x_o, lra, sass_expansion_degree\n        )\n        # Udpate simulator and xo\n        x_o = sass_transform(self.x_o)\n\n        def sass_simulator(theta):\n            self.simulation_counter += theta.shape[0]\n            return sass_transform(self._batched_simulator(theta))\n\n        self._simulate_with_budget = sass_simulator\n\n    # run initial population\n    particles, epsilon, distances, x = self._set_xo_and_sample_initial_population(\n        x_o, num_particles, num_initial_pop\n    )\n    log_weights = torch.log(1 / num_particles * ones(num_particles))\n\n    self.logger.info(\n        (\n            f\"population={pop_idx}, eps={epsilon}, ess={1.0}, \"\n            f\"num_sims={num_initial_pop}\"\n        )\n    )\n\n    all_particles = [particles]\n    all_log_weights = [log_weights]\n    all_distances = [distances]\n    all_epsilons = [epsilon]\n    all_x = [x]\n\n    while self.simulation_counter &lt; self.num_simulations:\n        pop_idx += 1\n        # Decay based on quantile of distances from previous pop.\n        if distance_based_decay:\n            epsilon = self._get_next_epsilon(\n                all_distances[pop_idx - 1], epsilon_decay\n            )\n        # Constant decay.\n        else:\n            epsilon *= epsilon_decay\n\n        # Get kernel variance from previous pop.\n        self.kernel_variance = self.get_kernel_variance(\n            all_particles[pop_idx - 1],\n            torch.exp(all_log_weights[pop_idx - 1]),\n            samples_per_dim=500,\n            kernel_variance_scale=kernel_variance_scale,\n        )\n        particles, log_weights, distances, x = self._sample_next_population(\n            particles=all_particles[pop_idx - 1],\n            log_weights=all_log_weights[pop_idx - 1],\n            distances=all_distances[pop_idx - 1],\n            epsilon=epsilon,\n            x=all_x[pop_idx - 1],\n            use_last_pop_samples=use_last_pop_samples,\n        )\n\n        # Resample population if effective sampling size is too small.\n        if ess_min is not None:\n            particles, log_weights = self.resample_if_ess_too_small(\n                particles, log_weights, ess_min, pop_idx\n            )\n\n        self.logger.info(\n            (\n                f\"population={pop_idx} done: eps={epsilon:.6f},\"\n                f\" num_sims={self.simulation_counter}.\"\n            )\n        )\n\n        # collect results\n        all_particles.append(particles)\n        all_log_weights.append(log_weights)\n        all_distances.append(distances)\n        all_epsilons.append(epsilon)\n        all_x.append(x)\n\n    # Maybe run LRA and adjust weights.\n    if lra:\n        self.logger.info(\"Running Linear regression adjustment.\")\n        adjusted_particles, adjusted_weights = self.run_lra_update_weights(\n            particles=all_particles[-1],\n            xs=all_x[-1],\n            observation=process_x(x_o),\n            log_weights=all_log_weights[-1],\n            lra_with_weights=lra_with_weights,\n        )\n        final_particles = adjusted_particles\n    else:\n        final_particles = all_particles[-1]\n\n    if kde:\n        self.logger.info(\n            f\"\"\"KDE on {final_particles.shape[0]} samples with bandwidth option\n            {kde_kwargs[\"bandwidth\"] if \"bandwidth\" in kde_kwargs else \"cv\"}.\n            Beware that KDE can give unreliable results when used with too few\n            samples and in high dimensions.\"\"\"\n        )\n        # Maybe get particles weights from last population for weighted KDE.\n        if kde_sample_weights:\n            kde_kwargs[\"sample_weights\"] = all_log_weights[-1].exp()\n\n        kde_dist = get_kde(final_particles, **kde_kwargs)\n\n        if return_summary:\n            return (\n                kde_dist,\n                dict(\n                    particles=all_particles,\n                    weights=all_log_weights,\n                    epsilons=all_epsilons,\n                    distances=all_distances,\n                    xs=all_x,\n                ),\n            )\n        else:\n            return kde_dist\n\n    if return_summary:\n        return (\n            final_particles,\n            dict(\n                particles=all_particles,\n                weights=all_log_weights,\n                epsilons=all_epsilons,\n                distances=all_distances,\n                xs=all_x,\n            ),\n        )\n    else:\n        return final_particles\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.__init__","title":"<code>__init__(simulator, prior, distance='l2', num_workers=1, simulation_batch_size=1, show_progress_bars=True, kernel='gaussian', algorithm_variant='C')</code>","text":"<p>Sequential Monte Carlo Approximate Bayesian Computation.</p> We distinguish between three different SMC methods here <ul> <li>A: Toni et al. 2010 (Phd Thesis)</li> <li>B: Sisson et al. 2007 (with correction from 2009)</li> <li>C: Beaumont et al. 2009</li> </ul> <p>In Toni et al. 2010 we find an overview of the differences on page 34:     - B: same as A except for resampling of weights if the effective sampling         size is too small.     - C: same as A except for calculation of the covariance of the perturbation         kernel: the kernel covariance is a scaled version of the covariance of         the previous population.</p> <p>Parameters:</p> Name Type Description Default <code>simulator</code> <code>Callable</code> <p>A function that takes parameters \\(\\theta\\) and maps them to simulations, or observations, <code>x</code>, \\(\\mathrm{sim}(\\theta)\\to x\\). Any regular Python callable (i.e. function or class with <code>__call__</code> method) can be used.</p> required <code>prior</code> <code>Distribution</code> <p>A probability distribution that expresses prior knowledge about the parameters, e.g. which ranges are meaningful for them. Any object with <code>.log_prob()</code>and <code>.sample()</code> (for example, a PyTorch distribution) can be used.</p> required <code>distance</code> <code>Union[str, Callable]</code> <p>Distance function to compare observed and simulated data. Can be a custom function or one of <code>l1</code>, <code>l2</code>, <code>mse</code>.</p> <code>'l2'</code> <code>num_workers</code> <code>int</code> <p>Number of parallel workers to use for simulations.</p> <code>1</code> <code>simulation_batch_size</code> <code>int</code> <p>Number of parameter sets that the simulator maps to data x at once. If None, we simulate all parameter sets at the same time. If &gt;= 1, the simulator has to process data of shape (simulation_batch_size, parameter_dimension).</p> <code>1</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during simulation and sampling.</p> <code>True</code> <code>kernel</code> <code>Optional[str]</code> <p>Perturbation kernel.</p> <code>'gaussian'</code> <code>algorithm_variant</code> <code>str</code> <p>Indicating the choice of algorithm variant, A, B, or C.</p> <code>'C'</code> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def __init__(\n    self,\n    simulator: Callable,\n    prior: Distribution,\n    distance: Union[str, Callable] = \"l2\",\n    num_workers: int = 1,\n    simulation_batch_size: int = 1,\n    show_progress_bars: bool = True,\n    kernel: Optional[str] = \"gaussian\",\n    algorithm_variant: str = \"C\",\n):\n    r\"\"\"Sequential Monte Carlo Approximate Bayesian Computation.\n\n    We distinguish between three different SMC methods here:\n        - A: Toni et al. 2010 (Phd Thesis)\n        - B: Sisson et al. 2007 (with correction from 2009)\n        - C: Beaumont et al. 2009\n\n    In Toni et al. 2010 we find an overview of the differences on page 34:\n        - B: same as A except for resampling of weights if the effective sampling\n            size is too small.\n        - C: same as A except for calculation of the covariance of the perturbation\n            kernel: the kernel covariance is a scaled version of the covariance of\n            the previous population.\n\n    Args:\n        simulator: A function that takes parameters $\\theta$ and maps them to\n            simulations, or observations, `x`, $\\mathrm{sim}(\\theta)\\to x$. Any\n            regular Python callable (i.e. function or class with `__call__` method)\n            can be used.\n        prior: A probability distribution that expresses prior knowledge about the\n            parameters, e.g. which ranges are meaningful for them. Any\n            object with `.log_prob()`and `.sample()` (for example, a PyTorch\n            distribution) can be used.\n        distance: Distance function to compare observed and simulated data. Can be\n            a custom function or one of `l1`, `l2`, `mse`.\n        num_workers: Number of parallel workers to use for simulations.\n        simulation_batch_size: Number of parameter sets that the simulator\n            maps to data x at once. If None, we simulate all parameter sets at the\n            same time. If &gt;= 1, the simulator has to process data of shape\n            (simulation_batch_size, parameter_dimension).\n        show_progress_bars: Whether to show a progressbar during simulation and\n            sampling.\n        kernel: Perturbation kernel.\n        algorithm_variant: Indicating the choice of algorithm variant, A, B, or C.\n\n    \"\"\"\n\n    super().__init__(\n        simulator=simulator,\n        prior=prior,\n        distance=distance,\n        num_workers=num_workers,\n        simulation_batch_size=simulation_batch_size,\n        show_progress_bars=show_progress_bars,\n    )\n\n    kernels = (\"gaussian\", \"uniform\")\n    assert (\n        kernel in kernels\n    ), f\"Kernel '{kernel}' not supported. Choose one from {kernels}.\"\n    self.kernel = kernel\n\n    algorithm_variants = (\"A\", \"B\", \"C\")\n    assert algorithm_variant in algorithm_variants, (\n        f\"SMCABC variant '{algorithm_variant}' not supported, choose one from\"\n        \" {algorithm_variants}.\"\n    )\n    self.algorithm_variant = algorithm_variant\n    self.distance_to_x0 = None\n    self.simulation_counter = 0\n    self.num_simulations = 0\n\n    # Define simulator that keeps track of budget.\n    def simulate_with_budget(theta):\n        self.simulation_counter += theta.shape[0]\n        return self._batched_simulator(theta)\n\n    self._simulate_with_budget = simulate_with_budget\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.get_new_kernel","title":"<code>get_new_kernel(thetas)</code>","text":"<p>Return new kernel distribution for a given set of paramters.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def get_new_kernel(self, thetas: Tensor) -&gt; Distribution:\n    \"\"\"Return new kernel distribution for a given set of paramters.\"\"\"\n\n    if self.kernel == \"gaussian\":\n        assert self.kernel_variance.ndim == 2\n        return MultivariateNormal(\n            loc=thetas, covariance_matrix=self.kernel_variance\n        )\n\n    elif self.kernel == \"uniform\":\n        low = thetas - self.kernel_variance\n        high = thetas + self.kernel_variance\n        # Move batch shape to event shape to get Uniform that is multivariate in\n        # parameter dimension.\n        return Uniform(low=low, high=high).to_event(1)\n    else:\n        raise ValueError(f\"Kernel, '{self.kernel}' not supported.\")\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.get_particle_ranges","title":"<code>get_particle_ranges(particles, weights, samples_per_dim=100)</code>","text":"<p>Return range of particles in each parameter dimension.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def get_particle_ranges(\n    self, particles: Tensor, weights: Tensor, samples_per_dim: int = 100\n) -&gt; Tensor:\n    \"\"\"Return range of particles in each parameter dimension.\"\"\"\n\n    # get weighted samples\n    samples = self.sample_from_population_with_weights(\n        particles,\n        weights,\n        num_samples=samples_per_dim * particles.shape[1],\n    )\n\n    # Variance spans the range of particles for every dimension.\n    particle_ranges = samples.max(0).values - samples.min(0).values\n    assert particle_ranges.ndim &lt; 2\n    return particle_ranges\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.resample_if_ess_too_small","title":"<code>resample_if_ess_too_small(particles, log_weights, ess_min, pop_idx)</code>","text":"<p>Return resampled particles and uniform weights if effectice sampling size is too small.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def resample_if_ess_too_small(\n    self,\n    particles: Tensor,\n    log_weights: Tensor,\n    ess_min: float,\n    pop_idx: int,\n) -&gt; Tuple[Tensor, Tensor]:\n    \"\"\"Return resampled particles and uniform weights if effectice sampling size is\n    too small.\n    \"\"\"\n\n    num_particles = particles.shape[0]\n    ess = (1 / torch.sum(torch.exp(2.0 * log_weights), dim=0)) / num_particles\n    # Resampling of weights for low ESS only for Sisson et al. 2007.\n    if ess &lt; ess_min:\n        self.logger.info(f\"ESS={ess:.2f} too low, resampling pop {pop_idx}...\")\n        # First resample, then set to uniform weights as in Sisson et al. 2007.\n        particles = self.sample_from_population_with_weights(\n            particles, torch.exp(log_weights), num_samples=num_particles\n        )\n        log_weights = torch.log(1 / num_particles * ones(num_particles))\n\n    return particles, log_weights\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.run_lra_update_weights","title":"<code>run_lra_update_weights(particles, xs, observation, log_weights, lra_with_weights)</code>","text":"<p>Return particles and weights adjusted with LRA.</p> <p>Runs (weighted) linear regression from xs onto particles to adjust the particles.</p> <p>Updates the SMC weights according to the new particles.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def run_lra_update_weights(\n    self,\n    particles: Tensor,\n    xs: Tensor,\n    observation: Tensor,\n    log_weights: Tensor,\n    lra_with_weights: bool,\n) -&gt; Tuple[Tensor, Tensor]:\n    \"\"\"Return particles and weights adjusted with LRA.\n\n    Runs (weighted) linear regression from xs onto particles to adjust the\n    particles.\n\n    Updates the SMC weights according to the new particles.\n    \"\"\"\n\n    adjusted_particels = self.run_lra(\n        theta=particles,\n        x=xs,\n        observation=observation,\n        sample_weight=log_weights.exp() if lra_with_weights else None,\n    )\n\n    # Update SMC weights with LRA adjusted weights\n    adjusted_log_weights = self._calculate_new_log_weights(\n        new_particles=adjusted_particels,\n        old_particles=particles,\n        old_log_weights=log_weights,\n    )\n\n    return adjusted_particels, adjusted_log_weights\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.run_sass_set_xo","title":"<code>run_sass_set_xo(num_particles, num_pilot_simulations, x_o, lra=False, sass_expansion_degree=1)</code>","text":"<p>Return transform for semi-automatic summary statistics.</p> <p>Runs an single round of rejection abc with fixed budget and accepts num_particles simulations to run the regression for sass.</p> <p>Sets self.x_o once the x_shape can be derived from simulations.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>def run_sass_set_xo(\n    self,\n    num_particles: int,\n    num_pilot_simulations: int,\n    x_o,\n    lra: bool = False,\n    sass_expansion_degree: int = 1,\n) -&gt; Callable:\n    \"\"\"Return transform for semi-automatic summary statistics.\n\n    Runs an single round of rejection abc with fixed budget and accepts\n    num_particles simulations to run the regression for sass.\n\n    Sets self.x_o once the x_shape can be derived from simulations.\n    \"\"\"\n    (\n        pilot_particles,\n        _,\n        _,\n        pilot_xs,\n    ) = self._set_xo_and_sample_initial_population(\n        x_o, num_particles, num_pilot_simulations\n    )\n    # Adjust with LRA.\n    if lra:\n        pilot_particles = self.run_lra(pilot_particles, pilot_xs, self.x_o)\n    sass_transform = self.get_sass_transform(\n        pilot_particles,\n        pilot_xs,\n        expansion_degree=sass_expansion_degree,\n        sample_weight=None,\n    )\n    return sass_transform\n</code></pre>"},{"location":"reference/#sbi.inference.abc.smcabc.SMCABC.sample_from_population_with_weights","title":"<code>sample_from_population_with_weights(particles, weights, num_samples=1)</code>  <code>staticmethod</code>","text":"<p>Return samples from particles sampled with weights.</p> Source code in <code>sbi/inference/abc/smcabc.py</code> <pre><code>@staticmethod\ndef sample_from_population_with_weights(\n    particles: Tensor, weights: Tensor, num_samples: int = 1\n) -&gt; Tensor:\n    \"\"\"Return samples from particles sampled with weights.\"\"\"\n\n    # define multinomial with weights as probs\n    multi = Multinomial(probs=weights)\n    # sample num samples, with replacement\n    samples = multi.sample(sample_shape=torch.Size((num_samples,)))\n    # get indices of success trials\n    indices = torch.where(samples)[1]\n    # return those indices from trace\n    return particles[indices]\n</code></pre>"},{"location":"reference/#posteriors","title":"Posteriors","text":"<p>             Bases: <code>NeuralPosterior</code></p> <p>Posterior \\(p(\\theta|x_o)\\) with <code>log_prob()</code> and <code>sample()</code> methods, only applicable to SNPE. SNPE trains a neural network to directly approximate the posterior distribution. However, for bounded priors, the neural network can have leakage: it puts non-zero mass in regions where the prior is zero. The <code>DirectPosterior</code> class wraps the trained network to deal with these cases. Specifically, this class offers the following functionality: - correct the calculation of the log probability such that it compensates for the   leakage. - reject samples that lie outside of the prior bounds. This class can not be used in combination with SNLE or SNRE.</p> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>class DirectPosterior(NeuralPosterior):\n    r\"\"\"Posterior $p(\\theta|x_o)$ with `log_prob()` and `sample()` methods, only\n    applicable to SNPE.&lt;br/&gt;&lt;br/&gt;\n    SNPE trains a neural network to directly approximate the posterior distribution.\n    However, for bounded priors, the neural network can have leakage: it puts non-zero\n    mass in regions where the prior is zero. The `DirectPosterior` class wraps the\n    trained network to deal with these cases.&lt;br/&gt;&lt;br/&gt;\n    Specifically, this class offers the following functionality:&lt;br/&gt;\n    - correct the calculation of the log probability such that it compensates for the\n      leakage.&lt;br/&gt;\n    - reject samples that lie outside of the prior bounds.&lt;br/&gt;&lt;br/&gt;\n    This class can not be used in combination with SNLE or SNRE.\n    \"\"\"\n\n    def __init__(\n        self,\n        posterior_estimator: flows.Flow,\n        prior: Distribution,\n        max_sampling_batch_size: int = 10_000,\n        device: Optional[str] = None,\n        x_shape: Optional[torch.Size] = None,\n        enable_transform: bool = True,\n    ):\n        \"\"\"\n        Args:\n            prior: Prior distribution with `.log_prob()` and `.sample()`.\n            posterior_estimator: The trained neural posterior.\n            max_sampling_batch_size: Batchsize of samples being drawn from\n                the proposal at every iteration.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n                `potential_fn.device` is used.\n            x_shape: Shape of a single simulator output. If passed, it is used to check\n                the shape of the observed data and give a descriptive error.\n            enable_transform: Whether to transform parameters to unconstrained space\n                during MAP optimization. When False, an identity transform will be\n                returned for `theta_transform`.\n        \"\"\"\n        # Because `DirectPosterior` does not take the `potential_fn` as input, it\n        # builds it itself. The `potential_fn` and `theta_transform` are used only for\n        # obtaining the MAP.\n        check_prior(prior)\n        potential_fn, theta_transform = posterior_estimator_based_potential(\n            posterior_estimator,\n            prior,\n            x_o=None,\n            enable_transform=enable_transform,\n        )\n\n        super().__init__(\n            potential_fn=potential_fn,\n            theta_transform=theta_transform,\n            device=device,\n            x_shape=x_shape,\n        )\n\n        self.prior = prior\n        self.posterior_estimator = posterior_estimator\n\n        self.max_sampling_batch_size = max_sampling_batch_size\n        self._leakage_density_correction_factor = None\n\n        self._purpose = \"\"\"It samples the posterior network and rejects samples that\n            lie outside of the prior bounds.\"\"\"\n\n    def sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        x: Optional[Tensor] = None,\n        max_sampling_batch_size: int = 10_000,\n        sample_with: Optional[str] = None,\n        show_progress_bars: bool = True,\n    ) -&gt; Tensor:\n        r\"\"\"Return samples from posterior distribution $p(\\theta|x)$.\n\n        Args:\n            sample_shape: Desired shape of samples that are drawn from posterior. If\n                sample_shape is multidimensional we simply draw `sample_shape.numel()`\n                samples and then reshape into the desired shape.\n            sample_with: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n            show_progress_bars: Whether to show sampling progress monitor.\n        \"\"\"\n\n        num_samples = torch.Size(sample_shape).numel()\n        x = self._x_else_default_x(x)\n        max_sampling_batch_size = (\n            self.max_sampling_batch_size\n            if max_sampling_batch_size is None\n            else max_sampling_batch_size\n        )\n\n        if sample_with is not None:\n            raise ValueError(\n                f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n                f\"`sample_with` is no longer supported. You have to rerun \"\n                f\"`.build_posterior(sample_with={sample_with}).`\"\n            )\n\n        samples = accept_reject_sample(\n            proposal=self.posterior_estimator,\n            accept_reject_fn=lambda theta: within_support(self.prior, theta),\n            num_samples=num_samples,\n            show_progress_bars=show_progress_bars,\n            max_sampling_batch_size=max_sampling_batch_size,\n            proposal_sampling_kwargs={\"context\": x},\n            alternative_method=\"build_posterior(..., sample_with='mcmc')\",\n        )[0]\n        return samples\n\n    def log_prob(\n        self,\n        theta: Tensor,\n        x: Optional[Tensor] = None,\n        norm_posterior: bool = True,\n        track_gradients: bool = False,\n        leakage_correction_params: Optional[dict] = None,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the log-probability of the posterior $p(\\theta|x)$.\n\n        Args:\n            theta: Parameters $\\theta$.\n            norm_posterior: Whether to enforce a normalized posterior density.\n                Renormalization of the posterior is useful when some\n                probability falls out or leaks out of the prescribed prior support.\n                The normalizing factor is calculated via rejection sampling, so if you\n                need speedier but unnormalized log posterior estimates set here\n                `norm_posterior=False`. The returned log posterior is set to\n                -\u221e outside of the prior support regardless of this setting.\n            track_gradients: Whether the returned tensor supports tracking gradients.\n                This can be helpful for e.g. sensitivity analysis, but increases memory\n                consumption.\n            leakage_correction_params: A `dict` of keyword arguments to override the\n                default values of `leakage_correction()`. Possible options are:\n                `num_rejection_samples`, `force_update`, `show_progress_bars`, and\n                `rejection_sampling_batch_size`.\n                These parameters only have an effect if `norm_posterior=True`.\n\n        Returns:\n            `(len(\u03b8),)`-shaped log posterior probability $\\log p(\\theta|x)$ for \u03b8 in the\n            support of the prior, -\u221e (corresponding to 0 probability) outside.\n        \"\"\"\n        x = self._x_else_default_x(x)\n\n        # TODO Train exited here, entered after sampling?\n        self.posterior_estimator.eval()\n\n        theta = ensure_theta_batched(torch.as_tensor(theta))\n        theta_repeated, x_repeated = match_theta_and_x_batch_shapes(theta, x)\n\n        with torch.set_grad_enabled(track_gradients):\n            # Evaluate on device, move back to cpu for comparison with prior.\n            unnorm_log_prob = self.posterior_estimator.log_prob(\n                theta_repeated, context=x_repeated\n            )\n\n            # Force probability to be zero outside prior support.\n            in_prior_support = within_support(self.prior, theta_repeated)\n\n            masked_log_prob = torch.where(\n                in_prior_support,\n                unnorm_log_prob,\n                torch.tensor(float(\"-inf\"), dtype=torch.float32, device=self._device),\n            )\n\n            if leakage_correction_params is None:\n                leakage_correction_params = dict()  # use defaults\n            log_factor = (\n                log(self.leakage_correction(x=x, **leakage_correction_params))\n                if norm_posterior\n                else 0\n            )\n\n            return masked_log_prob - log_factor\n\n    @torch.no_grad()\n    def leakage_correction(\n        self,\n        x: Tensor,\n        num_rejection_samples: int = 10_000,\n        force_update: bool = False,\n        show_progress_bars: bool = False,\n        rejection_sampling_batch_size: int = 10_000,\n    ) -&gt; Tensor:\n        r\"\"\"Return leakage correction factor for a leaky posterior density estimate.\n\n        The factor is estimated from the acceptance probability during rejection\n        sampling from the posterior.\n\n        This is to avoid re-estimating the acceptance probability from scratch\n        whenever `log_prob` is called and `norm_posterior=True`. Here, it\n        is estimated only once for `self.default_x` and saved for later. We\n        re-evaluate only whenever a new `x` is passed.\n\n        Arguments:\n            num_rejection_samples: Number of samples used to estimate correction factor.\n            show_progress_bars: Whether to show a progress bar during sampling.\n            rejection_sampling_batch_size: Batch size for rejection sampling.\n\n        Returns:\n            Saved or newly-estimated correction factor (as a scalar `Tensor`).\n        \"\"\"\n\n        def acceptance_at(x: Tensor) -&gt; Tensor:\n            return accept_reject_sample(\n                proposal=self.posterior_estimator,\n                accept_reject_fn=lambda theta: within_support(self.prior, theta),\n                num_samples=num_rejection_samples,\n                show_progress_bars=show_progress_bars,\n                sample_for_correction_factor=True,\n                max_sampling_batch_size=rejection_sampling_batch_size,\n                proposal_sampling_kwargs={\"context\": x},\n            )[1]\n\n        # Check if the provided x matches the default x (short-circuit on identity).\n        is_new_x = self.default_x is None or (\n            x is not self.default_x and (x != self.default_x).any()\n        )\n\n        not_saved_at_default_x = self._leakage_density_correction_factor is None\n\n        if is_new_x:  # Calculate at x; don't save.\n            return acceptance_at(x)\n        elif not_saved_at_default_x or force_update:  # Calculate at default_x; save.\n            assert self.default_x is not None\n            self._leakage_density_correction_factor = acceptance_at(self.default_x)\n\n        return self._leakage_density_correction_factor  # type: ignore\n\n    def map(\n        self,\n        x: Optional[Tensor] = None,\n        num_iter: int = 1_000,\n        num_to_optimize: int = 100,\n        learning_rate: float = 0.01,\n        init_method: Union[str, Tensor] = \"posterior\",\n        num_init_samples: int = 1_000,\n        save_best_every: int = 10,\n        show_progress_bars: bool = False,\n        force_update: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n        The method can be interrupted (Ctrl-C) when the user sees that the\n        log-probability converges. The best estimate will be saved in `self._map` and\n        can be accessed with `self.map()`. The MAP is obtained by running gradient\n        ascent from a given number of starting positions (samples from the posterior\n        with the highest log-probability). After the optimization is done, we select the\n        parameter set that has the highest log-probability after the optimization.\n\n        Warning: The default values used by this function are not well-tested. They\n        might require hand-tuning for the problem at hand.\n\n        For developers: if the prior is a `BoxUniform`, we carry out the optimization\n        in unbounded space and transform the result back into bounded space.\n\n        Args:\n            x: Deprecated - use `.set_default_x()` prior to `.map()`.\n            num_iter: Number of optimization steps that the algorithm takes\n                to find the MAP.\n            learning_rate: Learning rate of the optimizer.\n            init_method: How to select the starting parameters for the optimization. If\n                it is a string, it can be either [`posterior`, `prior`], which samples\n                the respective distribution `num_init_samples` times. If it is a\n                tensor, the tensor will be used as init locations.\n            num_init_samples: Draw this number of samples from the posterior and\n                evaluate the log-probability of all of them.\n            num_to_optimize: From the drawn `num_init_samples`, use the\n                `num_to_optimize` with highest log-probability as the initial points\n                for the optimization.\n            save_best_every: The best log-probability is computed, saved in the\n                `map`-attribute, and printed every `save_best_every`-th iteration.\n                Computing the best log-probability creates a significant overhead\n                (thus, the default is `10`.)\n            show_progress_bars: Whether to show a progressbar during sampling from the\n                posterior.\n            force_update: Whether to re-calculate the MAP when x is unchanged and\n                have a cached value.\n            log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n                {'norm_posterior': True} for SNPE.\n\n        Returns:\n            The MAP estimate.\n        \"\"\"\n        return super().map(\n            x=x,\n            num_iter=num_iter,\n            num_to_optimize=num_to_optimize,\n            learning_rate=learning_rate,\n            init_method=init_method,\n            num_init_samples=num_init_samples,\n            save_best_every=save_best_every,\n            show_progress_bars=show_progress_bars,\n            force_update=force_update,\n        )\n</code></pre> <p>             Bases: <code>NeuralPosterior</code></p> <p>Provides importance sampling to sample from the posterior. SNLE or SNRE train neural networks to approximate the likelihood(-ratios). <code>ImportanceSamplingPosterior</code> allows to estimate the posterior log-probability by estimating the normlalization constant with importance sampling. It also allows to perform importance sampling (with <code>.sample()</code>) and to draw approximate samples with sampling-importance-resampling (SIR) (with <code>.sir_sample()</code>)</p> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>class ImportanceSamplingPosterior(NeuralPosterior):\n    r\"\"\"Provides importance sampling to sample from the posterior.&lt;br/&gt;&lt;br/&gt;\n    SNLE or SNRE train neural networks to approximate the likelihood(-ratios).\n    `ImportanceSamplingPosterior` allows to estimate the posterior log-probability by\n    estimating the normlalization constant with importance sampling. It also allows to\n    perform importance sampling (with `.sample()`) and to draw approximate samples with\n    sampling-importance-resampling (SIR) (with `.sir_sample()`)\n    \"\"\"\n\n    def __init__(\n        self,\n        potential_fn: Callable,\n        proposal: Any,\n        theta_transform: Optional[TorchTransform] = None,\n        method: str = \"sir\",\n        oversampling_factor: int = 32,\n        max_sampling_batch_size: int = 10_000,\n        device: Optional[str] = None,\n        x_shape: Optional[torch.Size] = None,\n    ):\n        \"\"\"\n        Args:\n            potential_fn: The potential function from which to draw samples.\n            proposal: The proposal distribution.\n            theta_transform: Transformation that is applied to parameters. Is not used\n                during but only when calling `.map()`.\n            method: Either of [`sir`|`importance`]. This sets the behavior of the\n                `.sample()` method. With `sir`, approximate posterior samples are\n                generated with sampling importance resampling (SIR). With\n                `importance`, the `.sample()` method returns a tuple of samples and\n                corresponding importance weights.\n            oversampling_factor: Number of proposed samples from which only one is\n                selected based on its importance weight.\n            max_sampling_batch_size: The batch size of samples being drawn from the\n                proposal at every iteration.\n            device: Device on which to sample, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If\n                None, `potential_fn.device` is used.\n            x_shape: Shape of a single simulator output. If passed, it is used to check\n                the shape of the observed data and give a descriptive error.\n        \"\"\"\n        super().__init__(\n            potential_fn,\n            theta_transform=theta_transform,\n            device=device,\n            x_shape=x_shape,\n        )\n\n        self.proposal = proposal\n        self._normalization_constant = None\n        self.method = method\n\n        self.oversampling_factor = oversampling_factor\n        self.max_sampling_batch_size = max_sampling_batch_size\n\n        self._purpose = (\n            \"It provides sampling-importance resampling (SIR) to .sample() from the \"\n            \"posterior and can evaluate the _unnormalized_ posterior density with \"\n            \".log_prob().\"\n        )\n\n    def log_prob(\n        self,\n        theta: Tensor,\n        x: Optional[Tensor] = None,\n        track_gradients: bool = False,\n        normalization_constant_params: Optional[dict] = None,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the log-probability of theta under the posterior.\n\n        The normalization constant is estimated with importance sampling.\n\n        Args:\n            theta: Parameters $\\theta$.\n            track_gradients: Whether the returned tensor supports tracking gradients.\n                This can be helpful for e.g. sensitivity analysis, but increases memory\n                consumption.\n            normalization_constant_params: Parameters passed on to\n                `estimate_normalization_constant()`.\n\n        Returns:\n            `len($\\theta$)`-shaped log-probability.\n        \"\"\"\n        x = self._x_else_default_x(x)\n        self.potential_fn.set_x(x)\n\n        theta = ensure_theta_batched(torch.as_tensor(theta))\n\n        with torch.set_grad_enabled(track_gradients):\n            potential_values = self.potential_fn(\n                theta.to(self._device), track_gradients=track_gradients\n            )\n\n            if normalization_constant_params is None:\n                normalization_constant_params = dict()  # use defaults\n            normalization_constant = self.estimate_normalization_constant(\n                x, **normalization_constant_params\n            )\n\n            return (potential_values - torch.log(normalization_constant)).to(\n                self._device\n            )\n\n    @torch.no_grad()\n    def estimate_normalization_constant(\n        self, x: Tensor, num_samples: int = 10_000, force_update: bool = False\n    ) -&gt; Tensor:\n        \"\"\"Returns the normalization constant via importance sampling.\n\n        Args:\n            num_samples: Number of importance samples used for the estimate.\n            force_update: Whether to re-calculate the normlization constant when x is\n                unchanged and have a cached value.\n        \"\"\"\n        # Check if the provided x matches the default x (short-circuit on identity).\n        is_new_x = self.default_x is None or (\n            x is not self.default_x and (x != self.default_x).any()\n        )\n\n        not_saved_at_default_x = self._normalization_constant is None\n\n        if is_new_x:  # Calculate at x; don't save.\n            _, log_importance_weights = importance_sample(\n                self.potential_fn,\n                proposal=self.proposal,\n                num_samples=num_samples,\n            )\n            return torch.mean(torch.exp(log_importance_weights))\n        elif not_saved_at_default_x or force_update:  # Calculate at default_x; save.\n            assert self.default_x is not None\n            _, log_importance_weights = importance_sample(\n                self.potential_fn,\n                proposal=self.proposal,\n                num_samples=num_samples,\n            )\n            self._normalization_constant = torch.mean(torch.exp(log_importance_weights))\n\n        return self._normalization_constant.to(self._device)  # type: ignore\n\n    def sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        x: Optional[Tensor] = None,\n        oversampling_factor: int = 32,\n        max_sampling_batch_size: int = 10_000,\n        sample_with: Optional[str] = None,\n    ) -&gt; Union[Tensor, Tuple[Tensor, Tensor]]:\n        \"\"\"Return samples from the approximate posterior distribution.\n\n        Args:\n            sample_shape: _description_\n            x: _description_\n        \"\"\"\n        if sample_with is not None:\n            raise ValueError(\n                f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n                f\"`sample_with` is no longer supported. You have to rerun \"\n                f\"`.build_posterior(sample_with={sample_with}).`\"\n            )\n\n        self.potential_fn.set_x(self._x_else_default_x(x))\n\n        if self.method == \"sir\":\n            return self._sir_sample(\n                sample_shape,\n                oversampling_factor=oversampling_factor,\n                max_sampling_batch_size=max_sampling_batch_size,\n            )\n        elif self.method == \"importance\":\n            return self._importance_sample(sample_shape)\n        else:\n            raise NameError\n\n    def _importance_sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n    ) -&gt; Tuple[Tensor, Tensor]:\n        \"\"\"Returns samples from the proposal and log of their importance weights.\n\n        Args:\n            sample_shape: Desired shape of samples that are drawn from posterior.\n            sample_with: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n\n        Returns:\n            Samples and logarithm of corresponding importance weights.\n        \"\"\"\n        num_samples = torch.Size(sample_shape).numel()\n        samples, log_importance_weights = importance_sample(\n            self.potential_fn,\n            proposal=self.proposal,\n            num_samples=num_samples,\n        )\n\n        samples = samples.reshape((*sample_shape, -1)).to(self._device)\n        return samples, log_importance_weights.to(self._device)\n\n    def _sir_sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        oversampling_factor: int = 32,\n        max_sampling_batch_size: int = 10_000,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"Returns approximate samples from posterior $p(\\theta|x)$ via SIR.\n\n        Args:\n            sample_shape: Desired shape of samples that are drawn from posterior. If\n                sample_shape is multidimensional we simply draw `sample_shape.numel()`\n                samples and then reshape into the desired shape.\n            x: Observed data.\n            sample_with: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n            oversampling_factor: Number of proposed samples form which only one is\n                selected based on its importance weight.\n            max_sampling_batch_size: The batchsize of samples being drawn from\n                the proposal at every iteration. Used only in `sir_sample()`.\n            show_progress_bars: Whether to show sampling progress monitor.\n\n        Returns:\n            Samples from posterior.\n        \"\"\"\n        # Replace arguments that were not passed with their default.\n        oversampling_factor = (\n            self.oversampling_factor\n            if oversampling_factor is None\n            else oversampling_factor\n        )\n        max_sampling_batch_size = (\n            self.max_sampling_batch_size\n            if max_sampling_batch_size is None\n            else max_sampling_batch_size\n        )\n\n        num_samples = torch.Size(sample_shape).numel()\n        samples = sampling_importance_resampling(\n            self.potential_fn,\n            proposal=self.proposal,\n            num_samples=num_samples,\n            oversampling_factor=oversampling_factor,\n            show_progress_bars=show_progress_bars,\n            max_sampling_batch_size=max_sampling_batch_size,\n            device=self._device,\n        )\n\n        return samples.reshape((*sample_shape, -1)).to(self._device)\n\n    def map(\n        self,\n        x: Optional[Tensor] = None,\n        num_iter: int = 1_000,\n        num_to_optimize: int = 100,\n        learning_rate: float = 0.01,\n        init_method: Union[str, Tensor] = \"proposal\",\n        num_init_samples: int = 1_000,\n        save_best_every: int = 10,\n        show_progress_bars: bool = False,\n        force_update: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n        The method can be interrupted (Ctrl-C) when the user sees that the\n        log-probability converges. The best estimate will be saved in `self._map` and\n        can be accessed with `self.map()`. The MAP is obtained by running gradient\n        ascent from a given number of starting positions (samples from the posterior\n        with the highest log-probability). After the optimization is done, we select the\n        parameter set that has the highest log-probability after the optimization.\n\n        Warning: The default values used by this function are not well-tested. They\n        might require hand-tuning for the problem at hand.\n\n        For developers: if the prior is a `BoxUniform`, we carry out the optimization\n        in unbounded space and transform the result back into bounded space.\n\n        Args:\n            x: Deprecated - use `.set_default_x()` prior to `.map()`.\n            num_iter: Number of optimization steps that the algorithm takes\n                to find the MAP.\n            learning_rate: Learning rate of the optimizer.\n            init_method: How to select the starting parameters for the optimization. If\n                it is a string, it can be either [`posterior`, `prior`], which samples\n                the respective distribution `num_init_samples` times. If it is a\n                tensor, the tensor will be used as init locations.\n            num_init_samples: Draw this number of samples from the posterior and\n                evaluate the log-probability of all of them.\n            num_to_optimize: From the drawn `num_init_samples`, use the\n                `num_to_optimize` with highest log-probability as the initial points\n                for the optimization.\n            save_best_every: The best log-probability is computed, saved in the\n                `map`-attribute, and printed every `save_best_every`-th iteration.\n                Computing the best log-probability creates a significant overhead\n                (thus, the default is `10`.)\n            show_progress_bars: Whether to show a progressbar during sampling from the\n                posterior.\n            force_update: Whether to re-calculate the MAP when x is unchanged and\n                have a cached value.\n            log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n                {'norm_posterior': True} for SNPE.\n\n        Returns:\n            The MAP estimate.\n        \"\"\"\n        return super().map(\n            x=x,\n            num_iter=num_iter,\n            num_to_optimize=num_to_optimize,\n            learning_rate=learning_rate,\n            init_method=init_method,\n            num_init_samples=num_init_samples,\n            save_best_every=save_best_every,\n            show_progress_bars=show_progress_bars,\n            force_update=force_update,\n        )\n</code></pre> <p>             Bases: <code>NeuralPosterior</code></p> <p>Provides MCMC to sample from the posterior. SNLE or SNRE train neural networks to approximate the likelihood(-ratios). <code>MCMCPosterior</code> allows to sample from the posterior with MCMC.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>class MCMCPosterior(NeuralPosterior):\n    r\"\"\"Provides MCMC to sample from the posterior.&lt;br/&gt;&lt;br/&gt;\n    SNLE or SNRE train neural networks to approximate the likelihood(-ratios).\n    `MCMCPosterior` allows to sample from the posterior with MCMC.\n    \"\"\"\n\n    def __init__(\n        self,\n        potential_fn: Callable,\n        proposal: Any,\n        theta_transform: Optional[TorchTransform] = None,\n        method: str = \"slice_np\",\n        thin: int = 10,\n        warmup_steps: int = 10,\n        num_chains: int = 1,\n        init_strategy: str = \"resample\",\n        init_strategy_parameters: Dict[str, Any] = {},\n        init_strategy_num_candidates: Optional[int] = None,\n        num_workers: int = 1,\n        device: Optional[str] = None,\n        x_shape: Optional[torch.Size] = None,\n    ):\n        \"\"\"\n        Args:\n            potential_fn: The potential function from which to draw samples.\n            proposal: Proposal distribution that is used to initialize the MCMC chain.\n            theta_transform: Transformation that will be applied during sampling.\n                Allows to perform MCMC in unconstrained space.\n            method: Method used for MCMC sampling, one of `slice_np`,\n                `slice_np_vectorized`, `slice`, `hmc`, `nuts`. `slice_np` is a custom\n                numpy implementation of slice sampling. `slice_np_vectorized` is\n                identical to `slice_np`, but if `num_chains&gt;1`, the chains are\n                vectorized for `slice_np_vectorized` whereas they are run sequentially\n                for `slice_np`. The samplers `hmc`, `nuts` or `slice` sample with Pyro.\n            thin: The thinning factor for the chain.\n            warmup_steps: The initial number of samples to discard.\n            num_chains: The number of chains.\n            init_strategy: The initialisation strategy for chains; `proposal` will draw\n                init locations from `proposal`, whereas `sir` will use Sequential-\n                Importance-Resampling (SIR). SIR initially samples\n                `init_strategy_num_candidates` from the `proposal`, evaluates all of\n                them under the `potential_fn` and `proposal`, and then resamples the\n                initial locations with weights proportional to `exp(potential_fn -\n                proposal.log_prob`. `resample` is the same as `sir` but\n                uses `exp(potential_fn)` as weights.\n            init_strategy_parameters: Dictionary of keyword arguments passed to the\n                init strategy, e.g., for `init_strategy=sir` this could be\n                `num_candidate_samples`, i.e., the number of candidates to to find init\n                locations (internal default is `1000`), or `device`.\n            init_strategy_num_candidates: Number of candidates to to find init\n                 locations in `init_strategy=sir` (deprecated, use\n                 init_strategy_parameters instead).\n            num_workers: number of cpu cores used to parallelize mcmc\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n                `potential_fn.device` is used.\n            x_shape: Shape of a single simulator output. If passed, it is used to check\n                the shape of the observed data and give a descriptive error.\n        \"\"\"\n\n        super().__init__(\n            potential_fn,\n            theta_transform=theta_transform,\n            device=device,\n            x_shape=x_shape,\n        )\n\n        self.proposal = proposal\n        self.method = method\n        self.thin = thin\n        self.warmup_steps = warmup_steps\n        self.num_chains = num_chains\n        self.init_strategy = init_strategy\n        self.init_strategy_parameters = init_strategy_parameters\n        self.num_workers = num_workers\n        self._posterior_sampler = None\n        # Hardcode parameter name to reduce clutter kwargs.\n        self.param_name = \"theta\"\n\n        if init_strategy_num_candidates is not None:\n            warn(\n                \"\"\"Passing `init_strategy_num_candidates` is deprecated as of sbi\n                v0.19.0. Instead, use e.g.,\n                `init_strategy_parameters={\"num_candidate_samples\": 1000}`\"\"\"\n            )\n            self.init_strategy_parameters[\n                \"num_candidate_samples\"\n            ] = init_strategy_num_candidates\n\n        self.potential_ = self._prepare_potential(method)\n\n        self._purpose = (\n            \"It provides MCMC to .sample() from the posterior and \"\n            \"can evaluate the _unnormalized_ posterior density with .log_prob().\"\n        )\n\n    @property\n    def mcmc_method(self) -&gt; str:\n        \"\"\"Returns MCMC method.\"\"\"\n        return self._mcmc_method\n\n    @mcmc_method.setter\n    def mcmc_method(self, method: str) -&gt; None:\n        \"\"\"See `set_mcmc_method`.\"\"\"\n        self.set_mcmc_method(method)\n\n    @property\n    def posterior_sampler(self):\n        \"\"\"Returns sampler created by `sample`.\"\"\"\n        return self._posterior_sampler\n\n    def set_mcmc_method(self, method: str) -&gt; \"NeuralPosterior\":\n        \"\"\"Sets sampling method to for MCMC and returns `NeuralPosterior`.\n\n        Args:\n            method: Method to use.\n\n        Returns:\n            `NeuralPosterior` for chainable calls.\n        \"\"\"\n        self._mcmc_method = method\n        return self\n\n    def log_prob(\n        self, theta: Tensor, x: Optional[Tensor] = None, track_gradients: bool = False\n    ) -&gt; Tensor:\n        r\"\"\"Returns the log-probability of theta under the posterior.\n\n        Args:\n            theta: Parameters $\\theta$.\n            track_gradients: Whether the returned tensor supports tracking gradients.\n                This can be helpful for e.g. sensitivity analysis, but increases memory\n                consumption.\n\n        Returns:\n            `len($\\theta$)`-shaped log-probability.\n        \"\"\"\n        warn(\n            \"\"\"`.log_prob()` is deprecated for methods that can only evaluate the\n            log-probability up to a normalizing constant. Use `.potential()` instead.\"\"\"\n        )\n        warn(\"The log-probability is unnormalized!\")\n\n        self.potential_fn.set_x(self._x_else_default_x(x))\n\n        theta = ensure_theta_batched(torch.as_tensor(theta))\n        return self.potential_fn(\n            theta.to(self._device), track_gradients=track_gradients\n        )\n\n    def sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        x: Optional[Tensor] = None,\n        method: Optional[str] = None,\n        thin: Optional[int] = None,\n        warmup_steps: Optional[int] = None,\n        num_chains: Optional[int] = None,\n        init_strategy: Optional[str] = None,\n        init_strategy_parameters: Optional[Dict[str, Any]] = None,\n        init_strategy_num_candidates: Optional[int] = None,\n        mcmc_parameters: Dict = {},\n        mcmc_method: Optional[str] = None,\n        sample_with: Optional[str] = None,\n        num_workers: Optional[int] = None,\n        show_progress_bars: bool = True,\n    ) -&gt; Tensor:\n        r\"\"\"Return samples from posterior distribution $p(\\theta|x)$ with MCMC.\n\n        Check the `__init__()` method for a description of all arguments as well as\n        their default values.\n\n        Args:\n            sample_shape: Desired shape of samples that are drawn from posterior. If\n                sample_shape is multidimensional we simply draw `sample_shape.numel()`\n                samples and then reshape into the desired shape.\n            mcmc_parameters: Dictionary that is passed only to support the API of\n                `sbi` v0.17.2 or older.\n            mcmc_method: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. Please use `method` instead.\n            sample_with: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n            show_progress_bars: Whether to show sampling progress monitor.\n\n        Returns:\n            Samples from posterior.\n        \"\"\"\n        self.potential_fn.set_x(self._x_else_default_x(x))\n\n        # Replace arguments that were not passed with their default.\n        method = self.method if method is None else method\n        thin = self.thin if thin is None else thin\n        warmup_steps = self.warmup_steps if warmup_steps is None else warmup_steps\n        num_chains = self.num_chains if num_chains is None else num_chains\n        init_strategy = self.init_strategy if init_strategy is None else init_strategy\n        num_workers = self.num_workers if num_workers is None else num_workers\n        init_strategy_parameters = (\n            self.init_strategy_parameters\n            if init_strategy_parameters is None\n            else init_strategy_parameters\n        )\n        if init_strategy_num_candidates is not None:\n            warn(\n                \"\"\"Passing `init_strategy_num_candidates` is deprecated as of sbi\n                v0.19.0. Instead, use e.g.,\n                `init_strategy_parameters={\"num_candidate_samples\": 1000}`\"\"\"\n            )\n            self.init_strategy_parameters[\n                \"num_candidate_samples\"\n            ] = init_strategy_num_candidates\n        if sample_with is not None:\n            raise ValueError(\n                f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n                f\"`sample_with` is no longer supported. You have to rerun \"\n                f\"`.build_posterior(sample_with={sample_with}).`\"\n            )\n        if mcmc_method is not None:\n            warn(\n                \"You passed `mcmc_method` to `.sample()`. As of sbi v0.18.0, this \"\n                \"is deprecated and will be removed in a future release. Use `method` \"\n                \"instead of `mcmc_method`.\"\n            )\n            method = mcmc_method\n        if mcmc_parameters:\n            warn(\n                \"You passed `mcmc_parameters` to `.sample()`. As of sbi v0.18.0, this \"\n                \"is deprecated and will be removed in a future release. Instead, pass \"\n                \"the variable to `.sample()` directly, e.g. \"\n                \"`posterior.sample((1,), num_chains=5)`.\"\n            )\n        # The following lines are only for backwards compatibility with sbi v0.17.2 or\n        # older.\n        m_p = mcmc_parameters  # define to shorten the variable name\n        method = _maybe_use_dict_entry(method, \"mcmc_method\", m_p)\n        thin = _maybe_use_dict_entry(thin, \"thin\", m_p)\n        warmup_steps = _maybe_use_dict_entry(warmup_steps, \"warmup_steps\", m_p)\n        num_chains = _maybe_use_dict_entry(num_chains, \"num_chains\", m_p)\n        init_strategy = _maybe_use_dict_entry(init_strategy, \"init_strategy\", m_p)\n        self.potential_ = self._prepare_potential(method)  # type: ignore\n\n        initial_params = self._get_initial_params(\n            init_strategy,  # type: ignore\n            num_chains,  # type: ignore\n            num_workers,\n            show_progress_bars,\n            **init_strategy_parameters,\n        )\n        num_samples = torch.Size(sample_shape).numel()\n\n        track_gradients = method in (\"hmc\", \"nuts\")\n        with torch.set_grad_enabled(track_gradients):\n            if method in (\"slice_np\", \"slice_np_vectorized\"):\n                transformed_samples = self._slice_np_mcmc(\n                    num_samples=num_samples,\n                    potential_function=self.potential_,\n                    initial_params=initial_params,\n                    thin=thin,  # type: ignore\n                    warmup_steps=warmup_steps,  # type: ignore\n                    vectorized=(method == \"slice_np_vectorized\"),\n                    num_workers=num_workers,\n                    show_progress_bars=show_progress_bars,\n                )\n            elif method in (\"hmc\", \"nuts\", \"slice\"):\n                transformed_samples = self._pyro_mcmc(\n                    num_samples=num_samples,\n                    potential_function=self.potential_,\n                    initial_params=initial_params,\n                    mcmc_method=method,  # type: ignore\n                    thin=thin,  # type: ignore\n                    warmup_steps=warmup_steps,  # type: ignore\n                    num_chains=num_chains,\n                    show_progress_bars=show_progress_bars,\n                )\n            else:\n                raise NameError\n\n        samples = self.theta_transform.inv(transformed_samples)\n\n        return samples.reshape((*sample_shape, -1))  # type: ignore\n\n    def _build_mcmc_init_fn(\n        self,\n        proposal: Any,\n        potential_fn: Callable,\n        transform: torch_tf.Transform,\n        init_strategy: str,\n        **kwargs,\n    ) -&gt; Callable:\n        \"\"\"Return function that, when called, creates an initial parameter set for MCMC.\n\n        Args:\n            proposal: Proposal distribution.\n            potential_fn: Potential function that the candidate samples are weighted\n                with.\n            init_strategy: Specifies the initialization method. Either of\n                [`proposal`|`sir`|`resample`|`latest_sample`].\n            kwargs: Passed on to init function. This way, init specific keywords can\n                be set through `mcmc_parameters`. Unused arguments will be absorbed by\n                the intitialization method.\n\n        Returns: Initialization function.\n        \"\"\"\n        if init_strategy == \"proposal\" or init_strategy == \"prior\":\n            if init_strategy == \"prior\":\n                warn(\n                    \"You set `init_strategy=prior`. As of sbi v0.18.0, this is \"\n                    \"deprecated and it will be removed in a future release. Use \"\n                    \"`init_strategy=proposal` instead.\"\n                )\n            return lambda: proposal_init(proposal, transform=transform, **kwargs)\n        elif init_strategy == \"sir\":\n            warn(\n                \"As of sbi v0.19.0, the behavior of the SIR initialization for MCMC \"\n                \"has changed. If you wish to restore the behavior of sbi v0.18.0, set \"\n                \"`init_strategy='resample'.`\"\n            )\n            return lambda: sir_init(\n                proposal, potential_fn, transform=transform, **kwargs\n            )\n        elif init_strategy == \"resample\":\n            return lambda: resample_given_potential_fn(\n                proposal, potential_fn, transform=transform, **kwargs\n            )\n        elif init_strategy == \"latest_sample\":\n            latest_sample = IterateParameters(self._mcmc_init_params, **kwargs)\n            return latest_sample\n        else:\n            raise NotImplementedError\n\n    def _get_initial_params(\n        self,\n        init_strategy: str,\n        num_chains: int,\n        num_workers: int,\n        show_progress_bars: bool,\n        **kwargs,\n    ) -&gt; Tensor:\n        \"\"\"Return initial parameters for MCMC obtained with given init strategy.\n\n        Parallelizes across CPU cores only for SIR.\n\n        Args:\n            init_strategy: Specifies the initialization method. Either of\n                [`proposal`|`sir`|`resample`|`latest_sample`].\n            num_chains: number of MCMC chains, generates initial params for each\n            num_workers: number of CPU cores for parallization\n            show_progress_bars: whether to show progress bars for SIR init\n            kwargs: Passed on to `_build_mcmc_init_fn`.\n\n        Returns:\n            Tensor: initial parameters, one for each chain\n        \"\"\"\n        # Build init function\n        init_fn = self._build_mcmc_init_fn(\n            self.proposal,\n            self.potential_fn,\n            transform=self.theta_transform,\n            init_strategy=init_strategy,  # type: ignore\n            **kwargs,\n        )\n\n        # Parallelize inits for resampling only.\n        if num_workers &gt; 1 and (init_strategy == \"resample\" or init_strategy == \"sir\"):\n\n            def seeded_init_fn(seed):\n                torch.manual_seed(seed)\n                return init_fn()\n\n            seeds = torch.randint(high=2**31, size=(num_chains,))\n\n            # Generate initial params parallelized over num_workers.\n            with tqdm_joblib(\n                tqdm(\n                    range(num_chains),  # type: ignore\n                    disable=not show_progress_bars,\n                    desc=f\"\"\"Generating {num_chains} MCMC inits with {num_workers}\n                         workers.\"\"\",\n                    total=num_chains,\n                )\n            ):\n                initial_params = torch.cat(\n                    Parallel(n_jobs=num_workers)(\n                        delayed(seeded_init_fn)(seed) for seed in seeds\n                    )\n                )\n        else:\n            initial_params = torch.cat(\n                [init_fn() for _ in range(num_chains)]  # type: ignore\n            )\n\n        return initial_params\n\n    def _slice_np_mcmc(\n        self,\n        num_samples: int,\n        potential_function: Callable,\n        initial_params: Tensor,\n        thin: int,\n        warmup_steps: int,\n        vectorized: bool = False,\n        num_workers: int = 1,\n        init_width: Union[float, ndarray] = 0.01,\n        show_progress_bars: bool = True,\n    ) -&gt; Tensor:\n        \"\"\"Custom implementation of slice sampling using Numpy.\n\n        Args:\n            num_samples: Desired number of samples.\n            potential_function: A callable **class**.\n            initial_params: Initial parameters for MCMC chain.\n            thin: Thinning (subsampling) factor.\n            warmup_steps: Initial number of samples to discard.\n            vectorized: Whether to use a vectorized implementation of the Slice sampler.\n            num_workers: Number of CPU cores to use.\n            init_width: Inital width of brackets.\n            show_progress_bars: Whether to show a progressbar during sampling;\n                can only be turned off for vectorized sampler.\n\n        Returns:\n            Tensor of shape (num_samples, shape_of_single_theta).\n        \"\"\"\n\n        num_chains, dim_samples = initial_params.shape\n\n        if not vectorized:\n            SliceSamplerMultiChain = SliceSamplerSerial\n        else:\n            SliceSamplerMultiChain = SliceSamplerVectorized\n\n        posterior_sampler = SliceSamplerMultiChain(\n            init_params=tensor2numpy(initial_params),\n            log_prob_fn=potential_function,\n            num_chains=num_chains,\n            thin=thin,\n            verbose=show_progress_bars,\n            num_workers=num_workers,\n            init_width=init_width,\n        )\n        warmup_ = warmup_steps * thin\n        num_samples_ = ceil((num_samples * thin) / num_chains)\n        # Run mcmc including warmup\n        samples = posterior_sampler.run(warmup_ + num_samples_)\n        samples = samples[:, warmup_steps:, :]  # discard warmup steps\n        samples = torch.from_numpy(samples)  # chains x samples x dim\n\n        # Save posterior sampler.\n        self._posterior_sampler = posterior_sampler\n\n        # Save sample as potential next init (if init_strategy == 'latest_sample').\n        self._mcmc_init_params = samples[:, -1, :].reshape(num_chains, dim_samples)\n\n        # Collect samples from all chains.\n        samples = samples.reshape(-1, dim_samples)[:num_samples, :]\n        assert samples.shape[0] == num_samples\n\n        return samples.type(torch.float32).to(self._device)\n\n    def _pyro_mcmc(\n        self,\n        num_samples: int,\n        potential_function: Callable,\n        initial_params: Tensor,\n        mcmc_method: str = \"slice\",\n        thin: int = 10,\n        warmup_steps: int = 200,\n        num_chains: Optional[int] = 1,\n        show_progress_bars: bool = True,\n    ) -&gt; Tensor:\n        r\"\"\"Return samples obtained using Pyro HMC, NUTS for slice kernels.\n\n        Args:\n            num_samples: Desired number of samples.\n            potential_function: A callable **class**. A class, but not a function,\n                is picklable for Pyro MCMC to use it across chains in parallel,\n                even when the potential function requires evaluating a neural network.\n            mcmc_method: One of `hmc`, `nuts` or `slice`.\n            thin: Thinning (subsampling) factor.\n            warmup_steps: Initial number of samples to discard.\n            num_chains: Whether to sample in parallel. If None, use all but one CPU.\n            show_progress_bars: Whether to show a progressbar during sampling.\n\n        Returns:\n            Tensor of shape (num_samples, shape_of_single_theta).\n        \"\"\"\n        num_chains = mp.cpu_count() - 1 if num_chains is None else num_chains\n\n        kernels = dict(slice=Slice, hmc=HMC, nuts=NUTS)\n\n        sampler = MCMC(\n            kernel=kernels[mcmc_method](potential_fn=potential_function),\n            num_samples=(thin * num_samples) // num_chains + num_chains,\n            warmup_steps=warmup_steps,\n            initial_params={self.param_name: initial_params},\n            num_chains=num_chains,\n            mp_context=\"spawn\",\n            disable_progbar=not show_progress_bars,\n            transforms={},\n        )\n        sampler.run()\n        samples = next(iter(sampler.get_samples().values())).reshape(\n            -1, initial_params.shape[1]  # .shape[1] = dim of theta\n        )\n\n        # Save posterior sampler.\n        self._posterior_sampler = sampler\n\n        samples = samples[::thin][:num_samples]\n        assert samples.shape[0] == num_samples\n\n        return samples.detach()\n\n    def _prepare_potential(self, method: str) -&gt; Callable:\n        \"\"\"Combines potential and transform and takes care of gradients and pyro.\n\n        Args:\n            method: Which MCMC method to use.\n\n        Returns:\n            A potential function that is ready to be used in MCMC.\n        \"\"\"\n        if method == \"slice\":\n            track_gradients = False\n            pyro = True\n        elif method in (\"hmc\", \"nuts\"):\n            track_gradients = True\n            pyro = True\n        elif \"slice_np\" in method:\n            track_gradients = False\n            pyro = False\n        else:\n            raise NotImplementedError\n\n        prepared_potential = partial(\n            transformed_potential,\n            potential_fn=self.potential_fn,\n            theta_transform=self.theta_transform,\n            device=self._device,\n            track_gradients=track_gradients,\n        )\n        if pyro:\n            prepared_potential = partial(\n                pyro_potential_wrapper, potential=prepared_potential\n            )\n\n        return prepared_potential\n\n    def map(\n        self,\n        x: Optional[Tensor] = None,\n        num_iter: int = 1_000,\n        num_to_optimize: int = 100,\n        learning_rate: float = 0.01,\n        init_method: Union[str, Tensor] = \"proposal\",\n        num_init_samples: int = 1_000,\n        save_best_every: int = 10,\n        show_progress_bars: bool = False,\n        force_update: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n        The method can be interrupted (Ctrl-C) when the user sees that the\n        log-probability converges. The best estimate will be saved in `self._map` and\n        can be accessed with `self.map()`. The MAP is obtained by running gradient\n        ascent from a given number of starting positions (samples from the posterior\n        with the highest log-probability). After the optimization is done, we select the\n        parameter set that has the highest log-probability after the optimization.\n\n        Warning: The default values used by this function are not well-tested. They\n        might require hand-tuning for the problem at hand.\n\n        For developers: if the prior is a `BoxUniform`, we carry out the optimization\n        in unbounded space and transform the result back into bounded space.\n\n        Args:\n            x: Deprecated - use `.set_default_x()` prior to `.map()`.\n            num_iter: Number of optimization steps that the algorithm takes\n                to find the MAP.\n            learning_rate: Learning rate of the optimizer.\n            init_method: How to select the starting parameters for the optimization. If\n                it is a string, it can be either [`posterior`, `prior`], which samples\n                the respective distribution `num_init_samples` times. If it is a\n                tensor, the tensor will be used as init locations.\n            num_init_samples: Draw this number of samples from the posterior and\n                evaluate the log-probability of all of them.\n            num_to_optimize: From the drawn `num_init_samples`, use the\n                `num_to_optimize` with highest log-probability as the initial points\n                for the optimization.\n            save_best_every: The best log-probability is computed, saved in the\n                `map`-attribute, and printed every `save_best_every`-th iteration.\n                Computing the best log-probability creates a significant overhead\n                (thus, the default is `10`.)\n            show_progress_bars: Whether to show a progressbar during sampling from\n                the posterior.\n            force_update: Whether to re-calculate the MAP when x is unchanged and\n                have a cached value.\n            log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n                {'norm_posterior': True} for SNPE.\n\n        Returns:\n            The MAP estimate.\n        \"\"\"\n        return super().map(\n            x=x,\n            num_iter=num_iter,\n            num_to_optimize=num_to_optimize,\n            learning_rate=learning_rate,\n            init_method=init_method,\n            num_init_samples=num_init_samples,\n            save_best_every=save_best_every,\n            show_progress_bars=show_progress_bars,\n            force_update=force_update,\n        )\n\n    def get_arviz_inference_data(self) -&gt; InferenceData:\n        \"\"\"Returns arviz InferenceData object constructed most recent samples.\n\n        Note: the InferenceData is constructed using the posterior samples generated in\n        most recent call to `.sample(...)`.\n\n        For Pyro HMC and NUTS kernels InferenceData will contain diagnostics, for Pyro\n        Slice or sbi slice sampling samples, only the samples are added.\n\n        Returns:\n            inference_data: Arviz InferenceData object.\n        \"\"\"\n        assert (\n            self._posterior_sampler is not None\n        ), \"\"\"No samples have been generated, call .sample() first.\"\"\"\n\n        sampler: Union[\n            MCMC, SliceSamplerSerial, SliceSamplerVectorized\n        ] = self._posterior_sampler\n\n        # If Pyro sampler and samples not transformed, use arviz' from_pyro.\n        # Exclude 'slice' kernel as it lacks the 'divergence' diagnostics key.\n        if isinstance(self._posterior_sampler, (HMC, NUTS)) and isinstance(\n            self.theta_transform, torch_tf.IndependentTransform\n        ):\n            inference_data = az.from_pyro(sampler)\n\n        # otherwise get samples from sampler and transform to original space.\n        else:\n            transformed_samples = sampler.get_samples(group_by_chain=True)\n            # Pyro samplers returns dicts, get values.\n            if isinstance(transformed_samples, Dict):\n                # popitem gets last items, [1] get the values as tensor.\n                transformed_samples = transformed_samples.popitem()[1]\n            # Our slice samplers return numpy arrays.\n            elif isinstance(transformed_samples, ndarray):\n                transformed_samples = torch.from_numpy(transformed_samples).type(\n                    torch.float32\n                )\n            # For MultipleIndependent priors transforms first dim must be batch dim.\n            # thus, reshape back and forth to have batch dim in front.\n            samples_shape = transformed_samples.shape\n            samples = self.theta_transform.inv(  # type: ignore\n                transformed_samples.reshape(-1, samples_shape[-1])\n            ).reshape(  # type: ignore\n                *samples_shape\n            )\n\n            inference_data = az.convert_to_inference_data(\n                {f\"{self.param_name}\": samples}\n            )\n\n        return inference_data\n</code></pre> <p>             Bases: <code>NeuralPosterior</code></p> <p>Provides rejection sampling to sample from the posterior. SNLE or SNRE train neural networks to approximate the likelihood(-ratios). <code>RejectionPosterior</code> allows to sample from the posterior with rejection sampling.</p> Source code in <code>sbi/inference/posteriors/rejection_posterior.py</code> <pre><code>class RejectionPosterior(NeuralPosterior):\n    r\"\"\"Provides rejection sampling to sample from the posterior.&lt;br/&gt;&lt;br/&gt;\n    SNLE or SNRE train neural networks to approximate the likelihood(-ratios).\n    `RejectionPosterior` allows to sample from the posterior with rejection sampling.\n    \"\"\"\n\n    def __init__(\n        self,\n        potential_fn: Callable,\n        proposal: Any,\n        theta_transform: Optional[TorchTransform] = None,\n        max_sampling_batch_size: int = 10_000,\n        num_samples_to_find_max: int = 10_000,\n        num_iter_to_find_max: int = 100,\n        m: float = 1.2,\n        device: Optional[str] = None,\n        x_shape: Optional[torch.Size] = None,\n    ):\n        \"\"\"\n        Args:\n            potential_fn: The potential function from which to draw samples.\n            proposal: The proposal distribution.\n            theta_transform: Transformation that is applied to parameters. Is not used\n                during but only when calling `.map()`.\n            max_sampling_batch_size: The batchsize of samples being drawn from\n                the proposal at every iteration.\n            num_samples_to_find_max: The number of samples that are used to find the\n                maximum of the `potential_fn / proposal` ratio.\n            num_iter_to_find_max: The number of gradient ascent iterations to find the\n                maximum of the `potential_fn / proposal` ratio.\n            m: Multiplier to the `potential_fn / proposal` ratio.\n            device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n                `potential_fn.device` is used.\n            x_shape: Shape of a single simulator output. If passed, it is used to check\n                the shape of the observed data and give a descriptive error.\n        \"\"\"\n        super().__init__(\n            potential_fn,\n            theta_transform=theta_transform,\n            device=device,\n            x_shape=x_shape,\n        )\n\n        self.proposal = proposal\n        self.max_sampling_batch_size = max_sampling_batch_size\n        self.num_samples_to_find_max = num_samples_to_find_max\n        self.num_iter_to_find_max = num_iter_to_find_max\n        self.m = m\n\n        self._purpose = (\n            \"It provides rejection sampling to .sample() from the posterior and \"\n            \"can evaluate the _unnormalized_ posterior density with .log_prob().\"\n        )\n\n    def log_prob(\n        self, theta: Tensor, x: Optional[Tensor] = None, track_gradients: bool = False\n    ) -&gt; Tensor:\n        r\"\"\"Returns the log-probability of theta under the posterior.\n\n        Args:\n            theta: Parameters $\\theta$.\n            track_gradients: Whether the returned tensor supports tracking gradients.\n                This can be helpful for e.g. sensitivity analysis, but increases memory\n                consumption.\n\n        Returns:\n            `len($\\theta$)`-shaped log-probability.\n        \"\"\"\n        warn(\n            \"`.log_prob()` is deprecated for methods that can only evaluate the log-probability up to a normalizing constant. Use `.potential()` instead.\"\n        )\n        warn(\"The log-probability is unnormalized!\")\n\n        self.potential_fn.set_x(self._x_else_default_x(x))\n\n        theta = ensure_theta_batched(torch.as_tensor(theta))\n        return self.potential_fn(\n            theta.to(self._device), track_gradients=track_gradients\n        )\n\n    def sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        x: Optional[Tensor] = None,\n        max_sampling_batch_size: Optional[int] = None,\n        num_samples_to_find_max: Optional[int] = None,\n        num_iter_to_find_max: Optional[int] = None,\n        m: Optional[float] = None,\n        sample_with: Optional[str] = None,\n        show_progress_bars: bool = True,\n    ):\n        r\"\"\"Return samples from posterior $p(\\theta|x)$ via rejection sampling.\n\n        Args:\n            sample_shape: Desired shape of samples that are drawn from posterior. If\n                sample_shape is multidimensional we simply draw `sample_shape.numel()`\n                samples and then reshape into the desired shape.\n            sample_with: This argument only exists to keep backward-compatibility with\n                `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n            show_progress_bars: Whether to show sampling progress monitor.\n\n        Returns:\n            Samples from posterior.\n        \"\"\"\n        num_samples = torch.Size(sample_shape).numel()\n        self.potential_fn.set_x(self._x_else_default_x(x))\n\n        potential = partial(self.potential_fn, track_gradients=True)\n\n        if sample_with is not None:\n            raise ValueError(\n                f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n                f\"`sample_with` is no longer supported. You have to rerun \"\n                f\"`.build_posterior(sample_with={sample_with}).`\"\n            )\n        # Replace arguments that were not passed with their default.\n        max_sampling_batch_size = (\n            self.max_sampling_batch_size\n            if max_sampling_batch_size is None\n            else max_sampling_batch_size\n        )\n        num_samples_to_find_max = (\n            self.num_samples_to_find_max\n            if num_samples_to_find_max is None\n            else num_samples_to_find_max\n        )\n        num_iter_to_find_max = (\n            self.num_iter_to_find_max\n            if num_iter_to_find_max is None\n            else num_iter_to_find_max\n        )\n        m = self.m if m is None else m\n\n        samples, _ = rejection_sample(\n            potential,\n            proposal=self.proposal,\n            num_samples=num_samples,\n            show_progress_bars=show_progress_bars,\n            warn_acceptance=0.01,\n            max_sampling_batch_size=max_sampling_batch_size,\n            num_samples_to_find_max=num_samples_to_find_max,\n            num_iter_to_find_max=num_iter_to_find_max,\n            m=m,\n            device=self._device,\n        )\n\n        return samples.reshape((*sample_shape, -1))\n\n    def map(\n        self,\n        x: Optional[Tensor] = None,\n        num_iter: int = 1_000,\n        num_to_optimize: int = 100,\n        learning_rate: float = 0.01,\n        init_method: Union[str, Tensor] = \"proposal\",\n        num_init_samples: int = 1_000,\n        save_best_every: int = 10,\n        show_progress_bars: bool = False,\n        force_update: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n        The method can be interrupted (Ctrl-C) when the user sees that the\n        log-probability converges. The best estimate will be saved in `self._map` and\n        can be accessed with `self.map()`. The MAP is obtained by running gradient\n        ascent from a given number of starting positions (samples from the posterior\n        with the highest log-probability). After the optimization is done, we select the\n        parameter set that has the highest log-probability after the optimization.\n\n        Warning: The default values used by this function are not well-tested. They\n        might require hand-tuning for the problem at hand.\n\n        For developers: if the prior is a `BoxUniform`, we carry out the optimization\n        in unbounded space and transform the result back into bounded space.\n\n        Args:\n            x: Deprecated - use `.set_default_x()` prior to `.map()`.\n            num_iter: Number of optimization steps that the algorithm takes\n                to find the MAP.\n            learning_rate: Learning rate of the optimizer.\n            init_method: How to select the starting parameters for the optimization. If\n                it is a string, it can be either [`posterior`, `prior`], which samples\n                the respective distribution `num_init_samples` times. If it is a\n                tensor, the tensor will be used as init locations.\n            num_init_samples: Draw this number of samples from the posterior and\n                evaluate the log-probability of all of them.\n            num_to_optimize: From the drawn `num_init_samples`, use the\n                `num_to_optimize` with highest log-probability as the initial points\n                for the optimization.\n            save_best_every: The best log-probability is computed, saved in the\n                `map`-attribute, and printed every `save_best_every`-th iteration.\n                Computing the best log-probability creates a significant overhead\n                (thus, the default is `10`.)\n            show_progress_bars: Whether to show a progressbar during sampling from\n                the posterior.\n            force_update: Whether to re-calculate the MAP when x is unchanged and\n                have a cached value.\n            log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n                {'norm_posterior': True} for SNPE.\n\n        Returns:\n            The MAP estimate.\n        \"\"\"\n        return super().map(\n            x=x,\n            num_iter=num_iter,\n            num_to_optimize=num_to_optimize,\n            learning_rate=learning_rate,\n            init_method=init_method,\n            num_init_samples=num_init_samples,\n            save_best_every=save_best_every,\n            show_progress_bars=show_progress_bars,\n            force_update=force_update,\n        )\n</code></pre> <p>             Bases: <code>NeuralPosterior</code></p> <p>Provides VI (Variational Inference) to sample from the posterior. SNLE or SNRE train neural networks to approximate the likelihood(-ratios). <code>VIPosterior</code> allows to learn a tractable variational posterior \\(q(\\theta)\\) which approximates the true posterior \\(p(\\theta|x_o)\\). After this second training stage, we can produce approximate posterior samples, by just sampling from q with no additional cost. For additional information see [1] and [2]. References: [1] Variational methods for simulation-based inference, Manuel Gl\u00f6ckler, Michael Deistler, Jakob Macke, 2022, https://openreview.net/forum?id=kZ0UYdhqkNY [2] Sequential Neural Posterior and Likelihood Approximation, Samuel Wiqvist, Jes Frellsen, Umberto Picchini, 2021, https://arxiv.org/abs/2102.06522</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>class VIPosterior(NeuralPosterior):\n    r\"\"\"Provides VI (Variational Inference) to sample from the posterior.&lt;br/&gt;&lt;br/&gt;\n    SNLE or SNRE train neural networks to approximate the likelihood(-ratios).\n    `VIPosterior` allows to learn a tractable variational posterior $q(\\theta)$ which\n    approximates the true posterior $p(\\theta|x_o)$. After this second training stage,\n    we can produce approximate posterior samples, by just sampling from q with no\n    additional cost. For additional information see [1] and [2].&lt;br/&gt;&lt;br/&gt;\n    References:&lt;br/&gt;\n    [1] Variational methods for simulation-based inference, Manuel Gl\u00f6ckler, Michael\n    Deistler, Jakob Macke, 2022, https://openreview.net/forum?id=kZ0UYdhqkNY&lt;br/&gt;\n    [2] Sequential Neural Posterior and Likelihood Approximation, Samuel Wiqvist, Jes\n    Frellsen, Umberto Picchini, 2021, https://arxiv.org/abs/2102.06522\n    \"\"\"\n\n    def __init__(\n        self,\n        potential_fn: Callable,\n        prior: Optional[TorchDistribution] = None,\n        q: Union[str, PyroTransformedDistribution, \"VIPosterior\", Callable] = \"maf\",\n        theta_transform: Optional[TorchTransform] = None,\n        vi_method: str = \"rKL\",\n        device: str = \"cpu\",\n        x_shape: Optional[torch.Size] = None,\n        parameters: Iterable = [],\n        modules: Iterable = [],\n    ):\n        \"\"\"\n        Args:\n            potential_fn: The potential function from which to draw samples.\n            prior: This is the prior distribution. Note that this is only\n                used to check/construct the variational distribution or within some\n                quality metrics. Please make sure that this matches with the prior\n                within the potential_fn. If `None` is given, we will try to infer it\n                from potential_fn or q, if this fails we raise an Error.\n            q: Variational distribution, either string, `TransformedDistribution`, or a\n                `VIPosterior` object. This specifies a parametric class of distribution\n                over which the best possible posterior approximation is searched. For\n                string input, we currently support [nsf, scf, maf, mcf, gaussian,\n                gaussian_diag]. You can also specify your own variational family by\n                passing a pyro `TransformedDistribution`.\n                Additionally, we allow a `Callable`, which allows you the pass a\n                `builder` function, which if called returns a distribution. This may be\n                useful for setting the hyperparameters e.g. `num_transfroms` within the\n                `get_flow_builder` method specifying the number of transformations\n                within a normalizing flow. If q is already a `VIPosterior`, then the\n                arguments will be copied from it (relevant for multi-round training).\n            theta_transform: Maps form prior support to unconstrained space. The\n                inverse is used here to ensure that the posterior support is equal to\n                that of the prior.\n            vi_method: This specifies the variational methods which are used to fit q to\n                the posterior. We currently support [rKL, fKL, IW, alpha]. Note that\n                some of the divergences are `mode seeking` i.e. they underestimate\n                variance and collapse on multimodal targets (`rKL`, `alpha` for alpha &gt;\n                1) and some are `mass covering` i.e. they overestimate variance but\n                typically cover all modes (`fKL`, `IW`, `alpha` for alpha &lt; 1).\n            device: Training device, e.g., `cpu`, `cuda` or `cuda:0`. We will ensure\n                that all other objects are also on this device.\n            x_shape: Shape of a single simulator output. If passed, it is used to check\n                the shape of the observed data and give a descriptive error.\n            parameters: List of parameters of the variational posterior. This is only\n                required for user-defined q i.e. if q does not have a `parameters`\n                attribute.\n            modules: List of modules of the variational posterior. This is only\n                required for user-defined q i.e. if q does not have a `modules`\n                attribute.\n        \"\"\"\n        super().__init__(potential_fn, theta_transform, device, x_shape=x_shape)\n\n        # Especially the prior may be on another device -&gt; move it...\n        self._device = device\n        self.potential_fn.device = device\n        move_all_tensor_to_device(self.potential_fn, device)\n\n        # Get prior and previous builds\n        if prior is not None:\n            self._prior = prior\n        elif hasattr(self.potential_fn, \"prior\") and isinstance(\n            self.potential_fn.prior, Distribution\n        ):\n            self._prior = self.potential_fn.prior\n        elif isinstance(q, VIPosterior) and isinstance(q._prior, Distribution):\n            self._prior = q._prior\n        else:\n            raise ValueError(\n                \"We could not find a suitable prior distribution within `potential_fn`\"\n                \"or `q` (if a VIPosterior is given). Please explicitly specify a prior.\"\n            )\n        move_all_tensor_to_device(self._prior, device)\n        self._optimizer = None\n\n        # In contrast to MCMC we want to project into constrained space.\n        if theta_transform is None:\n            self.link_transform = mcmc_transform(self._prior).inv\n        else:\n            self.link_transform = theta_transform.inv\n\n        # This will set the variational distribution and VI method\n        self.set_q(q, parameters=parameters, modules=modules)\n        self.set_vi_method(vi_method)\n\n        self._purpose = (\n            \"It provides Variational inference to .sample() from the posterior and \"\n            \"can evaluate the _normalized_ posterior density with .log_prob().\"\n        )\n\n    @property\n    def q(self) -&gt; Distribution:\n        \"\"\"Returns the variational posterior.\"\"\"\n        return self._q\n\n    @q.setter\n    def q(\n        self,\n        q: Union[str, Distribution, \"VIPosterior\", Callable],\n    ) -&gt; None:\n        \"\"\"Sets the variational distribution. If the distribution does not admit access\n        through `parameters` and `modules` function, please use `set_q` if you want to\n        explicitly specify the parameters and modules.\n\n\n        Args:\n            q: Variational distribution, either string, distribution, or a VIPosterior\n                object. This specifies a parametric class of distribution over which\n                the best possible posterior approximation is searched. For string input,\n                we currently support [nsf, scf, maf, mcf, gaussian, gaussian_diag]. Of\n                course, you can also specify your own variational family by passing a\n                `parameterized` distribution object i.e. a torch.distributions\n                Distribution with methods `parameters` returning an iterable of all\n                parameters (you can pass them within the paramters/modules attribute).\n                Additionally, we allow a `Callable`, which allows you the pass a\n                `builder` function, which if called returns an distribution. This may be\n                useful for setting the hyperparameters e.g. `num_transfroms:int` by\n                using the `get_flow_builder` method specifying the hyperparameters. If q\n                is already a `VIPosterior`, then the arguments will be copied from it\n                (relevant for multi-round training).\n\n\n        \"\"\"\n        self.set_q(q)\n\n    def set_q(\n        self,\n        q: Union[str, PyroTransformedDistribution, \"VIPosterior\", Callable],\n        parameters: Iterable = [],\n        modules: Iterable = [],\n    ) -&gt; None:\n        \"\"\"Defines the variational family.\n\n        You can specify over which parameters/modules we optimize. This is required for\n        custom distributions which e.g. do not inherit nn.Modules or has the function\n        `parameters` or `modules` to give direct access to trainable parameters.\n        Further, you can pass a function, which constructs a variational distribution\n        if called.\n\n        Args:\n            q: Variational distribution, either string, distribution, or a VIPosterior\n                object. This specifies a parametric class of distribution over which\n                the best possible posterior approximation is searched. For string input,\n                we currently support [nsf, scf, maf, mcf, gaussian, gaussian_diag]. Of\n                course, you can also specify your own variational family by passing a\n                `parameterized` distribution object i.e. a torch.distributions\n                Distribution with methods `parameters` returning an iterable of all\n                parameters (you can pass them within the paramters/modules attribute).\n                Additionally, we allow a `Callable`, which allows you the pass a\n                `builder` function, which if called returns an distribution. This may be\n                useful for setting the hyperparameters e.g. `num_transfroms:int` by\n                using the `get_flow_builder` method specifying the hyperparameters. If q\n                is already a `VIPosterior`, then the arguments will be copied from it\n                (relevant for multi-round training).\n            parameters: List of parameters associated with the distribution object.\n            modules: List of modules associated with the distribution object.\n\n        \"\"\"\n        self._q_arg = q\n        if isinstance(q, Distribution):\n            q = adapt_variational_distribution(\n                q,\n                self._prior,\n                self.link_transform,\n                parameters=parameters,\n                modules=modules,\n            )\n            make_object_deepcopy_compatible(q)\n            self_custom_q_init_cache = deepcopy(q)\n            self._q_build_fn = lambda *args, **kwargs: self_custom_q_init_cache\n            self._trained_on = None\n        elif isinstance(q, str) or isinstance(q, Callable):\n            if isinstance(q, str):\n                self._q_build_fn = get_flow_builder(q)\n            else:\n                self._q_build_fn = q\n\n            q = self._q_build_fn(\n                self._prior.event_shape,\n                self.link_transform,\n                device=self._device,\n            )\n            make_object_deepcopy_compatible(q)\n            self._trained_on = None\n        elif isinstance(q, VIPosterior):\n            self._q_build_fn = q._q_build_fn\n            self._trained_on = q._trained_on\n            self.vi_method = q.vi_method  # type: ignore\n            self._device = q._device\n            self._prior = q._prior\n            self._x = q._x\n            self._q_arg = q._q_arg\n            make_object_deepcopy_compatible(q.q)\n            q = deepcopy(q.q)\n        move_all_tensor_to_device(q, self._device)\n        assert isinstance(\n            q, Distribution\n        ), \"\"\"Something went wrong when initializing the variational distribution.\n            Please create an issue on github https://github.com/mackelab/sbi/issues\"\"\"\n        check_variational_distribution(q, self._prior)\n        self._q = q\n\n    @property\n    def vi_method(self) -&gt; str:\n        \"\"\"Variational inference method e.g. one of [rKL, fKL, IW, alpha].\"\"\"\n        return self._vi_method\n\n    @vi_method.setter\n    def vi_method(self, method: str) -&gt; None:\n        \"\"\"See `set_vi_method`.\"\"\"\n        self.set_vi_method(method)\n\n    def set_vi_method(self, method: str) -&gt; \"VIPosterior\":\n        \"\"\"Sets variational inference method.\n\n        Args:\n            method: One of [rKL, fKL, IW, alpha].\n\n        Returns:\n            `VIPosterior` for chainable calls.\n        \"\"\"\n        self._vi_method = method\n        self._optimizer_builder = get_VI_method(method)\n        return self\n\n    def sample(\n        self,\n        sample_shape: Shape = torch.Size(),\n        x: Optional[Tensor] = None,\n        **kwargs,\n    ) -&gt; Tensor:\n        \"\"\"Samples from the variational posterior distribution.\n\n        Args:\n            sample_shape: Shape of samples\n\n        Returns:\n            Samples from posterior.\n        \"\"\"\n        x = self._x_else_default_x(x)\n        if self._trained_on is None or (x != self._trained_on).all():\n            raise AttributeError(\n                f\"The variational posterior was not fit on the specified `default_x` \"\n                f\"{x}. Please train using `posterior.train()`.\"\n            )\n        samples = self.q.sample(torch.Size(sample_shape))\n        return samples.reshape((*sample_shape, samples.shape[-1]))\n\n    def log_prob(\n        self,\n        theta: Tensor,\n        x: Optional[Tensor] = None,\n        track_gradients: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the log-probability of theta under the variational posterior.\n\n        Args:\n            theta: Parameters\n            track_gradients: Whether the returned tensor supports tracking gradients.\n                This can be helpful for e.g. sensitivity analysis but increases memory\n                consumption.\n\n        Returns:\n            `len($\\theta$)`-shaped log-probability.\n        \"\"\"\n        x = self._x_else_default_x(x)\n        if self._trained_on is None or (x != self._trained_on).all():\n            raise AttributeError(\n                f\"The variational posterior was not fit using observation {x}.\\\n                     Please train.\"\n            )\n        with torch.set_grad_enabled(track_gradients):\n            theta = ensure_theta_batched(torch.as_tensor(theta))\n            return self.q.log_prob(theta)\n\n    def train(\n        self,\n        x: Optional[TorchTensor] = None,\n        n_particles: int = 256,\n        learning_rate: float = 1e-3,\n        gamma: float = 0.999,\n        max_num_iters: int = 2000,\n        min_num_iters: int = 10,\n        clip_value: float = 10.0,\n        warm_up_rounds: int = 100,\n        retrain_from_scratch: bool = False,\n        reset_optimizer: bool = False,\n        show_progress_bar: bool = True,\n        check_for_convergence: bool = True,\n        quality_control: bool = True,\n        quality_control_metric: str = \"psis\",\n        **kwargs,\n    ) -&gt; \"VIPosterior\":\n        \"\"\"This method trains the variational posterior.\n\n        Args:\n            x: The observation.\n            n_particles: Number of samples to approximate expectations within the\n                variational bounds. The larger the more accurate are gradient\n                estimates, but the computational cost per iteration increases.\n            learning_rate: Learning rate of the optimizer.\n            gamma: Learning rate decay per iteration. We use an exponential decay\n                scheduler.\n            max_num_iters: Maximum number of iterations.\n            min_num_iters: Minimum number of iterations.\n            clip_value: Gradient clipping value, decreasing may help if you see invalid\n                values.\n            warm_up_rounds: Initialize the posterior as the prior.\n            retrain_from_scratch: Retrain the variational distributions from scratch.\n            reset_optimizer: Reset the divergence optimizer\n            show_progress_bar: If any progress report should be displayed.\n            quality_control: If False quality control is skipped.\n            quality_control_metric: Which metric to use for evaluating the quality.\n            kwargs: Hyperparameters check corresponding `DivergenceOptimizer` for detail\n                eps: Determines sensitivity of convergence check.\n                retain_graph: Boolean which decides whether to retain the computation\n                    graph. This may be required for some `exotic` user-specified q's.\n                optimizer: A PyTorch Optimizer class e.g. Adam or SGD. See\n                    `DivergenceOptimizer` for details.\n                scheduler: A PyTorch learning rate scheduler. See\n                    `DivergenceOptimizer` for details.\n                alpha: Only used if vi_method=`alpha`. Determines the alpha divergence.\n                K: Only used if vi_method=`IW`. Determines the number of importance\n                    weighted particles.\n                stick_the_landing: If one should use the STL estimator (only for rKL,\n                    IW, alpha).\n                dreg: If one should use the DREG estimator (only for rKL, IW, alpha).\n                weight_transform: Callable applied to importance weights (only for fKL)\n        Returns:\n            VIPosterior: `VIPosterior` (can be used to chain calls).\n        \"\"\"\n        # Update optimizer with current arguments.\n        if self._optimizer is not None:\n            self._optimizer.update({**locals(), **kwargs})\n\n        # Init q and the optimizer if necessary\n        if retrain_from_scratch:\n            self.q = self._q_build_fn()  # type: ignore\n            self._optimizer = self._optimizer_builder(\n                self.potential_fn,\n                self.q,\n                lr=learning_rate,\n                clip_value=clip_value,\n                gamma=gamma,\n                n_particles=n_particles,\n                prior=self._prior,\n                **kwargs,\n            )\n\n        if (\n            reset_optimizer\n            or self._optimizer is None\n            or not isinstance(self._optimizer, self._optimizer_builder)\n        ):\n            self._optimizer = self._optimizer_builder(\n                self.potential_fn,\n                self.q,\n                lr=learning_rate,\n                clip_value=clip_value,\n                gamma=gamma,\n                n_particles=n_particles,\n                prior=self._prior,\n                **kwargs,\n            )\n\n        # Check context\n        x = atleast_2d_float32_tensor(self._x_else_default_x(x)).to(  # type: ignore\n            self._device\n        )\n\n        already_trained = self._trained_on is not None and (x == self._trained_on).all()\n\n        # Optimize\n        optimizer = self._optimizer\n        optimizer.to(self._device)\n        optimizer.reset_loss_stats()\n\n        if show_progress_bar:\n            iters = tqdm(range(max_num_iters))\n        else:\n            iters = range(max_num_iters)\n\n        # Warmup before training\n        if reset_optimizer or (not optimizer.warm_up_was_done and not already_trained):\n            if show_progress_bar:\n                iters.set_description(  # type: ignore\n                    \"Warmup phase, this may take a few seconds...\"\n                )\n            optimizer.warm_up(warm_up_rounds)\n\n        for i in iters:\n            optimizer.step(x)\n            mean_loss, std_loss = optimizer.get_loss_stats()\n            # Update progress bar\n            if show_progress_bar:\n                assert isinstance(iters, tqdm)\n                iters.set_description(  # type: ignore\n                    f\"Loss: {np.round(float(mean_loss), 2)}\"\n                    f\"Std: {np.round(float(std_loss), 2)}\"\n                )\n            # Check for convergence\n            if check_for_convergence and i &gt; min_num_iters:\n                if optimizer.converged():\n                    if show_progress_bar:\n                        print(f\"\\nConverged with loss: {np.round(float(mean_loss), 2)}\")\n                    break\n        # Training finished:\n        self._trained_on = x\n\n        # Evaluate quality\n        if quality_control:\n            try:\n                self.evaluate(quality_control_metric=quality_control_metric)\n            except Exception as e:\n                print(\n                    f\"Quality control did not work, we reset the variational \\\n                        posterior,please check your setting. \\\n                        \\n Following error occured {e}\"\n                )\n                self.train(\n                    learning_rate=learning_rate * 0.1,\n                    retrain_from_scratch=True,\n                    reset_optimizer=True,\n                )\n\n        return self\n\n    def evaluate(self, quality_control_metric: str = \"psis\", N: int = int(5e4)) -&gt; None:\n        \"\"\"This function will evaluate the quality of the variational posterior\n        distribution. We currently support two different metrics of type `psis`, which\n        checks the quality based on the tails of importance weights (there should not be\n        much with a large one), or `prop` which checks the proportionality between q\n        and potential_fn.\n\n        NOTE: In our experience `prop` is sensitive to distinguish ``good`` from ``ok``\n        whereas `psis` is more sensitive in distinguishing `very bad` from `ok`.\n\n        Args:\n            quality_control_metric: The metric of choice, we currently support [psis,\n                prop, prop_prior].\n            N: Number of samples which is used to evaluate the metric.\n        \"\"\"\n        quality_control_fn, quality_control_msg = get_quality_metric(\n            quality_control_metric\n        )\n        metric = round(float(quality_control_fn(self, N=N)), 3)\n        print(f\"Quality Score: {metric} \" + quality_control_msg)\n\n    def map(\n        self,\n        x: Optional[TorchTensor] = None,\n        num_iter: int = 1_000,\n        num_to_optimize: int = 100,\n        learning_rate: float = 0.01,\n        init_method: Union[str, TorchTensor] = \"proposal\",\n        num_init_samples: int = 10_000,\n        save_best_every: int = 10,\n        show_progress_bars: bool = False,\n        force_update: bool = False,\n    ) -&gt; Tensor:\n        r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n        The method can be interrupted (Ctrl-C) when the user sees that the\n        log-probability converges. The best estimate will be saved in `self._map` and\n        can be accessed with `self.map()`. The MAP is obtained by running gradient\n        ascent from a given number of starting positions (samples from the posterior\n        with the highest log-probability). After the optimization is done, we select the\n        parameter set that has the highest log-probability after the optimization.\n\n        Warning: The default values used by this function are not well-tested. They\n        might require hand-tuning for the problem at hand.\n\n        For developers: if the prior is a `BoxUniform`, we carry out the optimization\n        in unbounded space and transform the result back into bounded space.\n\n        Args:\n            x: Deprecated - use `.set_default_x()` prior to `.map()`.\n            num_iter: Number of optimization steps that the algorithm takes\n                to find the MAP.\n            learning_rate: Learning rate of the optimizer.\n            init_method: How to select the starting parameters for the optimization. If\n                it is a string, it can be either [`posterior`, `prior`], which samples\n                the respective distribution `num_init_samples` times. If it is a\n                tensor, the tensor will be used as init locations.\n            num_init_samples: Draw this number of samples from the posterior and\n                evaluate the log-probability of all of them.\n            num_to_optimize: From the drawn `num_init_samples`, use the\n                `num_to_optimize` with highest log-probability as the initial points\n                for the optimization.\n            save_best_every: The best log-probability is computed, saved in the\n                `map`-attribute, and printed every `save_best_every`-th iteration.\n                Computing the best log-probability creates a significant overhead\n                (thus, the default is `10`.)\n            show_progress_bars: Whether to show a progressbar during sampling from\n                the posterior.\n            force_update: Whether to re-calculate the MAP when x is unchanged and\n                have a cached value.\n            log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n                {'norm_posterior': True} for SNPE.\n\n        Returns:\n            The MAP estimate.\n        \"\"\"\n        self.proposal = self.q\n        return super().map(\n            x=x,\n            num_iter=num_iter,\n            num_to_optimize=num_to_optimize,\n            learning_rate=learning_rate,\n            init_method=init_method,\n            num_init_samples=num_init_samples,\n            save_best_every=save_best_every,\n            show_progress_bars=show_progress_bars,\n            force_update=force_update,\n        )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.direct_posterior.DirectPosterior.__init__","title":"<code>__init__(posterior_estimator, prior, max_sampling_batch_size=10000, device=None, x_shape=None, enable_transform=True)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>prior</code> <code>Distribution</code> <p>Prior distribution with <code>.log_prob()</code> and <code>.sample()</code>.</p> required <code>posterior_estimator</code> <code>Flow</code> <p>The trained neural posterior.</p> required <code>max_sampling_batch_size</code> <code>int</code> <p>Batchsize of samples being drawn from the proposal at every iteration.</p> <code>10000</code> <code>device</code> <code>Optional[str]</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:0\u201d. If None, <code>potential_fn.device</code> is used.</p> <code>None</code> <code>x_shape</code> <code>Optional[Size]</code> <p>Shape of a single simulator output. If passed, it is used to check the shape of the observed data and give a descriptive error.</p> <code>None</code> <code>enable_transform</code> <code>bool</code> <p>Whether to transform parameters to unconstrained space during MAP optimization. When False, an identity transform will be returned for <code>theta_transform</code>.</p> <code>True</code> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>def __init__(\n    self,\n    posterior_estimator: flows.Flow,\n    prior: Distribution,\n    max_sampling_batch_size: int = 10_000,\n    device: Optional[str] = None,\n    x_shape: Optional[torch.Size] = None,\n    enable_transform: bool = True,\n):\n    \"\"\"\n    Args:\n        prior: Prior distribution with `.log_prob()` and `.sample()`.\n        posterior_estimator: The trained neural posterior.\n        max_sampling_batch_size: Batchsize of samples being drawn from\n            the proposal at every iteration.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n            `potential_fn.device` is used.\n        x_shape: Shape of a single simulator output. If passed, it is used to check\n            the shape of the observed data and give a descriptive error.\n        enable_transform: Whether to transform parameters to unconstrained space\n            during MAP optimization. When False, an identity transform will be\n            returned for `theta_transform`.\n    \"\"\"\n    # Because `DirectPosterior` does not take the `potential_fn` as input, it\n    # builds it itself. The `potential_fn` and `theta_transform` are used only for\n    # obtaining the MAP.\n    check_prior(prior)\n    potential_fn, theta_transform = posterior_estimator_based_potential(\n        posterior_estimator,\n        prior,\n        x_o=None,\n        enable_transform=enable_transform,\n    )\n\n    super().__init__(\n        potential_fn=potential_fn,\n        theta_transform=theta_transform,\n        device=device,\n        x_shape=x_shape,\n    )\n\n    self.prior = prior\n    self.posterior_estimator = posterior_estimator\n\n    self.max_sampling_batch_size = max_sampling_batch_size\n    self._leakage_density_correction_factor = None\n\n    self._purpose = \"\"\"It samples the posterior network and rejects samples that\n        lie outside of the prior bounds.\"\"\"\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.direct_posterior.DirectPosterior.leakage_correction","title":"<code>leakage_correction(x, num_rejection_samples=10000, force_update=False, show_progress_bars=False, rejection_sampling_batch_size=10000)</code>","text":"<p>Return leakage correction factor for a leaky posterior density estimate.</p> <p>The factor is estimated from the acceptance probability during rejection sampling from the posterior.</p> <p>This is to avoid re-estimating the acceptance probability from scratch whenever <code>log_prob</code> is called and <code>norm_posterior=True</code>. Here, it is estimated only once for <code>self.default_x</code> and saved for later. We re-evaluate only whenever a new <code>x</code> is passed.</p> <p>Parameters:</p> Name Type Description Default <code>num_rejection_samples</code> <code>int</code> <p>Number of samples used to estimate correction factor.</p> <code>10000</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progress bar during sampling.</p> <code>False</code> <code>rejection_sampling_batch_size</code> <code>int</code> <p>Batch size for rejection sampling.</p> <code>10000</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>Saved or newly-estimated correction factor (as a scalar <code>Tensor</code>).</p> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>@torch.no_grad()\ndef leakage_correction(\n    self,\n    x: Tensor,\n    num_rejection_samples: int = 10_000,\n    force_update: bool = False,\n    show_progress_bars: bool = False,\n    rejection_sampling_batch_size: int = 10_000,\n) -&gt; Tensor:\n    r\"\"\"Return leakage correction factor for a leaky posterior density estimate.\n\n    The factor is estimated from the acceptance probability during rejection\n    sampling from the posterior.\n\n    This is to avoid re-estimating the acceptance probability from scratch\n    whenever `log_prob` is called and `norm_posterior=True`. Here, it\n    is estimated only once for `self.default_x` and saved for later. We\n    re-evaluate only whenever a new `x` is passed.\n\n    Arguments:\n        num_rejection_samples: Number of samples used to estimate correction factor.\n        show_progress_bars: Whether to show a progress bar during sampling.\n        rejection_sampling_batch_size: Batch size for rejection sampling.\n\n    Returns:\n        Saved or newly-estimated correction factor (as a scalar `Tensor`).\n    \"\"\"\n\n    def acceptance_at(x: Tensor) -&gt; Tensor:\n        return accept_reject_sample(\n            proposal=self.posterior_estimator,\n            accept_reject_fn=lambda theta: within_support(self.prior, theta),\n            num_samples=num_rejection_samples,\n            show_progress_bars=show_progress_bars,\n            sample_for_correction_factor=True,\n            max_sampling_batch_size=rejection_sampling_batch_size,\n            proposal_sampling_kwargs={\"context\": x},\n        )[1]\n\n    # Check if the provided x matches the default x (short-circuit on identity).\n    is_new_x = self.default_x is None or (\n        x is not self.default_x and (x != self.default_x).any()\n    )\n\n    not_saved_at_default_x = self._leakage_density_correction_factor is None\n\n    if is_new_x:  # Calculate at x; don't save.\n        return acceptance_at(x)\n    elif not_saved_at_default_x or force_update:  # Calculate at default_x; save.\n        assert self.default_x is not None\n        self._leakage_density_correction_factor = acceptance_at(self.default_x)\n\n    return self._leakage_density_correction_factor  # type: ignore\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.direct_posterior.DirectPosterior.log_prob","title":"<code>log_prob(theta, x=None, norm_posterior=True, track_gradients=False, leakage_correction_params=None)</code>","text":"<p>Returns the log-probability of the posterior \\(p(\\theta|x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>Tensor</code> <p>Parameters \\(\\theta\\).</p> required <code>norm_posterior</code> <code>bool</code> <p>Whether to enforce a normalized posterior density. Renormalization of the posterior is useful when some probability falls out or leaks out of the prescribed prior support. The normalizing factor is calculated via rejection sampling, so if you need speedier but unnormalized log posterior estimates set here <code>norm_posterior=False</code>. The returned log posterior is set to -\u221e outside of the prior support regardless of this setting.</p> <code>True</code> <code>track_gradients</code> <code>bool</code> <p>Whether the returned tensor supports tracking gradients. This can be helpful for e.g. sensitivity analysis, but increases memory consumption.</p> <code>False</code> <code>leakage_correction_params</code> <code>Optional[dict]</code> <p>A <code>dict</code> of keyword arguments to override the default values of <code>leakage_correction()</code>. Possible options are: <code>num_rejection_samples</code>, <code>force_update</code>, <code>show_progress_bars</code>, and <code>rejection_sampling_batch_size</code>. These parameters only have an effect if <code>norm_posterior=True</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tensor</code> <p><code>(len(\u03b8),)</code>-shaped log posterior probability \\(\\log p(\\theta|x)\\) for \u03b8 in the</p> <code>Tensor</code> <p>support of the prior, -\u221e (corresponding to 0 probability) outside.</p> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>def log_prob(\n    self,\n    theta: Tensor,\n    x: Optional[Tensor] = None,\n    norm_posterior: bool = True,\n    track_gradients: bool = False,\n    leakage_correction_params: Optional[dict] = None,\n) -&gt; Tensor:\n    r\"\"\"Returns the log-probability of the posterior $p(\\theta|x)$.\n\n    Args:\n        theta: Parameters $\\theta$.\n        norm_posterior: Whether to enforce a normalized posterior density.\n            Renormalization of the posterior is useful when some\n            probability falls out or leaks out of the prescribed prior support.\n            The normalizing factor is calculated via rejection sampling, so if you\n            need speedier but unnormalized log posterior estimates set here\n            `norm_posterior=False`. The returned log posterior is set to\n            -\u221e outside of the prior support regardless of this setting.\n        track_gradients: Whether the returned tensor supports tracking gradients.\n            This can be helpful for e.g. sensitivity analysis, but increases memory\n            consumption.\n        leakage_correction_params: A `dict` of keyword arguments to override the\n            default values of `leakage_correction()`. Possible options are:\n            `num_rejection_samples`, `force_update`, `show_progress_bars`, and\n            `rejection_sampling_batch_size`.\n            These parameters only have an effect if `norm_posterior=True`.\n\n    Returns:\n        `(len(\u03b8),)`-shaped log posterior probability $\\log p(\\theta|x)$ for \u03b8 in the\n        support of the prior, -\u221e (corresponding to 0 probability) outside.\n    \"\"\"\n    x = self._x_else_default_x(x)\n\n    # TODO Train exited here, entered after sampling?\n    self.posterior_estimator.eval()\n\n    theta = ensure_theta_batched(torch.as_tensor(theta))\n    theta_repeated, x_repeated = match_theta_and_x_batch_shapes(theta, x)\n\n    with torch.set_grad_enabled(track_gradients):\n        # Evaluate on device, move back to cpu for comparison with prior.\n        unnorm_log_prob = self.posterior_estimator.log_prob(\n            theta_repeated, context=x_repeated\n        )\n\n        # Force probability to be zero outside prior support.\n        in_prior_support = within_support(self.prior, theta_repeated)\n\n        masked_log_prob = torch.where(\n            in_prior_support,\n            unnorm_log_prob,\n            torch.tensor(float(\"-inf\"), dtype=torch.float32, device=self._device),\n        )\n\n        if leakage_correction_params is None:\n            leakage_correction_params = dict()  # use defaults\n        log_factor = (\n            log(self.leakage_correction(x=x, **leakage_correction_params))\n            if norm_posterior\n            else 0\n        )\n\n        return masked_log_prob - log_factor\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.direct_posterior.DirectPosterior.map","title":"<code>map(x=None, num_iter=1000, num_to_optimize=100, learning_rate=0.01, init_method='posterior', num_init_samples=1000, save_best_every=10, show_progress_bars=False, force_update=False)</code>","text":"<p>Returns the maximum-a-posteriori estimate (MAP).</p> <p>The method can be interrupted (Ctrl-C) when the user sees that the log-probability converges. The best estimate will be saved in <code>self._map</code> and can be accessed with <code>self.map()</code>. The MAP is obtained by running gradient ascent from a given number of starting positions (samples from the posterior with the highest log-probability). After the optimization is done, we select the parameter set that has the highest log-probability after the optimization.</p> <p>Warning: The default values used by this function are not well-tested. They might require hand-tuning for the problem at hand.</p> <p>For developers: if the prior is a <code>BoxUniform</code>, we carry out the optimization in unbounded space and transform the result back into bounded space.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[Tensor]</code> <p>Deprecated - use <code>.set_default_x()</code> prior to <code>.map()</code>.</p> <code>None</code> <code>num_iter</code> <code>int</code> <p>Number of optimization steps that the algorithm takes to find the MAP.</p> <code>1000</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.01</code> <code>init_method</code> <code>Union[str, Tensor]</code> <p>How to select the starting parameters for the optimization. If it is a string, it can be either [<code>posterior</code>, <code>prior</code>], which samples the respective distribution <code>num_init_samples</code> times. If it is a tensor, the tensor will be used as init locations.</p> <code>'posterior'</code> <code>num_init_samples</code> <code>int</code> <p>Draw this number of samples from the posterior and evaluate the log-probability of all of them.</p> <code>1000</code> <code>num_to_optimize</code> <code>int</code> <p>From the drawn <code>num_init_samples</code>, use the <code>num_to_optimize</code> with highest log-probability as the initial points for the optimization.</p> <code>100</code> <code>save_best_every</code> <code>int</code> <p>The best log-probability is computed, saved in the <code>map</code>-attribute, and printed every <code>save_best_every</code>-th iteration. Computing the best log-probability creates a significant overhead (thus, the default is <code>10</code>.)</p> <code>10</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during sampling from the posterior.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the MAP when x is unchanged and have a cached value.</p> <code>False</code> <code>log_prob_kwargs</code> <p>Will be empty for SNLE and SNRE. Will contain {\u2018norm_posterior\u2019: True} for SNPE.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The MAP estimate.</p> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>def map(\n    self,\n    x: Optional[Tensor] = None,\n    num_iter: int = 1_000,\n    num_to_optimize: int = 100,\n    learning_rate: float = 0.01,\n    init_method: Union[str, Tensor] = \"posterior\",\n    num_init_samples: int = 1_000,\n    save_best_every: int = 10,\n    show_progress_bars: bool = False,\n    force_update: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n    The method can be interrupted (Ctrl-C) when the user sees that the\n    log-probability converges. The best estimate will be saved in `self._map` and\n    can be accessed with `self.map()`. The MAP is obtained by running gradient\n    ascent from a given number of starting positions (samples from the posterior\n    with the highest log-probability). After the optimization is done, we select the\n    parameter set that has the highest log-probability after the optimization.\n\n    Warning: The default values used by this function are not well-tested. They\n    might require hand-tuning for the problem at hand.\n\n    For developers: if the prior is a `BoxUniform`, we carry out the optimization\n    in unbounded space and transform the result back into bounded space.\n\n    Args:\n        x: Deprecated - use `.set_default_x()` prior to `.map()`.\n        num_iter: Number of optimization steps that the algorithm takes\n            to find the MAP.\n        learning_rate: Learning rate of the optimizer.\n        init_method: How to select the starting parameters for the optimization. If\n            it is a string, it can be either [`posterior`, `prior`], which samples\n            the respective distribution `num_init_samples` times. If it is a\n            tensor, the tensor will be used as init locations.\n        num_init_samples: Draw this number of samples from the posterior and\n            evaluate the log-probability of all of them.\n        num_to_optimize: From the drawn `num_init_samples`, use the\n            `num_to_optimize` with highest log-probability as the initial points\n            for the optimization.\n        save_best_every: The best log-probability is computed, saved in the\n            `map`-attribute, and printed every `save_best_every`-th iteration.\n            Computing the best log-probability creates a significant overhead\n            (thus, the default is `10`.)\n        show_progress_bars: Whether to show a progressbar during sampling from the\n            posterior.\n        force_update: Whether to re-calculate the MAP when x is unchanged and\n            have a cached value.\n        log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n            {'norm_posterior': True} for SNPE.\n\n    Returns:\n        The MAP estimate.\n    \"\"\"\n    return super().map(\n        x=x,\n        num_iter=num_iter,\n        num_to_optimize=num_to_optimize,\n        learning_rate=learning_rate,\n        init_method=init_method,\n        num_init_samples=num_init_samples,\n        save_best_every=save_best_every,\n        show_progress_bars=show_progress_bars,\n        force_update=force_update,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.direct_posterior.DirectPosterior.sample","title":"<code>sample(sample_shape=torch.Size(), x=None, max_sampling_batch_size=10000, sample_with=None, show_progress_bars=True)</code>","text":"<p>Return samples from posterior distribution \\(p(\\theta|x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>sample_shape</code> <code>Shape</code> <p>Desired shape of samples that are drawn from posterior. If sample_shape is multidimensional we simply draw <code>sample_shape.numel()</code> samples and then reshape into the desired shape.</p> <code>Size()</code> <code>sample_with</code> <code>Optional[str]</code> <p>This argument only exists to keep backward-compatibility with <code>sbi</code> v0.17.2 or older. If it is set, we instantly raise an error.</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show sampling progress monitor.</p> <code>True</code> Source code in <code>sbi/inference/posteriors/direct_posterior.py</code> <pre><code>def sample(\n    self,\n    sample_shape: Shape = torch.Size(),\n    x: Optional[Tensor] = None,\n    max_sampling_batch_size: int = 10_000,\n    sample_with: Optional[str] = None,\n    show_progress_bars: bool = True,\n) -&gt; Tensor:\n    r\"\"\"Return samples from posterior distribution $p(\\theta|x)$.\n\n    Args:\n        sample_shape: Desired shape of samples that are drawn from posterior. If\n            sample_shape is multidimensional we simply draw `sample_shape.numel()`\n            samples and then reshape into the desired shape.\n        sample_with: This argument only exists to keep backward-compatibility with\n            `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n        show_progress_bars: Whether to show sampling progress monitor.\n    \"\"\"\n\n    num_samples = torch.Size(sample_shape).numel()\n    x = self._x_else_default_x(x)\n    max_sampling_batch_size = (\n        self.max_sampling_batch_size\n        if max_sampling_batch_size is None\n        else max_sampling_batch_size\n    )\n\n    if sample_with is not None:\n        raise ValueError(\n            f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n            f\"`sample_with` is no longer supported. You have to rerun \"\n            f\"`.build_posterior(sample_with={sample_with}).`\"\n        )\n\n    samples = accept_reject_sample(\n        proposal=self.posterior_estimator,\n        accept_reject_fn=lambda theta: within_support(self.prior, theta),\n        num_samples=num_samples,\n        show_progress_bars=show_progress_bars,\n        max_sampling_batch_size=max_sampling_batch_size,\n        proposal_sampling_kwargs={\"context\": x},\n        alternative_method=\"build_posterior(..., sample_with='mcmc')\",\n    )[0]\n    return samples\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.importance_posterior.ImportanceSamplingPosterior.__init__","title":"<code>__init__(potential_fn, proposal, theta_transform=None, method='sir', oversampling_factor=32, max_sampling_batch_size=10000, device=None, x_shape=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>potential_fn</code> <code>Callable</code> <p>The potential function from which to draw samples.</p> required <code>proposal</code> <code>Any</code> <p>The proposal distribution.</p> required <code>theta_transform</code> <code>Optional[TorchTransform]</code> <p>Transformation that is applied to parameters. Is not used during but only when calling <code>.map()</code>.</p> <code>None</code> <code>method</code> <code>str</code> <p>Either of [<code>sir</code>|<code>importance</code>]. This sets the behavior of the <code>.sample()</code> method. With <code>sir</code>, approximate posterior samples are generated with sampling importance resampling (SIR). With <code>importance</code>, the <code>.sample()</code> method returns a tuple of samples and corresponding importance weights.</p> <code>'sir'</code> <code>oversampling_factor</code> <code>int</code> <p>Number of proposed samples from which only one is selected based on its importance weight.</p> <code>32</code> <code>max_sampling_batch_size</code> <code>int</code> <p>The batch size of samples being drawn from the proposal at every iteration.</p> <code>10000</code> <code>device</code> <code>Optional[str]</code> <p>Device on which to sample, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:0\u201d. If None, <code>potential_fn.device</code> is used.</p> <code>None</code> <code>x_shape</code> <code>Optional[Size]</code> <p>Shape of a single simulator output. If passed, it is used to check the shape of the observed data and give a descriptive error.</p> <code>None</code> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>def __init__(\n    self,\n    potential_fn: Callable,\n    proposal: Any,\n    theta_transform: Optional[TorchTransform] = None,\n    method: str = \"sir\",\n    oversampling_factor: int = 32,\n    max_sampling_batch_size: int = 10_000,\n    device: Optional[str] = None,\n    x_shape: Optional[torch.Size] = None,\n):\n    \"\"\"\n    Args:\n        potential_fn: The potential function from which to draw samples.\n        proposal: The proposal distribution.\n        theta_transform: Transformation that is applied to parameters. Is not used\n            during but only when calling `.map()`.\n        method: Either of [`sir`|`importance`]. This sets the behavior of the\n            `.sample()` method. With `sir`, approximate posterior samples are\n            generated with sampling importance resampling (SIR). With\n            `importance`, the `.sample()` method returns a tuple of samples and\n            corresponding importance weights.\n        oversampling_factor: Number of proposed samples from which only one is\n            selected based on its importance weight.\n        max_sampling_batch_size: The batch size of samples being drawn from the\n            proposal at every iteration.\n        device: Device on which to sample, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If\n            None, `potential_fn.device` is used.\n        x_shape: Shape of a single simulator output. If passed, it is used to check\n            the shape of the observed data and give a descriptive error.\n    \"\"\"\n    super().__init__(\n        potential_fn,\n        theta_transform=theta_transform,\n        device=device,\n        x_shape=x_shape,\n    )\n\n    self.proposal = proposal\n    self._normalization_constant = None\n    self.method = method\n\n    self.oversampling_factor = oversampling_factor\n    self.max_sampling_batch_size = max_sampling_batch_size\n\n    self._purpose = (\n        \"It provides sampling-importance resampling (SIR) to .sample() from the \"\n        \"posterior and can evaluate the _unnormalized_ posterior density with \"\n        \".log_prob().\"\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.importance_posterior.ImportanceSamplingPosterior.estimate_normalization_constant","title":"<code>estimate_normalization_constant(x, num_samples=10000, force_update=False)</code>","text":"<p>Returns the normalization constant via importance sampling.</p> <p>Parameters:</p> Name Type Description Default <code>num_samples</code> <code>int</code> <p>Number of importance samples used for the estimate.</p> <code>10000</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the normlization constant when x is unchanged and have a cached value.</p> <code>False</code> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>@torch.no_grad()\ndef estimate_normalization_constant(\n    self, x: Tensor, num_samples: int = 10_000, force_update: bool = False\n) -&gt; Tensor:\n    \"\"\"Returns the normalization constant via importance sampling.\n\n    Args:\n        num_samples: Number of importance samples used for the estimate.\n        force_update: Whether to re-calculate the normlization constant when x is\n            unchanged and have a cached value.\n    \"\"\"\n    # Check if the provided x matches the default x (short-circuit on identity).\n    is_new_x = self.default_x is None or (\n        x is not self.default_x and (x != self.default_x).any()\n    )\n\n    not_saved_at_default_x = self._normalization_constant is None\n\n    if is_new_x:  # Calculate at x; don't save.\n        _, log_importance_weights = importance_sample(\n            self.potential_fn,\n            proposal=self.proposal,\n            num_samples=num_samples,\n        )\n        return torch.mean(torch.exp(log_importance_weights))\n    elif not_saved_at_default_x or force_update:  # Calculate at default_x; save.\n        assert self.default_x is not None\n        _, log_importance_weights = importance_sample(\n            self.potential_fn,\n            proposal=self.proposal,\n            num_samples=num_samples,\n        )\n        self._normalization_constant = torch.mean(torch.exp(log_importance_weights))\n\n    return self._normalization_constant.to(self._device)  # type: ignore\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.importance_posterior.ImportanceSamplingPosterior.log_prob","title":"<code>log_prob(theta, x=None, track_gradients=False, normalization_constant_params=None)</code>","text":"<p>Returns the log-probability of theta under the posterior.</p> <p>The normalization constant is estimated with importance sampling.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>Tensor</code> <p>Parameters \\(\\theta\\).</p> required <code>track_gradients</code> <code>bool</code> <p>Whether the returned tensor supports tracking gradients. This can be helpful for e.g. sensitivity analysis, but increases memory consumption.</p> <code>False</code> <code>normalization_constant_params</code> <code>Optional[dict]</code> <p>Parameters passed on to <code>estimate_normalization_constant()</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tensor</code> <p><code>len($\\theta$)</code>-shaped log-probability.</p> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>def log_prob(\n    self,\n    theta: Tensor,\n    x: Optional[Tensor] = None,\n    track_gradients: bool = False,\n    normalization_constant_params: Optional[dict] = None,\n) -&gt; Tensor:\n    r\"\"\"Returns the log-probability of theta under the posterior.\n\n    The normalization constant is estimated with importance sampling.\n\n    Args:\n        theta: Parameters $\\theta$.\n        track_gradients: Whether the returned tensor supports tracking gradients.\n            This can be helpful for e.g. sensitivity analysis, but increases memory\n            consumption.\n        normalization_constant_params: Parameters passed on to\n            `estimate_normalization_constant()`.\n\n    Returns:\n        `len($\\theta$)`-shaped log-probability.\n    \"\"\"\n    x = self._x_else_default_x(x)\n    self.potential_fn.set_x(x)\n\n    theta = ensure_theta_batched(torch.as_tensor(theta))\n\n    with torch.set_grad_enabled(track_gradients):\n        potential_values = self.potential_fn(\n            theta.to(self._device), track_gradients=track_gradients\n        )\n\n        if normalization_constant_params is None:\n            normalization_constant_params = dict()  # use defaults\n        normalization_constant = self.estimate_normalization_constant(\n            x, **normalization_constant_params\n        )\n\n        return (potential_values - torch.log(normalization_constant)).to(\n            self._device\n        )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.importance_posterior.ImportanceSamplingPosterior.map","title":"<code>map(x=None, num_iter=1000, num_to_optimize=100, learning_rate=0.01, init_method='proposal', num_init_samples=1000, save_best_every=10, show_progress_bars=False, force_update=False)</code>","text":"<p>Returns the maximum-a-posteriori estimate (MAP).</p> <p>The method can be interrupted (Ctrl-C) when the user sees that the log-probability converges. The best estimate will be saved in <code>self._map</code> and can be accessed with <code>self.map()</code>. The MAP is obtained by running gradient ascent from a given number of starting positions (samples from the posterior with the highest log-probability). After the optimization is done, we select the parameter set that has the highest log-probability after the optimization.</p> <p>Warning: The default values used by this function are not well-tested. They might require hand-tuning for the problem at hand.</p> <p>For developers: if the prior is a <code>BoxUniform</code>, we carry out the optimization in unbounded space and transform the result back into bounded space.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[Tensor]</code> <p>Deprecated - use <code>.set_default_x()</code> prior to <code>.map()</code>.</p> <code>None</code> <code>num_iter</code> <code>int</code> <p>Number of optimization steps that the algorithm takes to find the MAP.</p> <code>1000</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.01</code> <code>init_method</code> <code>Union[str, Tensor]</code> <p>How to select the starting parameters for the optimization. If it is a string, it can be either [<code>posterior</code>, <code>prior</code>], which samples the respective distribution <code>num_init_samples</code> times. If it is a tensor, the tensor will be used as init locations.</p> <code>'proposal'</code> <code>num_init_samples</code> <code>int</code> <p>Draw this number of samples from the posterior and evaluate the log-probability of all of them.</p> <code>1000</code> <code>num_to_optimize</code> <code>int</code> <p>From the drawn <code>num_init_samples</code>, use the <code>num_to_optimize</code> with highest log-probability as the initial points for the optimization.</p> <code>100</code> <code>save_best_every</code> <code>int</code> <p>The best log-probability is computed, saved in the <code>map</code>-attribute, and printed every <code>save_best_every</code>-th iteration. Computing the best log-probability creates a significant overhead (thus, the default is <code>10</code>.)</p> <code>10</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during sampling from the posterior.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the MAP when x is unchanged and have a cached value.</p> <code>False</code> <code>log_prob_kwargs</code> <p>Will be empty for SNLE and SNRE. Will contain {\u2018norm_posterior\u2019: True} for SNPE.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The MAP estimate.</p> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>def map(\n    self,\n    x: Optional[Tensor] = None,\n    num_iter: int = 1_000,\n    num_to_optimize: int = 100,\n    learning_rate: float = 0.01,\n    init_method: Union[str, Tensor] = \"proposal\",\n    num_init_samples: int = 1_000,\n    save_best_every: int = 10,\n    show_progress_bars: bool = False,\n    force_update: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n    The method can be interrupted (Ctrl-C) when the user sees that the\n    log-probability converges. The best estimate will be saved in `self._map` and\n    can be accessed with `self.map()`. The MAP is obtained by running gradient\n    ascent from a given number of starting positions (samples from the posterior\n    with the highest log-probability). After the optimization is done, we select the\n    parameter set that has the highest log-probability after the optimization.\n\n    Warning: The default values used by this function are not well-tested. They\n    might require hand-tuning for the problem at hand.\n\n    For developers: if the prior is a `BoxUniform`, we carry out the optimization\n    in unbounded space and transform the result back into bounded space.\n\n    Args:\n        x: Deprecated - use `.set_default_x()` prior to `.map()`.\n        num_iter: Number of optimization steps that the algorithm takes\n            to find the MAP.\n        learning_rate: Learning rate of the optimizer.\n        init_method: How to select the starting parameters for the optimization. If\n            it is a string, it can be either [`posterior`, `prior`], which samples\n            the respective distribution `num_init_samples` times. If it is a\n            tensor, the tensor will be used as init locations.\n        num_init_samples: Draw this number of samples from the posterior and\n            evaluate the log-probability of all of them.\n        num_to_optimize: From the drawn `num_init_samples`, use the\n            `num_to_optimize` with highest log-probability as the initial points\n            for the optimization.\n        save_best_every: The best log-probability is computed, saved in the\n            `map`-attribute, and printed every `save_best_every`-th iteration.\n            Computing the best log-probability creates a significant overhead\n            (thus, the default is `10`.)\n        show_progress_bars: Whether to show a progressbar during sampling from the\n            posterior.\n        force_update: Whether to re-calculate the MAP when x is unchanged and\n            have a cached value.\n        log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n            {'norm_posterior': True} for SNPE.\n\n    Returns:\n        The MAP estimate.\n    \"\"\"\n    return super().map(\n        x=x,\n        num_iter=num_iter,\n        num_to_optimize=num_to_optimize,\n        learning_rate=learning_rate,\n        init_method=init_method,\n        num_init_samples=num_init_samples,\n        save_best_every=save_best_every,\n        show_progress_bars=show_progress_bars,\n        force_update=force_update,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.importance_posterior.ImportanceSamplingPosterior.sample","title":"<code>sample(sample_shape=torch.Size(), x=None, oversampling_factor=32, max_sampling_batch_size=10000, sample_with=None)</code>","text":"<p>Return samples from the approximate posterior distribution.</p> <p>Parameters:</p> Name Type Description Default <code>sample_shape</code> <code>Shape</code> <p>description</p> <code>Size()</code> <code>x</code> <code>Optional[Tensor]</code> <p>description</p> <code>None</code> Source code in <code>sbi/inference/posteriors/importance_posterior.py</code> <pre><code>def sample(\n    self,\n    sample_shape: Shape = torch.Size(),\n    x: Optional[Tensor] = None,\n    oversampling_factor: int = 32,\n    max_sampling_batch_size: int = 10_000,\n    sample_with: Optional[str] = None,\n) -&gt; Union[Tensor, Tuple[Tensor, Tensor]]:\n    \"\"\"Return samples from the approximate posterior distribution.\n\n    Args:\n        sample_shape: _description_\n        x: _description_\n    \"\"\"\n    if sample_with is not None:\n        raise ValueError(\n            f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n            f\"`sample_with` is no longer supported. You have to rerun \"\n            f\"`.build_posterior(sample_with={sample_with}).`\"\n        )\n\n    self.potential_fn.set_x(self._x_else_default_x(x))\n\n    if self.method == \"sir\":\n        return self._sir_sample(\n            sample_shape,\n            oversampling_factor=oversampling_factor,\n            max_sampling_batch_size=max_sampling_batch_size,\n        )\n    elif self.method == \"importance\":\n        return self._importance_sample(sample_shape)\n    else:\n        raise NameError\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.mcmc_method","title":"<code>mcmc_method: str</code>  <code>property</code> <code>writable</code>","text":"<p>Returns MCMC method.</p>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.posterior_sampler","title":"<code>posterior_sampler</code>  <code>property</code>","text":"<p>Returns sampler created by <code>sample</code>.</p>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.__init__","title":"<code>__init__(potential_fn, proposal, theta_transform=None, method='slice_np', thin=10, warmup_steps=10, num_chains=1, init_strategy='resample', init_strategy_parameters={}, init_strategy_num_candidates=None, num_workers=1, device=None, x_shape=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>potential_fn</code> <code>Callable</code> <p>The potential function from which to draw samples.</p> required <code>proposal</code> <code>Any</code> <p>Proposal distribution that is used to initialize the MCMC chain.</p> required <code>theta_transform</code> <code>Optional[TorchTransform]</code> <p>Transformation that will be applied during sampling. Allows to perform MCMC in unconstrained space.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method used for MCMC sampling, one of <code>slice_np</code>, <code>slice_np_vectorized</code>, <code>slice</code>, <code>hmc</code>, <code>nuts</code>. <code>slice_np</code> is a custom numpy implementation of slice sampling. <code>slice_np_vectorized</code> is identical to <code>slice_np</code>, but if <code>num_chains&gt;1</code>, the chains are vectorized for <code>slice_np_vectorized</code> whereas they are run sequentially for <code>slice_np</code>. The samplers <code>hmc</code>, <code>nuts</code> or <code>slice</code> sample with Pyro.</p> <code>'slice_np'</code> <code>thin</code> <code>int</code> <p>The thinning factor for the chain.</p> <code>10</code> <code>warmup_steps</code> <code>int</code> <p>The initial number of samples to discard.</p> <code>10</code> <code>num_chains</code> <code>int</code> <p>The number of chains.</p> <code>1</code> <code>init_strategy</code> <code>str</code> <p>The initialisation strategy for chains; <code>proposal</code> will draw init locations from <code>proposal</code>, whereas <code>sir</code> will use Sequential- Importance-Resampling (SIR). SIR initially samples <code>init_strategy_num_candidates</code> from the <code>proposal</code>, evaluates all of them under the <code>potential_fn</code> and <code>proposal</code>, and then resamples the initial locations with weights proportional to <code>exp(potential_fn - proposal.log_prob</code>. <code>resample</code> is the same as <code>sir</code> but uses <code>exp(potential_fn)</code> as weights.</p> <code>'resample'</code> <code>init_strategy_parameters</code> <code>Dict[str, Any]</code> <p>Dictionary of keyword arguments passed to the init strategy, e.g., for <code>init_strategy=sir</code> this could be <code>num_candidate_samples</code>, i.e., the number of candidates to to find init locations (internal default is <code>1000</code>), or <code>device</code>.</p> <code>{}</code> <code>init_strategy_num_candidates</code> <code>Optional[int]</code> <p>Number of candidates to to find init  locations in <code>init_strategy=sir</code> (deprecated, use  init_strategy_parameters instead).</p> <code>None</code> <code>num_workers</code> <code>int</code> <p>number of cpu cores used to parallelize mcmc</p> <code>1</code> <code>device</code> <code>Optional[str]</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:0\u201d. If None, <code>potential_fn.device</code> is used.</p> <code>None</code> <code>x_shape</code> <code>Optional[Size]</code> <p>Shape of a single simulator output. If passed, it is used to check the shape of the observed data and give a descriptive error.</p> <code>None</code> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def __init__(\n    self,\n    potential_fn: Callable,\n    proposal: Any,\n    theta_transform: Optional[TorchTransform] = None,\n    method: str = \"slice_np\",\n    thin: int = 10,\n    warmup_steps: int = 10,\n    num_chains: int = 1,\n    init_strategy: str = \"resample\",\n    init_strategy_parameters: Dict[str, Any] = {},\n    init_strategy_num_candidates: Optional[int] = None,\n    num_workers: int = 1,\n    device: Optional[str] = None,\n    x_shape: Optional[torch.Size] = None,\n):\n    \"\"\"\n    Args:\n        potential_fn: The potential function from which to draw samples.\n        proposal: Proposal distribution that is used to initialize the MCMC chain.\n        theta_transform: Transformation that will be applied during sampling.\n            Allows to perform MCMC in unconstrained space.\n        method: Method used for MCMC sampling, one of `slice_np`,\n            `slice_np_vectorized`, `slice`, `hmc`, `nuts`. `slice_np` is a custom\n            numpy implementation of slice sampling. `slice_np_vectorized` is\n            identical to `slice_np`, but if `num_chains&gt;1`, the chains are\n            vectorized for `slice_np_vectorized` whereas they are run sequentially\n            for `slice_np`. The samplers `hmc`, `nuts` or `slice` sample with Pyro.\n        thin: The thinning factor for the chain.\n        warmup_steps: The initial number of samples to discard.\n        num_chains: The number of chains.\n        init_strategy: The initialisation strategy for chains; `proposal` will draw\n            init locations from `proposal`, whereas `sir` will use Sequential-\n            Importance-Resampling (SIR). SIR initially samples\n            `init_strategy_num_candidates` from the `proposal`, evaluates all of\n            them under the `potential_fn` and `proposal`, and then resamples the\n            initial locations with weights proportional to `exp(potential_fn -\n            proposal.log_prob`. `resample` is the same as `sir` but\n            uses `exp(potential_fn)` as weights.\n        init_strategy_parameters: Dictionary of keyword arguments passed to the\n            init strategy, e.g., for `init_strategy=sir` this could be\n            `num_candidate_samples`, i.e., the number of candidates to to find init\n            locations (internal default is `1000`), or `device`.\n        init_strategy_num_candidates: Number of candidates to to find init\n             locations in `init_strategy=sir` (deprecated, use\n             init_strategy_parameters instead).\n        num_workers: number of cpu cores used to parallelize mcmc\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n            `potential_fn.device` is used.\n        x_shape: Shape of a single simulator output. If passed, it is used to check\n            the shape of the observed data and give a descriptive error.\n    \"\"\"\n\n    super().__init__(\n        potential_fn,\n        theta_transform=theta_transform,\n        device=device,\n        x_shape=x_shape,\n    )\n\n    self.proposal = proposal\n    self.method = method\n    self.thin = thin\n    self.warmup_steps = warmup_steps\n    self.num_chains = num_chains\n    self.init_strategy = init_strategy\n    self.init_strategy_parameters = init_strategy_parameters\n    self.num_workers = num_workers\n    self._posterior_sampler = None\n    # Hardcode parameter name to reduce clutter kwargs.\n    self.param_name = \"theta\"\n\n    if init_strategy_num_candidates is not None:\n        warn(\n            \"\"\"Passing `init_strategy_num_candidates` is deprecated as of sbi\n            v0.19.0. Instead, use e.g.,\n            `init_strategy_parameters={\"num_candidate_samples\": 1000}`\"\"\"\n        )\n        self.init_strategy_parameters[\n            \"num_candidate_samples\"\n        ] = init_strategy_num_candidates\n\n    self.potential_ = self._prepare_potential(method)\n\n    self._purpose = (\n        \"It provides MCMC to .sample() from the posterior and \"\n        \"can evaluate the _unnormalized_ posterior density with .log_prob().\"\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.get_arviz_inference_data","title":"<code>get_arviz_inference_data()</code>","text":"<p>Returns arviz InferenceData object constructed most recent samples.</p> <p>Note: the InferenceData is constructed using the posterior samples generated in most recent call to <code>.sample(...)</code>.</p> <p>For Pyro HMC and NUTS kernels InferenceData will contain diagnostics, for Pyro Slice or sbi slice sampling samples, only the samples are added.</p> <p>Returns:</p> Name Type Description <code>inference_data</code> <code>InferenceData</code> <p>Arviz InferenceData object.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def get_arviz_inference_data(self) -&gt; InferenceData:\n    \"\"\"Returns arviz InferenceData object constructed most recent samples.\n\n    Note: the InferenceData is constructed using the posterior samples generated in\n    most recent call to `.sample(...)`.\n\n    For Pyro HMC and NUTS kernels InferenceData will contain diagnostics, for Pyro\n    Slice or sbi slice sampling samples, only the samples are added.\n\n    Returns:\n        inference_data: Arviz InferenceData object.\n    \"\"\"\n    assert (\n        self._posterior_sampler is not None\n    ), \"\"\"No samples have been generated, call .sample() first.\"\"\"\n\n    sampler: Union[\n        MCMC, SliceSamplerSerial, SliceSamplerVectorized\n    ] = self._posterior_sampler\n\n    # If Pyro sampler and samples not transformed, use arviz' from_pyro.\n    # Exclude 'slice' kernel as it lacks the 'divergence' diagnostics key.\n    if isinstance(self._posterior_sampler, (HMC, NUTS)) and isinstance(\n        self.theta_transform, torch_tf.IndependentTransform\n    ):\n        inference_data = az.from_pyro(sampler)\n\n    # otherwise get samples from sampler and transform to original space.\n    else:\n        transformed_samples = sampler.get_samples(group_by_chain=True)\n        # Pyro samplers returns dicts, get values.\n        if isinstance(transformed_samples, Dict):\n            # popitem gets last items, [1] get the values as tensor.\n            transformed_samples = transformed_samples.popitem()[1]\n        # Our slice samplers return numpy arrays.\n        elif isinstance(transformed_samples, ndarray):\n            transformed_samples = torch.from_numpy(transformed_samples).type(\n                torch.float32\n            )\n        # For MultipleIndependent priors transforms first dim must be batch dim.\n        # thus, reshape back and forth to have batch dim in front.\n        samples_shape = transformed_samples.shape\n        samples = self.theta_transform.inv(  # type: ignore\n            transformed_samples.reshape(-1, samples_shape[-1])\n        ).reshape(  # type: ignore\n            *samples_shape\n        )\n\n        inference_data = az.convert_to_inference_data(\n            {f\"{self.param_name}\": samples}\n        )\n\n    return inference_data\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.log_prob","title":"<code>log_prob(theta, x=None, track_gradients=False)</code>","text":"<p>Returns the log-probability of theta under the posterior.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>Tensor</code> <p>Parameters \\(\\theta\\).</p> required <code>track_gradients</code> <code>bool</code> <p>Whether the returned tensor supports tracking gradients. This can be helpful for e.g. sensitivity analysis, but increases memory consumption.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tensor</code> <p><code>len($\\theta$)</code>-shaped log-probability.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def log_prob(\n    self, theta: Tensor, x: Optional[Tensor] = None, track_gradients: bool = False\n) -&gt; Tensor:\n    r\"\"\"Returns the log-probability of theta under the posterior.\n\n    Args:\n        theta: Parameters $\\theta$.\n        track_gradients: Whether the returned tensor supports tracking gradients.\n            This can be helpful for e.g. sensitivity analysis, but increases memory\n            consumption.\n\n    Returns:\n        `len($\\theta$)`-shaped log-probability.\n    \"\"\"\n    warn(\n        \"\"\"`.log_prob()` is deprecated for methods that can only evaluate the\n        log-probability up to a normalizing constant. Use `.potential()` instead.\"\"\"\n    )\n    warn(\"The log-probability is unnormalized!\")\n\n    self.potential_fn.set_x(self._x_else_default_x(x))\n\n    theta = ensure_theta_batched(torch.as_tensor(theta))\n    return self.potential_fn(\n        theta.to(self._device), track_gradients=track_gradients\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.map","title":"<code>map(x=None, num_iter=1000, num_to_optimize=100, learning_rate=0.01, init_method='proposal', num_init_samples=1000, save_best_every=10, show_progress_bars=False, force_update=False)</code>","text":"<p>Returns the maximum-a-posteriori estimate (MAP).</p> <p>The method can be interrupted (Ctrl-C) when the user sees that the log-probability converges. The best estimate will be saved in <code>self._map</code> and can be accessed with <code>self.map()</code>. The MAP is obtained by running gradient ascent from a given number of starting positions (samples from the posterior with the highest log-probability). After the optimization is done, we select the parameter set that has the highest log-probability after the optimization.</p> <p>Warning: The default values used by this function are not well-tested. They might require hand-tuning for the problem at hand.</p> <p>For developers: if the prior is a <code>BoxUniform</code>, we carry out the optimization in unbounded space and transform the result back into bounded space.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[Tensor]</code> <p>Deprecated - use <code>.set_default_x()</code> prior to <code>.map()</code>.</p> <code>None</code> <code>num_iter</code> <code>int</code> <p>Number of optimization steps that the algorithm takes to find the MAP.</p> <code>1000</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.01</code> <code>init_method</code> <code>Union[str, Tensor]</code> <p>How to select the starting parameters for the optimization. If it is a string, it can be either [<code>posterior</code>, <code>prior</code>], which samples the respective distribution <code>num_init_samples</code> times. If it is a tensor, the tensor will be used as init locations.</p> <code>'proposal'</code> <code>num_init_samples</code> <code>int</code> <p>Draw this number of samples from the posterior and evaluate the log-probability of all of them.</p> <code>1000</code> <code>num_to_optimize</code> <code>int</code> <p>From the drawn <code>num_init_samples</code>, use the <code>num_to_optimize</code> with highest log-probability as the initial points for the optimization.</p> <code>100</code> <code>save_best_every</code> <code>int</code> <p>The best log-probability is computed, saved in the <code>map</code>-attribute, and printed every <code>save_best_every</code>-th iteration. Computing the best log-probability creates a significant overhead (thus, the default is <code>10</code>.)</p> <code>10</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during sampling from the posterior.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the MAP when x is unchanged and have a cached value.</p> <code>False</code> <code>log_prob_kwargs</code> <p>Will be empty for SNLE and SNRE. Will contain {\u2018norm_posterior\u2019: True} for SNPE.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The MAP estimate.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def map(\n    self,\n    x: Optional[Tensor] = None,\n    num_iter: int = 1_000,\n    num_to_optimize: int = 100,\n    learning_rate: float = 0.01,\n    init_method: Union[str, Tensor] = \"proposal\",\n    num_init_samples: int = 1_000,\n    save_best_every: int = 10,\n    show_progress_bars: bool = False,\n    force_update: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n    The method can be interrupted (Ctrl-C) when the user sees that the\n    log-probability converges. The best estimate will be saved in `self._map` and\n    can be accessed with `self.map()`. The MAP is obtained by running gradient\n    ascent from a given number of starting positions (samples from the posterior\n    with the highest log-probability). After the optimization is done, we select the\n    parameter set that has the highest log-probability after the optimization.\n\n    Warning: The default values used by this function are not well-tested. They\n    might require hand-tuning for the problem at hand.\n\n    For developers: if the prior is a `BoxUniform`, we carry out the optimization\n    in unbounded space and transform the result back into bounded space.\n\n    Args:\n        x: Deprecated - use `.set_default_x()` prior to `.map()`.\n        num_iter: Number of optimization steps that the algorithm takes\n            to find the MAP.\n        learning_rate: Learning rate of the optimizer.\n        init_method: How to select the starting parameters for the optimization. If\n            it is a string, it can be either [`posterior`, `prior`], which samples\n            the respective distribution `num_init_samples` times. If it is a\n            tensor, the tensor will be used as init locations.\n        num_init_samples: Draw this number of samples from the posterior and\n            evaluate the log-probability of all of them.\n        num_to_optimize: From the drawn `num_init_samples`, use the\n            `num_to_optimize` with highest log-probability as the initial points\n            for the optimization.\n        save_best_every: The best log-probability is computed, saved in the\n            `map`-attribute, and printed every `save_best_every`-th iteration.\n            Computing the best log-probability creates a significant overhead\n            (thus, the default is `10`.)\n        show_progress_bars: Whether to show a progressbar during sampling from\n            the posterior.\n        force_update: Whether to re-calculate the MAP when x is unchanged and\n            have a cached value.\n        log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n            {'norm_posterior': True} for SNPE.\n\n    Returns:\n        The MAP estimate.\n    \"\"\"\n    return super().map(\n        x=x,\n        num_iter=num_iter,\n        num_to_optimize=num_to_optimize,\n        learning_rate=learning_rate,\n        init_method=init_method,\n        num_init_samples=num_init_samples,\n        save_best_every=save_best_every,\n        show_progress_bars=show_progress_bars,\n        force_update=force_update,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.sample","title":"<code>sample(sample_shape=torch.Size(), x=None, method=None, thin=None, warmup_steps=None, num_chains=None, init_strategy=None, init_strategy_parameters=None, init_strategy_num_candidates=None, mcmc_parameters={}, mcmc_method=None, sample_with=None, num_workers=None, show_progress_bars=True)</code>","text":"<p>Return samples from posterior distribution \\(p(\\theta|x)\\) with MCMC.</p> <p>Check the <code>__init__()</code> method for a description of all arguments as well as their default values.</p> <p>Parameters:</p> Name Type Description Default <code>sample_shape</code> <code>Shape</code> <p>Desired shape of samples that are drawn from posterior. If sample_shape is multidimensional we simply draw <code>sample_shape.numel()</code> samples and then reshape into the desired shape.</p> <code>Size()</code> <code>mcmc_parameters</code> <code>Dict</code> <p>Dictionary that is passed only to support the API of <code>sbi</code> v0.17.2 or older.</p> <code>{}</code> <code>mcmc_method</code> <code>Optional[str]</code> <p>This argument only exists to keep backward-compatibility with <code>sbi</code> v0.17.2 or older. Please use <code>method</code> instead.</p> <code>None</code> <code>sample_with</code> <code>Optional[str]</code> <p>This argument only exists to keep backward-compatibility with <code>sbi</code> v0.17.2 or older. If it is set, we instantly raise an error.</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show sampling progress monitor.</p> <code>True</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>Samples from posterior.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def sample(\n    self,\n    sample_shape: Shape = torch.Size(),\n    x: Optional[Tensor] = None,\n    method: Optional[str] = None,\n    thin: Optional[int] = None,\n    warmup_steps: Optional[int] = None,\n    num_chains: Optional[int] = None,\n    init_strategy: Optional[str] = None,\n    init_strategy_parameters: Optional[Dict[str, Any]] = None,\n    init_strategy_num_candidates: Optional[int] = None,\n    mcmc_parameters: Dict = {},\n    mcmc_method: Optional[str] = None,\n    sample_with: Optional[str] = None,\n    num_workers: Optional[int] = None,\n    show_progress_bars: bool = True,\n) -&gt; Tensor:\n    r\"\"\"Return samples from posterior distribution $p(\\theta|x)$ with MCMC.\n\n    Check the `__init__()` method for a description of all arguments as well as\n    their default values.\n\n    Args:\n        sample_shape: Desired shape of samples that are drawn from posterior. If\n            sample_shape is multidimensional we simply draw `sample_shape.numel()`\n            samples and then reshape into the desired shape.\n        mcmc_parameters: Dictionary that is passed only to support the API of\n            `sbi` v0.17.2 or older.\n        mcmc_method: This argument only exists to keep backward-compatibility with\n            `sbi` v0.17.2 or older. Please use `method` instead.\n        sample_with: This argument only exists to keep backward-compatibility with\n            `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n        show_progress_bars: Whether to show sampling progress monitor.\n\n    Returns:\n        Samples from posterior.\n    \"\"\"\n    self.potential_fn.set_x(self._x_else_default_x(x))\n\n    # Replace arguments that were not passed with their default.\n    method = self.method if method is None else method\n    thin = self.thin if thin is None else thin\n    warmup_steps = self.warmup_steps if warmup_steps is None else warmup_steps\n    num_chains = self.num_chains if num_chains is None else num_chains\n    init_strategy = self.init_strategy if init_strategy is None else init_strategy\n    num_workers = self.num_workers if num_workers is None else num_workers\n    init_strategy_parameters = (\n        self.init_strategy_parameters\n        if init_strategy_parameters is None\n        else init_strategy_parameters\n    )\n    if init_strategy_num_candidates is not None:\n        warn(\n            \"\"\"Passing `init_strategy_num_candidates` is deprecated as of sbi\n            v0.19.0. Instead, use e.g.,\n            `init_strategy_parameters={\"num_candidate_samples\": 1000}`\"\"\"\n        )\n        self.init_strategy_parameters[\n            \"num_candidate_samples\"\n        ] = init_strategy_num_candidates\n    if sample_with is not None:\n        raise ValueError(\n            f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n            f\"`sample_with` is no longer supported. You have to rerun \"\n            f\"`.build_posterior(sample_with={sample_with}).`\"\n        )\n    if mcmc_method is not None:\n        warn(\n            \"You passed `mcmc_method` to `.sample()`. As of sbi v0.18.0, this \"\n            \"is deprecated and will be removed in a future release. Use `method` \"\n            \"instead of `mcmc_method`.\"\n        )\n        method = mcmc_method\n    if mcmc_parameters:\n        warn(\n            \"You passed `mcmc_parameters` to `.sample()`. As of sbi v0.18.0, this \"\n            \"is deprecated and will be removed in a future release. Instead, pass \"\n            \"the variable to `.sample()` directly, e.g. \"\n            \"`posterior.sample((1,), num_chains=5)`.\"\n        )\n    # The following lines are only for backwards compatibility with sbi v0.17.2 or\n    # older.\n    m_p = mcmc_parameters  # define to shorten the variable name\n    method = _maybe_use_dict_entry(method, \"mcmc_method\", m_p)\n    thin = _maybe_use_dict_entry(thin, \"thin\", m_p)\n    warmup_steps = _maybe_use_dict_entry(warmup_steps, \"warmup_steps\", m_p)\n    num_chains = _maybe_use_dict_entry(num_chains, \"num_chains\", m_p)\n    init_strategy = _maybe_use_dict_entry(init_strategy, \"init_strategy\", m_p)\n    self.potential_ = self._prepare_potential(method)  # type: ignore\n\n    initial_params = self._get_initial_params(\n        init_strategy,  # type: ignore\n        num_chains,  # type: ignore\n        num_workers,\n        show_progress_bars,\n        **init_strategy_parameters,\n    )\n    num_samples = torch.Size(sample_shape).numel()\n\n    track_gradients = method in (\"hmc\", \"nuts\")\n    with torch.set_grad_enabled(track_gradients):\n        if method in (\"slice_np\", \"slice_np_vectorized\"):\n            transformed_samples = self._slice_np_mcmc(\n                num_samples=num_samples,\n                potential_function=self.potential_,\n                initial_params=initial_params,\n                thin=thin,  # type: ignore\n                warmup_steps=warmup_steps,  # type: ignore\n                vectorized=(method == \"slice_np_vectorized\"),\n                num_workers=num_workers,\n                show_progress_bars=show_progress_bars,\n            )\n        elif method in (\"hmc\", \"nuts\", \"slice\"):\n            transformed_samples = self._pyro_mcmc(\n                num_samples=num_samples,\n                potential_function=self.potential_,\n                initial_params=initial_params,\n                mcmc_method=method,  # type: ignore\n                thin=thin,  # type: ignore\n                warmup_steps=warmup_steps,  # type: ignore\n                num_chains=num_chains,\n                show_progress_bars=show_progress_bars,\n            )\n        else:\n            raise NameError\n\n    samples = self.theta_transform.inv(transformed_samples)\n\n    return samples.reshape((*sample_shape, -1))  # type: ignore\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.mcmc_posterior.MCMCPosterior.set_mcmc_method","title":"<code>set_mcmc_method(method)</code>","text":"<p>Sets sampling method to for MCMC and returns <code>NeuralPosterior</code>.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>Method to use.</p> required <p>Returns:</p> Type Description <code>NeuralPosterior</code> <p><code>NeuralPosterior</code> for chainable calls.</p> Source code in <code>sbi/inference/posteriors/mcmc_posterior.py</code> <pre><code>def set_mcmc_method(self, method: str) -&gt; \"NeuralPosterior\":\n    \"\"\"Sets sampling method to for MCMC and returns `NeuralPosterior`.\n\n    Args:\n        method: Method to use.\n\n    Returns:\n        `NeuralPosterior` for chainable calls.\n    \"\"\"\n    self._mcmc_method = method\n    return self\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.rejection_posterior.RejectionPosterior.__init__","title":"<code>__init__(potential_fn, proposal, theta_transform=None, max_sampling_batch_size=10000, num_samples_to_find_max=10000, num_iter_to_find_max=100, m=1.2, device=None, x_shape=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>potential_fn</code> <code>Callable</code> <p>The potential function from which to draw samples.</p> required <code>proposal</code> <code>Any</code> <p>The proposal distribution.</p> required <code>theta_transform</code> <code>Optional[TorchTransform]</code> <p>Transformation that is applied to parameters. Is not used during but only when calling <code>.map()</code>.</p> <code>None</code> <code>max_sampling_batch_size</code> <code>int</code> <p>The batchsize of samples being drawn from the proposal at every iteration.</p> <code>10000</code> <code>num_samples_to_find_max</code> <code>int</code> <p>The number of samples that are used to find the maximum of the <code>potential_fn / proposal</code> ratio.</p> <code>10000</code> <code>num_iter_to_find_max</code> <code>int</code> <p>The number of gradient ascent iterations to find the maximum of the <code>potential_fn / proposal</code> ratio.</p> <code>100</code> <code>m</code> <code>float</code> <p>Multiplier to the <code>potential_fn / proposal</code> ratio.</p> <code>1.2</code> <code>device</code> <code>Optional[str]</code> <p>Training device, e.g., \u201ccpu\u201d, \u201ccuda\u201d or \u201ccuda:0\u201d. If None, <code>potential_fn.device</code> is used.</p> <code>None</code> <code>x_shape</code> <code>Optional[Size]</code> <p>Shape of a single simulator output. If passed, it is used to check the shape of the observed data and give a descriptive error.</p> <code>None</code> Source code in <code>sbi/inference/posteriors/rejection_posterior.py</code> <pre><code>def __init__(\n    self,\n    potential_fn: Callable,\n    proposal: Any,\n    theta_transform: Optional[TorchTransform] = None,\n    max_sampling_batch_size: int = 10_000,\n    num_samples_to_find_max: int = 10_000,\n    num_iter_to_find_max: int = 100,\n    m: float = 1.2,\n    device: Optional[str] = None,\n    x_shape: Optional[torch.Size] = None,\n):\n    \"\"\"\n    Args:\n        potential_fn: The potential function from which to draw samples.\n        proposal: The proposal distribution.\n        theta_transform: Transformation that is applied to parameters. Is not used\n            during but only when calling `.map()`.\n        max_sampling_batch_size: The batchsize of samples being drawn from\n            the proposal at every iteration.\n        num_samples_to_find_max: The number of samples that are used to find the\n            maximum of the `potential_fn / proposal` ratio.\n        num_iter_to_find_max: The number of gradient ascent iterations to find the\n            maximum of the `potential_fn / proposal` ratio.\n        m: Multiplier to the `potential_fn / proposal` ratio.\n        device: Training device, e.g., \"cpu\", \"cuda\" or \"cuda:0\". If None,\n            `potential_fn.device` is used.\n        x_shape: Shape of a single simulator output. If passed, it is used to check\n            the shape of the observed data and give a descriptive error.\n    \"\"\"\n    super().__init__(\n        potential_fn,\n        theta_transform=theta_transform,\n        device=device,\n        x_shape=x_shape,\n    )\n\n    self.proposal = proposal\n    self.max_sampling_batch_size = max_sampling_batch_size\n    self.num_samples_to_find_max = num_samples_to_find_max\n    self.num_iter_to_find_max = num_iter_to_find_max\n    self.m = m\n\n    self._purpose = (\n        \"It provides rejection sampling to .sample() from the posterior and \"\n        \"can evaluate the _unnormalized_ posterior density with .log_prob().\"\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.rejection_posterior.RejectionPosterior.log_prob","title":"<code>log_prob(theta, x=None, track_gradients=False)</code>","text":"<p>Returns the log-probability of theta under the posterior.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>Tensor</code> <p>Parameters \\(\\theta\\).</p> required <code>track_gradients</code> <code>bool</code> <p>Whether the returned tensor supports tracking gradients. This can be helpful for e.g. sensitivity analysis, but increases memory consumption.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tensor</code> <p><code>len($\\theta$)</code>-shaped log-probability.</p> Source code in <code>sbi/inference/posteriors/rejection_posterior.py</code> <pre><code>def log_prob(\n    self, theta: Tensor, x: Optional[Tensor] = None, track_gradients: bool = False\n) -&gt; Tensor:\n    r\"\"\"Returns the log-probability of theta under the posterior.\n\n    Args:\n        theta: Parameters $\\theta$.\n        track_gradients: Whether the returned tensor supports tracking gradients.\n            This can be helpful for e.g. sensitivity analysis, but increases memory\n            consumption.\n\n    Returns:\n        `len($\\theta$)`-shaped log-probability.\n    \"\"\"\n    warn(\n        \"`.log_prob()` is deprecated for methods that can only evaluate the log-probability up to a normalizing constant. Use `.potential()` instead.\"\n    )\n    warn(\"The log-probability is unnormalized!\")\n\n    self.potential_fn.set_x(self._x_else_default_x(x))\n\n    theta = ensure_theta_batched(torch.as_tensor(theta))\n    return self.potential_fn(\n        theta.to(self._device), track_gradients=track_gradients\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.rejection_posterior.RejectionPosterior.map","title":"<code>map(x=None, num_iter=1000, num_to_optimize=100, learning_rate=0.01, init_method='proposal', num_init_samples=1000, save_best_every=10, show_progress_bars=False, force_update=False)</code>","text":"<p>Returns the maximum-a-posteriori estimate (MAP).</p> <p>The method can be interrupted (Ctrl-C) when the user sees that the log-probability converges. The best estimate will be saved in <code>self._map</code> and can be accessed with <code>self.map()</code>. The MAP is obtained by running gradient ascent from a given number of starting positions (samples from the posterior with the highest log-probability). After the optimization is done, we select the parameter set that has the highest log-probability after the optimization.</p> <p>Warning: The default values used by this function are not well-tested. They might require hand-tuning for the problem at hand.</p> <p>For developers: if the prior is a <code>BoxUniform</code>, we carry out the optimization in unbounded space and transform the result back into bounded space.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[Tensor]</code> <p>Deprecated - use <code>.set_default_x()</code> prior to <code>.map()</code>.</p> <code>None</code> <code>num_iter</code> <code>int</code> <p>Number of optimization steps that the algorithm takes to find the MAP.</p> <code>1000</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.01</code> <code>init_method</code> <code>Union[str, Tensor]</code> <p>How to select the starting parameters for the optimization. If it is a string, it can be either [<code>posterior</code>, <code>prior</code>], which samples the respective distribution <code>num_init_samples</code> times. If it is a tensor, the tensor will be used as init locations.</p> <code>'proposal'</code> <code>num_init_samples</code> <code>int</code> <p>Draw this number of samples from the posterior and evaluate the log-probability of all of them.</p> <code>1000</code> <code>num_to_optimize</code> <code>int</code> <p>From the drawn <code>num_init_samples</code>, use the <code>num_to_optimize</code> with highest log-probability as the initial points for the optimization.</p> <code>100</code> <code>save_best_every</code> <code>int</code> <p>The best log-probability is computed, saved in the <code>map</code>-attribute, and printed every <code>save_best_every</code>-th iteration. Computing the best log-probability creates a significant overhead (thus, the default is <code>10</code>.)</p> <code>10</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during sampling from the posterior.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the MAP when x is unchanged and have a cached value.</p> <code>False</code> <code>log_prob_kwargs</code> <p>Will be empty for SNLE and SNRE. Will contain {\u2018norm_posterior\u2019: True} for SNPE.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The MAP estimate.</p> Source code in <code>sbi/inference/posteriors/rejection_posterior.py</code> <pre><code>def map(\n    self,\n    x: Optional[Tensor] = None,\n    num_iter: int = 1_000,\n    num_to_optimize: int = 100,\n    learning_rate: float = 0.01,\n    init_method: Union[str, Tensor] = \"proposal\",\n    num_init_samples: int = 1_000,\n    save_best_every: int = 10,\n    show_progress_bars: bool = False,\n    force_update: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n    The method can be interrupted (Ctrl-C) when the user sees that the\n    log-probability converges. The best estimate will be saved in `self._map` and\n    can be accessed with `self.map()`. The MAP is obtained by running gradient\n    ascent from a given number of starting positions (samples from the posterior\n    with the highest log-probability). After the optimization is done, we select the\n    parameter set that has the highest log-probability after the optimization.\n\n    Warning: The default values used by this function are not well-tested. They\n    might require hand-tuning for the problem at hand.\n\n    For developers: if the prior is a `BoxUniform`, we carry out the optimization\n    in unbounded space and transform the result back into bounded space.\n\n    Args:\n        x: Deprecated - use `.set_default_x()` prior to `.map()`.\n        num_iter: Number of optimization steps that the algorithm takes\n            to find the MAP.\n        learning_rate: Learning rate of the optimizer.\n        init_method: How to select the starting parameters for the optimization. If\n            it is a string, it can be either [`posterior`, `prior`], which samples\n            the respective distribution `num_init_samples` times. If it is a\n            tensor, the tensor will be used as init locations.\n        num_init_samples: Draw this number of samples from the posterior and\n            evaluate the log-probability of all of them.\n        num_to_optimize: From the drawn `num_init_samples`, use the\n            `num_to_optimize` with highest log-probability as the initial points\n            for the optimization.\n        save_best_every: The best log-probability is computed, saved in the\n            `map`-attribute, and printed every `save_best_every`-th iteration.\n            Computing the best log-probability creates a significant overhead\n            (thus, the default is `10`.)\n        show_progress_bars: Whether to show a progressbar during sampling from\n            the posterior.\n        force_update: Whether to re-calculate the MAP when x is unchanged and\n            have a cached value.\n        log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n            {'norm_posterior': True} for SNPE.\n\n    Returns:\n        The MAP estimate.\n    \"\"\"\n    return super().map(\n        x=x,\n        num_iter=num_iter,\n        num_to_optimize=num_to_optimize,\n        learning_rate=learning_rate,\n        init_method=init_method,\n        num_init_samples=num_init_samples,\n        save_best_every=save_best_every,\n        show_progress_bars=show_progress_bars,\n        force_update=force_update,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.rejection_posterior.RejectionPosterior.sample","title":"<code>sample(sample_shape=torch.Size(), x=None, max_sampling_batch_size=None, num_samples_to_find_max=None, num_iter_to_find_max=None, m=None, sample_with=None, show_progress_bars=True)</code>","text":"<p>Return samples from posterior \\(p(\\theta|x)\\) via rejection sampling.</p> <p>Parameters:</p> Name Type Description Default <code>sample_shape</code> <code>Shape</code> <p>Desired shape of samples that are drawn from posterior. If sample_shape is multidimensional we simply draw <code>sample_shape.numel()</code> samples and then reshape into the desired shape.</p> <code>Size()</code> <code>sample_with</code> <code>Optional[str]</code> <p>This argument only exists to keep backward-compatibility with <code>sbi</code> v0.17.2 or older. If it is set, we instantly raise an error.</p> <code>None</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show sampling progress monitor.</p> <code>True</code> <p>Returns:</p> Type Description <p>Samples from posterior.</p> Source code in <code>sbi/inference/posteriors/rejection_posterior.py</code> <pre><code>def sample(\n    self,\n    sample_shape: Shape = torch.Size(),\n    x: Optional[Tensor] = None,\n    max_sampling_batch_size: Optional[int] = None,\n    num_samples_to_find_max: Optional[int] = None,\n    num_iter_to_find_max: Optional[int] = None,\n    m: Optional[float] = None,\n    sample_with: Optional[str] = None,\n    show_progress_bars: bool = True,\n):\n    r\"\"\"Return samples from posterior $p(\\theta|x)$ via rejection sampling.\n\n    Args:\n        sample_shape: Desired shape of samples that are drawn from posterior. If\n            sample_shape is multidimensional we simply draw `sample_shape.numel()`\n            samples and then reshape into the desired shape.\n        sample_with: This argument only exists to keep backward-compatibility with\n            `sbi` v0.17.2 or older. If it is set, we instantly raise an error.\n        show_progress_bars: Whether to show sampling progress monitor.\n\n    Returns:\n        Samples from posterior.\n    \"\"\"\n    num_samples = torch.Size(sample_shape).numel()\n    self.potential_fn.set_x(self._x_else_default_x(x))\n\n    potential = partial(self.potential_fn, track_gradients=True)\n\n    if sample_with is not None:\n        raise ValueError(\n            f\"You set `sample_with={sample_with}`. As of sbi v0.18.0, setting \"\n            f\"`sample_with` is no longer supported. You have to rerun \"\n            f\"`.build_posterior(sample_with={sample_with}).`\"\n        )\n    # Replace arguments that were not passed with their default.\n    max_sampling_batch_size = (\n        self.max_sampling_batch_size\n        if max_sampling_batch_size is None\n        else max_sampling_batch_size\n    )\n    num_samples_to_find_max = (\n        self.num_samples_to_find_max\n        if num_samples_to_find_max is None\n        else num_samples_to_find_max\n    )\n    num_iter_to_find_max = (\n        self.num_iter_to_find_max\n        if num_iter_to_find_max is None\n        else num_iter_to_find_max\n    )\n    m = self.m if m is None else m\n\n    samples, _ = rejection_sample(\n        potential,\n        proposal=self.proposal,\n        num_samples=num_samples,\n        show_progress_bars=show_progress_bars,\n        warn_acceptance=0.01,\n        max_sampling_batch_size=max_sampling_batch_size,\n        num_samples_to_find_max=num_samples_to_find_max,\n        num_iter_to_find_max=num_iter_to_find_max,\n        m=m,\n        device=self._device,\n    )\n\n    return samples.reshape((*sample_shape, -1))\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.q","title":"<code>q: Distribution</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the variational posterior.</p>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.vi_method","title":"<code>vi_method: str</code>  <code>property</code> <code>writable</code>","text":"<p>Variational inference method e.g. one of [rKL, fKL, IW, alpha].</p>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.__init__","title":"<code>__init__(potential_fn, prior=None, q='maf', theta_transform=None, vi_method='rKL', device='cpu', x_shape=None, parameters=[], modules=[])</code>","text":"<p>Parameters:</p> Name Type Description Default <code>potential_fn</code> <code>Callable</code> <p>The potential function from which to draw samples.</p> required <code>prior</code> <code>Optional[TorchDistribution]</code> <p>This is the prior distribution. Note that this is only used to check/construct the variational distribution or within some quality metrics. Please make sure that this matches with the prior within the potential_fn. If <code>None</code> is given, we will try to infer it from potential_fn or q, if this fails we raise an Error.</p> <code>None</code> <code>q</code> <code>Union[str, PyroTransformedDistribution, VIPosterior, Callable]</code> <p>Variational distribution, either string, <code>TransformedDistribution</code>, or a <code>VIPosterior</code> object. This specifies a parametric class of distribution over which the best possible posterior approximation is searched. For string input, we currently support [nsf, scf, maf, mcf, gaussian, gaussian_diag]. You can also specify your own variational family by passing a pyro <code>TransformedDistribution</code>. Additionally, we allow a <code>Callable</code>, which allows you the pass a <code>builder</code> function, which if called returns a distribution. This may be useful for setting the hyperparameters e.g. <code>num_transfroms</code> within the <code>get_flow_builder</code> method specifying the number of transformations within a normalizing flow. If q is already a <code>VIPosterior</code>, then the arguments will be copied from it (relevant for multi-round training).</p> <code>'maf'</code> <code>theta_transform</code> <code>Optional[TorchTransform]</code> <p>Maps form prior support to unconstrained space. The inverse is used here to ensure that the posterior support is equal to that of the prior.</p> <code>None</code> <code>vi_method</code> <code>str</code> <p>This specifies the variational methods which are used to fit q to the posterior. We currently support [rKL, fKL, IW, alpha]. Note that some of the divergences are <code>mode seeking</code> i.e. they underestimate variance and collapse on multimodal targets (<code>rKL</code>, <code>alpha</code> for alpha &gt; 1) and some are <code>mass covering</code> i.e. they overestimate variance but typically cover all modes (<code>fKL</code>, <code>IW</code>, <code>alpha</code> for alpha &lt; 1).</p> <code>'rKL'</code> <code>device</code> <code>str</code> <p>Training device, e.g., <code>cpu</code>, <code>cuda</code> or <code>cuda:0</code>. We will ensure that all other objects are also on this device.</p> <code>'cpu'</code> <code>x_shape</code> <code>Optional[Size]</code> <p>Shape of a single simulator output. If passed, it is used to check the shape of the observed data and give a descriptive error.</p> <code>None</code> <code>parameters</code> <code>Iterable</code> <p>List of parameters of the variational posterior. This is only required for user-defined q i.e. if q does not have a <code>parameters</code> attribute.</p> <code>[]</code> <code>modules</code> <code>Iterable</code> <p>List of modules of the variational posterior. This is only required for user-defined q i.e. if q does not have a <code>modules</code> attribute.</p> <code>[]</code> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def __init__(\n    self,\n    potential_fn: Callable,\n    prior: Optional[TorchDistribution] = None,\n    q: Union[str, PyroTransformedDistribution, \"VIPosterior\", Callable] = \"maf\",\n    theta_transform: Optional[TorchTransform] = None,\n    vi_method: str = \"rKL\",\n    device: str = \"cpu\",\n    x_shape: Optional[torch.Size] = None,\n    parameters: Iterable = [],\n    modules: Iterable = [],\n):\n    \"\"\"\n    Args:\n        potential_fn: The potential function from which to draw samples.\n        prior: This is the prior distribution. Note that this is only\n            used to check/construct the variational distribution or within some\n            quality metrics. Please make sure that this matches with the prior\n            within the potential_fn. If `None` is given, we will try to infer it\n            from potential_fn or q, if this fails we raise an Error.\n        q: Variational distribution, either string, `TransformedDistribution`, or a\n            `VIPosterior` object. This specifies a parametric class of distribution\n            over which the best possible posterior approximation is searched. For\n            string input, we currently support [nsf, scf, maf, mcf, gaussian,\n            gaussian_diag]. You can also specify your own variational family by\n            passing a pyro `TransformedDistribution`.\n            Additionally, we allow a `Callable`, which allows you the pass a\n            `builder` function, which if called returns a distribution. This may be\n            useful for setting the hyperparameters e.g. `num_transfroms` within the\n            `get_flow_builder` method specifying the number of transformations\n            within a normalizing flow. If q is already a `VIPosterior`, then the\n            arguments will be copied from it (relevant for multi-round training).\n        theta_transform: Maps form prior support to unconstrained space. The\n            inverse is used here to ensure that the posterior support is equal to\n            that of the prior.\n        vi_method: This specifies the variational methods which are used to fit q to\n            the posterior. We currently support [rKL, fKL, IW, alpha]. Note that\n            some of the divergences are `mode seeking` i.e. they underestimate\n            variance and collapse on multimodal targets (`rKL`, `alpha` for alpha &gt;\n            1) and some are `mass covering` i.e. they overestimate variance but\n            typically cover all modes (`fKL`, `IW`, `alpha` for alpha &lt; 1).\n        device: Training device, e.g., `cpu`, `cuda` or `cuda:0`. We will ensure\n            that all other objects are also on this device.\n        x_shape: Shape of a single simulator output. If passed, it is used to check\n            the shape of the observed data and give a descriptive error.\n        parameters: List of parameters of the variational posterior. This is only\n            required for user-defined q i.e. if q does not have a `parameters`\n            attribute.\n        modules: List of modules of the variational posterior. This is only\n            required for user-defined q i.e. if q does not have a `modules`\n            attribute.\n    \"\"\"\n    super().__init__(potential_fn, theta_transform, device, x_shape=x_shape)\n\n    # Especially the prior may be on another device -&gt; move it...\n    self._device = device\n    self.potential_fn.device = device\n    move_all_tensor_to_device(self.potential_fn, device)\n\n    # Get prior and previous builds\n    if prior is not None:\n        self._prior = prior\n    elif hasattr(self.potential_fn, \"prior\") and isinstance(\n        self.potential_fn.prior, Distribution\n    ):\n        self._prior = self.potential_fn.prior\n    elif isinstance(q, VIPosterior) and isinstance(q._prior, Distribution):\n        self._prior = q._prior\n    else:\n        raise ValueError(\n            \"We could not find a suitable prior distribution within `potential_fn`\"\n            \"or `q` (if a VIPosterior is given). Please explicitly specify a prior.\"\n        )\n    move_all_tensor_to_device(self._prior, device)\n    self._optimizer = None\n\n    # In contrast to MCMC we want to project into constrained space.\n    if theta_transform is None:\n        self.link_transform = mcmc_transform(self._prior).inv\n    else:\n        self.link_transform = theta_transform.inv\n\n    # This will set the variational distribution and VI method\n    self.set_q(q, parameters=parameters, modules=modules)\n    self.set_vi_method(vi_method)\n\n    self._purpose = (\n        \"It provides Variational inference to .sample() from the posterior and \"\n        \"can evaluate the _normalized_ posterior density with .log_prob().\"\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.evaluate","title":"<code>evaluate(quality_control_metric='psis', N=int(50000.0))</code>","text":"<p>This function will evaluate the quality of the variational posterior distribution. We currently support two different metrics of type <code>psis</code>, which checks the quality based on the tails of importance weights (there should not be much with a large one), or <code>prop</code> which checks the proportionality between q and potential_fn.</p> <p>NOTE: In our experience <code>prop</code> is sensitive to distinguish <code>good</code> from <code>ok</code> whereas <code>psis</code> is more sensitive in distinguishing <code>very bad</code> from <code>ok</code>.</p> <p>Parameters:</p> Name Type Description Default <code>quality_control_metric</code> <code>str</code> <p>The metric of choice, we currently support [psis, prop, prop_prior].</p> <code>'psis'</code> <code>N</code> <code>int</code> <p>Number of samples which is used to evaluate the metric.</p> <code>int(50000.0)</code> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def evaluate(self, quality_control_metric: str = \"psis\", N: int = int(5e4)) -&gt; None:\n    \"\"\"This function will evaluate the quality of the variational posterior\n    distribution. We currently support two different metrics of type `psis`, which\n    checks the quality based on the tails of importance weights (there should not be\n    much with a large one), or `prop` which checks the proportionality between q\n    and potential_fn.\n\n    NOTE: In our experience `prop` is sensitive to distinguish ``good`` from ``ok``\n    whereas `psis` is more sensitive in distinguishing `very bad` from `ok`.\n\n    Args:\n        quality_control_metric: The metric of choice, we currently support [psis,\n            prop, prop_prior].\n        N: Number of samples which is used to evaluate the metric.\n    \"\"\"\n    quality_control_fn, quality_control_msg = get_quality_metric(\n        quality_control_metric\n    )\n    metric = round(float(quality_control_fn(self, N=N)), 3)\n    print(f\"Quality Score: {metric} \" + quality_control_msg)\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.log_prob","title":"<code>log_prob(theta, x=None, track_gradients=False)</code>","text":"<p>Returns the log-probability of theta under the variational posterior.</p> <p>Parameters:</p> Name Type Description Default <code>theta</code> <code>Tensor</code> <p>Parameters</p> required <code>track_gradients</code> <code>bool</code> <p>Whether the returned tensor supports tracking gradients. This can be helpful for e.g. sensitivity analysis but increases memory consumption.</p> <code>False</code> <p>Returns:</p> Type Description <code>Tensor</code> <p><code>len($\\theta$)</code>-shaped log-probability.</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def log_prob(\n    self,\n    theta: Tensor,\n    x: Optional[Tensor] = None,\n    track_gradients: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the log-probability of theta under the variational posterior.\n\n    Args:\n        theta: Parameters\n        track_gradients: Whether the returned tensor supports tracking gradients.\n            This can be helpful for e.g. sensitivity analysis but increases memory\n            consumption.\n\n    Returns:\n        `len($\\theta$)`-shaped log-probability.\n    \"\"\"\n    x = self._x_else_default_x(x)\n    if self._trained_on is None or (x != self._trained_on).all():\n        raise AttributeError(\n            f\"The variational posterior was not fit using observation {x}.\\\n                 Please train.\"\n        )\n    with torch.set_grad_enabled(track_gradients):\n        theta = ensure_theta_batched(torch.as_tensor(theta))\n        return self.q.log_prob(theta)\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.map","title":"<code>map(x=None, num_iter=1000, num_to_optimize=100, learning_rate=0.01, init_method='proposal', num_init_samples=10000, save_best_every=10, show_progress_bars=False, force_update=False)</code>","text":"<p>Returns the maximum-a-posteriori estimate (MAP).</p> <p>The method can be interrupted (Ctrl-C) when the user sees that the log-probability converges. The best estimate will be saved in <code>self._map</code> and can be accessed with <code>self.map()</code>. The MAP is obtained by running gradient ascent from a given number of starting positions (samples from the posterior with the highest log-probability). After the optimization is done, we select the parameter set that has the highest log-probability after the optimization.</p> <p>Warning: The default values used by this function are not well-tested. They might require hand-tuning for the problem at hand.</p> <p>For developers: if the prior is a <code>BoxUniform</code>, we carry out the optimization in unbounded space and transform the result back into bounded space.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[TorchTensor]</code> <p>Deprecated - use <code>.set_default_x()</code> prior to <code>.map()</code>.</p> <code>None</code> <code>num_iter</code> <code>int</code> <p>Number of optimization steps that the algorithm takes to find the MAP.</p> <code>1000</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.01</code> <code>init_method</code> <code>Union[str, TorchTensor]</code> <p>How to select the starting parameters for the optimization. If it is a string, it can be either [<code>posterior</code>, <code>prior</code>], which samples the respective distribution <code>num_init_samples</code> times. If it is a tensor, the tensor will be used as init locations.</p> <code>'proposal'</code> <code>num_init_samples</code> <code>int</code> <p>Draw this number of samples from the posterior and evaluate the log-probability of all of them.</p> <code>10000</code> <code>num_to_optimize</code> <code>int</code> <p>From the drawn <code>num_init_samples</code>, use the <code>num_to_optimize</code> with highest log-probability as the initial points for the optimization.</p> <code>100</code> <code>save_best_every</code> <code>int</code> <p>The best log-probability is computed, saved in the <code>map</code>-attribute, and printed every <code>save_best_every</code>-th iteration. Computing the best log-probability creates a significant overhead (thus, the default is <code>10</code>.)</p> <code>10</code> <code>show_progress_bars</code> <code>bool</code> <p>Whether to show a progressbar during sampling from the posterior.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>Whether to re-calculate the MAP when x is unchanged and have a cached value.</p> <code>False</code> <code>log_prob_kwargs</code> <p>Will be empty for SNLE and SNRE. Will contain {\u2018norm_posterior\u2019: True} for SNPE.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>The MAP estimate.</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def map(\n    self,\n    x: Optional[TorchTensor] = None,\n    num_iter: int = 1_000,\n    num_to_optimize: int = 100,\n    learning_rate: float = 0.01,\n    init_method: Union[str, TorchTensor] = \"proposal\",\n    num_init_samples: int = 10_000,\n    save_best_every: int = 10,\n    show_progress_bars: bool = False,\n    force_update: bool = False,\n) -&gt; Tensor:\n    r\"\"\"Returns the maximum-a-posteriori estimate (MAP).\n\n    The method can be interrupted (Ctrl-C) when the user sees that the\n    log-probability converges. The best estimate will be saved in `self._map` and\n    can be accessed with `self.map()`. The MAP is obtained by running gradient\n    ascent from a given number of starting positions (samples from the posterior\n    with the highest log-probability). After the optimization is done, we select the\n    parameter set that has the highest log-probability after the optimization.\n\n    Warning: The default values used by this function are not well-tested. They\n    might require hand-tuning for the problem at hand.\n\n    For developers: if the prior is a `BoxUniform`, we carry out the optimization\n    in unbounded space and transform the result back into bounded space.\n\n    Args:\n        x: Deprecated - use `.set_default_x()` prior to `.map()`.\n        num_iter: Number of optimization steps that the algorithm takes\n            to find the MAP.\n        learning_rate: Learning rate of the optimizer.\n        init_method: How to select the starting parameters for the optimization. If\n            it is a string, it can be either [`posterior`, `prior`], which samples\n            the respective distribution `num_init_samples` times. If it is a\n            tensor, the tensor will be used as init locations.\n        num_init_samples: Draw this number of samples from the posterior and\n            evaluate the log-probability of all of them.\n        num_to_optimize: From the drawn `num_init_samples`, use the\n            `num_to_optimize` with highest log-probability as the initial points\n            for the optimization.\n        save_best_every: The best log-probability is computed, saved in the\n            `map`-attribute, and printed every `save_best_every`-th iteration.\n            Computing the best log-probability creates a significant overhead\n            (thus, the default is `10`.)\n        show_progress_bars: Whether to show a progressbar during sampling from\n            the posterior.\n        force_update: Whether to re-calculate the MAP when x is unchanged and\n            have a cached value.\n        log_prob_kwargs: Will be empty for SNLE and SNRE. Will contain\n            {'norm_posterior': True} for SNPE.\n\n    Returns:\n        The MAP estimate.\n    \"\"\"\n    self.proposal = self.q\n    return super().map(\n        x=x,\n        num_iter=num_iter,\n        num_to_optimize=num_to_optimize,\n        learning_rate=learning_rate,\n        init_method=init_method,\n        num_init_samples=num_init_samples,\n        save_best_every=save_best_every,\n        show_progress_bars=show_progress_bars,\n        force_update=force_update,\n    )\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.sample","title":"<code>sample(sample_shape=torch.Size(), x=None, **kwargs)</code>","text":"<p>Samples from the variational posterior distribution.</p> <p>Parameters:</p> Name Type Description Default <code>sample_shape</code> <code>Shape</code> <p>Shape of samples</p> <code>Size()</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>Samples from posterior.</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def sample(\n    self,\n    sample_shape: Shape = torch.Size(),\n    x: Optional[Tensor] = None,\n    **kwargs,\n) -&gt; Tensor:\n    \"\"\"Samples from the variational posterior distribution.\n\n    Args:\n        sample_shape: Shape of samples\n\n    Returns:\n        Samples from posterior.\n    \"\"\"\n    x = self._x_else_default_x(x)\n    if self._trained_on is None or (x != self._trained_on).all():\n        raise AttributeError(\n            f\"The variational posterior was not fit on the specified `default_x` \"\n            f\"{x}. Please train using `posterior.train()`.\"\n        )\n    samples = self.q.sample(torch.Size(sample_shape))\n    return samples.reshape((*sample_shape, samples.shape[-1]))\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.set_q","title":"<code>set_q(q, parameters=[], modules=[])</code>","text":"<p>Defines the variational family.</p> <p>You can specify over which parameters/modules we optimize. This is required for custom distributions which e.g. do not inherit nn.Modules or has the function <code>parameters</code> or <code>modules</code> to give direct access to trainable parameters. Further, you can pass a function, which constructs a variational distribution if called.</p> <p>Parameters:</p> Name Type Description Default <code>q</code> <code>Union[str, PyroTransformedDistribution, VIPosterior, Callable]</code> <p>Variational distribution, either string, distribution, or a VIPosterior object. This specifies a parametric class of distribution over which the best possible posterior approximation is searched. For string input, we currently support [nsf, scf, maf, mcf, gaussian, gaussian_diag]. Of course, you can also specify your own variational family by passing a <code>parameterized</code> distribution object i.e. a torch.distributions Distribution with methods <code>parameters</code> returning an iterable of all parameters (you can pass them within the paramters/modules attribute). Additionally, we allow a <code>Callable</code>, which allows you the pass a <code>builder</code> function, which if called returns an distribution. This may be useful for setting the hyperparameters e.g. <code>num_transfroms:int</code> by using the <code>get_flow_builder</code> method specifying the hyperparameters. If q is already a <code>VIPosterior</code>, then the arguments will be copied from it (relevant for multi-round training).</p> required <code>parameters</code> <code>Iterable</code> <p>List of parameters associated with the distribution object.</p> <code>[]</code> <code>modules</code> <code>Iterable</code> <p>List of modules associated with the distribution object.</p> <code>[]</code> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def set_q(\n    self,\n    q: Union[str, PyroTransformedDistribution, \"VIPosterior\", Callable],\n    parameters: Iterable = [],\n    modules: Iterable = [],\n) -&gt; None:\n    \"\"\"Defines the variational family.\n\n    You can specify over which parameters/modules we optimize. This is required for\n    custom distributions which e.g. do not inherit nn.Modules or has the function\n    `parameters` or `modules` to give direct access to trainable parameters.\n    Further, you can pass a function, which constructs a variational distribution\n    if called.\n\n    Args:\n        q: Variational distribution, either string, distribution, or a VIPosterior\n            object. This specifies a parametric class of distribution over which\n            the best possible posterior approximation is searched. For string input,\n            we currently support [nsf, scf, maf, mcf, gaussian, gaussian_diag]. Of\n            course, you can also specify your own variational family by passing a\n            `parameterized` distribution object i.e. a torch.distributions\n            Distribution with methods `parameters` returning an iterable of all\n            parameters (you can pass them within the paramters/modules attribute).\n            Additionally, we allow a `Callable`, which allows you the pass a\n            `builder` function, which if called returns an distribution. This may be\n            useful for setting the hyperparameters e.g. `num_transfroms:int` by\n            using the `get_flow_builder` method specifying the hyperparameters. If q\n            is already a `VIPosterior`, then the arguments will be copied from it\n            (relevant for multi-round training).\n        parameters: List of parameters associated with the distribution object.\n        modules: List of modules associated with the distribution object.\n\n    \"\"\"\n    self._q_arg = q\n    if isinstance(q, Distribution):\n        q = adapt_variational_distribution(\n            q,\n            self._prior,\n            self.link_transform,\n            parameters=parameters,\n            modules=modules,\n        )\n        make_object_deepcopy_compatible(q)\n        self_custom_q_init_cache = deepcopy(q)\n        self._q_build_fn = lambda *args, **kwargs: self_custom_q_init_cache\n        self._trained_on = None\n    elif isinstance(q, str) or isinstance(q, Callable):\n        if isinstance(q, str):\n            self._q_build_fn = get_flow_builder(q)\n        else:\n            self._q_build_fn = q\n\n        q = self._q_build_fn(\n            self._prior.event_shape,\n            self.link_transform,\n            device=self._device,\n        )\n        make_object_deepcopy_compatible(q)\n        self._trained_on = None\n    elif isinstance(q, VIPosterior):\n        self._q_build_fn = q._q_build_fn\n        self._trained_on = q._trained_on\n        self.vi_method = q.vi_method  # type: ignore\n        self._device = q._device\n        self._prior = q._prior\n        self._x = q._x\n        self._q_arg = q._q_arg\n        make_object_deepcopy_compatible(q.q)\n        q = deepcopy(q.q)\n    move_all_tensor_to_device(q, self._device)\n    assert isinstance(\n        q, Distribution\n    ), \"\"\"Something went wrong when initializing the variational distribution.\n        Please create an issue on github https://github.com/mackelab/sbi/issues\"\"\"\n    check_variational_distribution(q, self._prior)\n    self._q = q\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.set_vi_method","title":"<code>set_vi_method(method)</code>","text":"<p>Sets variational inference method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>One of [rKL, fKL, IW, alpha].</p> required <p>Returns:</p> Type Description <code>VIPosterior</code> <p><code>VIPosterior</code> for chainable calls.</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def set_vi_method(self, method: str) -&gt; \"VIPosterior\":\n    \"\"\"Sets variational inference method.\n\n    Args:\n        method: One of [rKL, fKL, IW, alpha].\n\n    Returns:\n        `VIPosterior` for chainable calls.\n    \"\"\"\n    self._vi_method = method\n    self._optimizer_builder = get_VI_method(method)\n    return self\n</code></pre>"},{"location":"reference/#sbi.inference.posteriors.vi_posterior.VIPosterior.train","title":"<code>train(x=None, n_particles=256, learning_rate=0.001, gamma=0.999, max_num_iters=2000, min_num_iters=10, clip_value=10.0, warm_up_rounds=100, retrain_from_scratch=False, reset_optimizer=False, show_progress_bar=True, check_for_convergence=True, quality_control=True, quality_control_metric='psis', **kwargs)</code>","text":"<p>This method trains the variational posterior.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Optional[TorchTensor]</code> <p>The observation.</p> <code>None</code> <code>n_particles</code> <code>int</code> <p>Number of samples to approximate expectations within the variational bounds. The larger the more accurate are gradient estimates, but the computational cost per iteration increases.</p> <code>256</code> <code>learning_rate</code> <code>float</code> <p>Learning rate of the optimizer.</p> <code>0.001</code> <code>gamma</code> <code>float</code> <p>Learning rate decay per iteration. We use an exponential decay scheduler.</p> <code>0.999</code> <code>max_num_iters</code> <code>int</code> <p>Maximum number of iterations.</p> <code>2000</code> <code>min_num_iters</code> <code>int</code> <p>Minimum number of iterations.</p> <code>10</code> <code>clip_value</code> <code>float</code> <p>Gradient clipping value, decreasing may help if you see invalid values.</p> <code>10.0</code> <code>warm_up_rounds</code> <code>int</code> <p>Initialize the posterior as the prior.</p> <code>100</code> <code>retrain_from_scratch</code> <code>bool</code> <p>Retrain the variational distributions from scratch.</p> <code>False</code> <code>reset_optimizer</code> <code>bool</code> <p>Reset the divergence optimizer</p> <code>False</code> <code>show_progress_bar</code> <code>bool</code> <p>If any progress report should be displayed.</p> <code>True</code> <code>quality_control</code> <code>bool</code> <p>If False quality control is skipped.</p> <code>True</code> <code>quality_control_metric</code> <code>str</code> <p>Which metric to use for evaluating the quality.</p> <code>'psis'</code> <code>kwargs</code> <p>Hyperparameters check corresponding <code>DivergenceOptimizer</code> for detail eps: Determines sensitivity of convergence check. retain_graph: Boolean which decides whether to retain the computation     graph. This may be required for some <code>exotic</code> user-specified q\u2019s. optimizer: A PyTorch Optimizer class e.g. Adam or SGD. See     <code>DivergenceOptimizer</code> for details. scheduler: A PyTorch learning rate scheduler. See     <code>DivergenceOptimizer</code> for details. alpha: Only used if vi_method=<code>alpha</code>. Determines the alpha divergence. K: Only used if vi_method=<code>IW</code>. Determines the number of importance     weighted particles. stick_the_landing: If one should use the STL estimator (only for rKL,     IW, alpha). dreg: If one should use the DREG estimator (only for rKL, IW, alpha). weight_transform: Callable applied to importance weights (only for fKL)</p> <code>{}</code> <p>Returns:     VIPosterior: <code>VIPosterior</code> (can be used to chain calls).</p> Source code in <code>sbi/inference/posteriors/vi_posterior.py</code> <pre><code>def train(\n    self,\n    x: Optional[TorchTensor] = None,\n    n_particles: int = 256,\n    learning_rate: float = 1e-3,\n    gamma: float = 0.999,\n    max_num_iters: int = 2000,\n    min_num_iters: int = 10,\n    clip_value: float = 10.0,\n    warm_up_rounds: int = 100,\n    retrain_from_scratch: bool = False,\n    reset_optimizer: bool = False,\n    show_progress_bar: bool = True,\n    check_for_convergence: bool = True,\n    quality_control: bool = True,\n    quality_control_metric: str = \"psis\",\n    **kwargs,\n) -&gt; \"VIPosterior\":\n    \"\"\"This method trains the variational posterior.\n\n    Args:\n        x: The observation.\n        n_particles: Number of samples to approximate expectations within the\n            variational bounds. The larger the more accurate are gradient\n            estimates, but the computational cost per iteration increases.\n        learning_rate: Learning rate of the optimizer.\n        gamma: Learning rate decay per iteration. We use an exponential decay\n            scheduler.\n        max_num_iters: Maximum number of iterations.\n        min_num_iters: Minimum number of iterations.\n        clip_value: Gradient clipping value, decreasing may help if you see invalid\n            values.\n        warm_up_rounds: Initialize the posterior as the prior.\n        retrain_from_scratch: Retrain the variational distributions from scratch.\n        reset_optimizer: Reset the divergence optimizer\n        show_progress_bar: If any progress report should be displayed.\n        quality_control: If False quality control is skipped.\n        quality_control_metric: Which metric to use for evaluating the quality.\n        kwargs: Hyperparameters check corresponding `DivergenceOptimizer` for detail\n            eps: Determines sensitivity of convergence check.\n            retain_graph: Boolean which decides whether to retain the computation\n                graph. This may be required for some `exotic` user-specified q's.\n            optimizer: A PyTorch Optimizer class e.g. Adam or SGD. See\n                `DivergenceOptimizer` for details.\n            scheduler: A PyTorch learning rate scheduler. See\n                `DivergenceOptimizer` for details.\n            alpha: Only used if vi_method=`alpha`. Determines the alpha divergence.\n            K: Only used if vi_method=`IW`. Determines the number of importance\n                weighted particles.\n            stick_the_landing: If one should use the STL estimator (only for rKL,\n                IW, alpha).\n            dreg: If one should use the DREG estimator (only for rKL, IW, alpha).\n            weight_transform: Callable applied to importance weights (only for fKL)\n    Returns:\n        VIPosterior: `VIPosterior` (can be used to chain calls).\n    \"\"\"\n    # Update optimizer with current arguments.\n    if self._optimizer is not None:\n        self._optimizer.update({**locals(), **kwargs})\n\n    # Init q and the optimizer if necessary\n    if retrain_from_scratch:\n        self.q = self._q_build_fn()  # type: ignore\n        self._optimizer = self._optimizer_builder(\n            self.potential_fn,\n            self.q,\n            lr=learning_rate,\n            clip_value=clip_value,\n            gamma=gamma,\n            n_particles=n_particles,\n            prior=self._prior,\n            **kwargs,\n        )\n\n    if (\n        reset_optimizer\n        or self._optimizer is None\n        or not isinstance(self._optimizer, self._optimizer_builder)\n    ):\n        self._optimizer = self._optimizer_builder(\n            self.potential_fn,\n            self.q,\n            lr=learning_rate,\n            clip_value=clip_value,\n            gamma=gamma,\n            n_particles=n_particles,\n            prior=self._prior,\n            **kwargs,\n        )\n\n    # Check context\n    x = atleast_2d_float32_tensor(self._x_else_default_x(x)).to(  # type: ignore\n        self._device\n    )\n\n    already_trained = self._trained_on is not None and (x == self._trained_on).all()\n\n    # Optimize\n    optimizer = self._optimizer\n    optimizer.to(self._device)\n    optimizer.reset_loss_stats()\n\n    if show_progress_bar:\n        iters = tqdm(range(max_num_iters))\n    else:\n        iters = range(max_num_iters)\n\n    # Warmup before training\n    if reset_optimizer or (not optimizer.warm_up_was_done and not already_trained):\n        if show_progress_bar:\n            iters.set_description(  # type: ignore\n                \"Warmup phase, this may take a few seconds...\"\n            )\n        optimizer.warm_up(warm_up_rounds)\n\n    for i in iters:\n        optimizer.step(x)\n        mean_loss, std_loss = optimizer.get_loss_stats()\n        # Update progress bar\n        if show_progress_bar:\n            assert isinstance(iters, tqdm)\n            iters.set_description(  # type: ignore\n                f\"Loss: {np.round(float(mean_loss), 2)}\"\n                f\"Std: {np.round(float(std_loss), 2)}\"\n            )\n        # Check for convergence\n        if check_for_convergence and i &gt; min_num_iters:\n            if optimizer.converged():\n                if show_progress_bar:\n                    print(f\"\\nConverged with loss: {np.round(float(mean_loss), 2)}\")\n                break\n    # Training finished:\n    self._trained_on = x\n\n    # Evaluate quality\n    if quality_control:\n        try:\n            self.evaluate(quality_control_metric=quality_control_metric)\n        except Exception as e:\n            print(\n                f\"Quality control did not work, we reset the variational \\\n                    posterior,please check your setting. \\\n                    \\n Following error occured {e}\"\n            )\n            self.train(\n                learning_rate=learning_rate * 0.1,\n                retrain_from_scratch=True,\n                reset_optimizer=True,\n            )\n\n    return self\n</code></pre>"},{"location":"reference/#models","title":"Models","text":"<p>Returns a function that builds a density estimator for learning the posterior.</p> <p>This function will usually be used for SNPE. The returned function is to be passed to the inference class when using the flexible interface.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The type of density estimator that will be created. One of [<code>mdn</code>, <code>made</code>, <code>maf</code>, <code>maf_rqs</code>, <code>nsf</code>].</p> required <code>z_score_theta</code> <code>Optional[str]</code> <p>Whether to z-score parameters \\(\\theta\\) before passing them into the network, can take one of the following: - <code>none</code>, or None: do not z-score. - <code>independent</code>: z-score each dimension independently. - <code>structured</code>: treat dimensions as related, therefore compute mean and std over the entire batch, instead of per-dimension. Should be used when each sample is, for example, a time series or an image.</p> <code>'independent'</code> <code>z_score_x</code> <code>Optional[str]</code> <p>Whether to z-score simulation outputs \\(x\\) before passing them into the network, same options as z_score_theta.</p> <code>'independent'</code> <code>hidden_features</code> <code>int</code> <p>Number of hidden features.</p> <code>50</code> <code>num_transforms</code> <code>int</code> <p>Number of transforms when a flow is used. Only relevant if density estimator is a normalizing flow (i.e. currently either a <code>maf</code> or a <code>nsf</code>). Ignored if density estimator is a <code>mdn</code> or <code>made</code>.</p> <code>5</code> <code>num_bins</code> <code>int</code> <p>Number of bins used for the splines in <code>nsf</code>. Ignored if density estimator not <code>nsf</code>.</p> <code>10</code> <code>embedding_net</code> <code>Module</code> <p>Optional embedding network for simulation outputs \\(x\\). This embedding net allows to learn features from potentially high-dimensional simulation outputs.</p> <code>Identity()</code> <code>num_components</code> <code>int</code> <p>Number of mixture components for a mixture of Gaussians. Ignored if density estimator is not an mdn.</p> <code>10</code> <code>kwargs</code> <p>additional custom arguments passed to downstream build functions.</p> <code>{}</code> Source code in <code>sbi/utils/get_nn_models.py</code> <pre><code>def posterior_nn(\n    model: str,\n    z_score_theta: Optional[str] = \"independent\",\n    z_score_x: Optional[str] = \"independent\",\n    hidden_features: int = 50,\n    num_transforms: int = 5,\n    num_bins: int = 10,\n    embedding_net: nn.Module = nn.Identity(),\n    num_components: int = 10,\n    **kwargs,\n) -&gt; Callable:\n    r\"\"\"\n    Returns a function that builds a density estimator for learning the posterior.\n\n    This function will usually be used for SNPE. The returned function is to be passed\n    to the inference class when using the flexible interface.\n\n    Args:\n        model: The type of density estimator that will be created. One of [`mdn`,\n            `made`, `maf`, `maf_rqs`, `nsf`].\n        z_score_theta: Whether to z-score parameters $\\theta$ before passing them into\n            the network, can take one of the following:\n            - `none`, or None: do not z-score.\n            - `independent`: z-score each dimension independently.\n            - `structured`: treat dimensions as related, therefore compute mean and std\n            over the entire batch, instead of per-dimension. Should be used when each\n            sample is, for example, a time series or an image.\n        z_score_x: Whether to z-score simulation outputs $x$ before passing them into\n            the network, same options as z_score_theta.\n        hidden_features: Number of hidden features.\n        num_transforms: Number of transforms when a flow is used. Only relevant if\n            density estimator is a normalizing flow (i.e. currently either a `maf` or a\n            `nsf`). Ignored if density estimator is a `mdn` or `made`.\n        num_bins: Number of bins used for the splines in `nsf`. Ignored if density\n            estimator not `nsf`.\n        embedding_net: Optional embedding network for simulation outputs $x$. This\n            embedding net allows to learn features from potentially high-dimensional\n            simulation outputs.\n        num_components: Number of mixture components for a mixture of Gaussians.\n            Ignored if density estimator is not an mdn.\n        kwargs: additional custom arguments passed to downstream build functions.\n    \"\"\"\n\n    kwargs = dict(\n        zip(\n            (\n                \"z_score_x\",\n                \"z_score_y\",\n                \"hidden_features\",\n                \"num_transforms\",\n                \"num_bins\",\n                \"embedding_net\",\n                \"num_components\",\n            ),\n            (\n                z_score_theta,\n                z_score_x,\n                hidden_features,\n                num_transforms,\n                num_bins,\n                embedding_net,\n                num_components,\n            ),\n        ),\n        **kwargs,\n    )\n\n    def build_fn_snpe_a(batch_theta, batch_x, num_components):\n        \"\"\"Build function for SNPE-A\n\n        Extract the number of components from the kwargs, such that they are exposed as\n        a kwargs, offering the possibility to later override this kwarg with\n        `functools.partial`. This is necessary in order to make sure that the MDN in\n        SNPE-A only has one component when running the Algorithm 1 part.\n        \"\"\"\n        return build_mdn(\n            batch_x=batch_theta,\n            batch_y=batch_x,\n            num_components=num_components,\n            **kwargs,\n        )\n\n    def build_fn(batch_theta, batch_x):\n        if model == \"mdn\":\n            return build_mdn(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        elif model == \"made\":\n            return build_made(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        elif model == \"maf\":\n            return build_maf(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        elif model == \"maf_rqs\":\n            return build_maf_rqs(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        elif model == \"nsf\":\n            return build_nsf(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        else:\n            raise NotImplementedError\n\n    if model == \"mdn_snpe_a\":\n        if num_components != 10:\n            raise ValueError(\n                \"You set `num_components`. For SNPE-A, this has to be done at \"\n                \"instantiation of the inference object, i.e. \"\n                \"`inference = SNPE_A(..., num_components=20)`\"\n            )\n        kwargs.pop(\"num_components\")\n\n    return build_fn_snpe_a if model == \"mdn_snpe_a\" else build_fn\n</code></pre> <p>Returns a function that builds a density estimator for learning the likelihood.</p> <p>This function will usually be used for SNLE. The returned function is to be passed to the inference class when using the flexible interface.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The type of density estimator that will be created. One of [<code>mdn</code>, <code>made</code>, <code>maf</code>, <code>maf_rqs</code>, <code>nsf</code>].</p> required <code>z_score_theta</code> <code>Optional[str]</code> <p>Whether to z-score parameters \\(\\theta\\) before passing them into the network, can take one of the following: - <code>none</code>, or None: do not z-score. - <code>independent</code>: z-score each dimension independently. - <code>structured</code>: treat dimensions as related, therefore compute mean and std over the entire batch, instead of per-dimension. Should be used when each sample is, for example, a time series or an image.</p> <code>'independent'</code> <code>z_score_x</code> <code>Optional[str]</code> <p>Whether to z-score simulation outputs \\(x\\) before passing them into the network, same options as z_score_theta.</p> <code>'independent'</code> <code>hidden_features</code> <code>int</code> <p>Number of hidden features.</p> <code>50</code> <code>num_transforms</code> <code>int</code> <p>Number of transforms when a flow is used. Only relevant if density estimator is a normalizing flow (i.e. currently either a <code>maf</code> or a <code>nsf</code>). Ignored if density estimator is a <code>mdn</code> or <code>made</code>.</p> <code>5</code> <code>num_bins</code> <code>int</code> <p>Number of bins used for the splines in <code>nsf</code>. Ignored if density estimator not <code>nsf</code>.</p> <code>10</code> <code>embedding_net</code> <code>Module</code> <p>Optional embedding network for parameters \\(\\theta\\).</p> <code>Identity()</code> <code>num_components</code> <code>int</code> <p>Number of mixture components for a mixture of Gaussians. Ignored if density estimator is not an mdn.</p> <code>10</code> <code>kwargs</code> <p>additional custom arguments passed to downstream build functions.</p> <code>{}</code> Source code in <code>sbi/utils/get_nn_models.py</code> <pre><code>def likelihood_nn(\n    model: str,\n    z_score_theta: Optional[str] = \"independent\",\n    z_score_x: Optional[str] = \"independent\",\n    hidden_features: int = 50,\n    num_transforms: int = 5,\n    num_bins: int = 10,\n    embedding_net: nn.Module = nn.Identity(),\n    num_components: int = 10,\n    **kwargs,\n) -&gt; Callable:\n    r\"\"\"\n    Returns a function that builds a density estimator for learning the likelihood.\n\n    This function will usually be used for SNLE. The returned function is to be passed\n    to the inference class when using the flexible interface.\n\n    Args:\n        model: The type of density estimator that will be created. One of [`mdn`,\n            `made`, `maf`, `maf_rqs`, `nsf`].\n        z_score_theta: Whether to z-score parameters $\\theta$ before passing them into\n            the network, can take one of the following:\n            - `none`, or None: do not z-score.\n            - `independent`: z-score each dimension independently.\n            - `structured`: treat dimensions as related, therefore compute mean and std\n            over the entire batch, instead of per-dimension. Should be used when each\n            sample is, for example, a time series or an image.\n        z_score_x: Whether to z-score simulation outputs $x$ before passing them into\n            the network, same options as z_score_theta.\n        hidden_features: Number of hidden features.\n        num_transforms: Number of transforms when a flow is used. Only relevant if\n            density estimator is a normalizing flow (i.e. currently either a `maf` or a\n            `nsf`). Ignored if density estimator is a `mdn` or `made`.\n        num_bins: Number of bins used for the splines in `nsf`. Ignored if density\n            estimator not `nsf`.\n        embedding_net: Optional embedding network for parameters $\\theta$.\n        num_components: Number of mixture components for a mixture of Gaussians.\n            Ignored if density estimator is not an mdn.\n        kwargs: additional custom arguments passed to downstream build functions.\n    \"\"\"\n\n    kwargs = dict(\n        zip(\n            (\n                \"z_score_x\",\n                \"z_score_y\",\n                \"hidden_features\",\n                \"num_transforms\",\n                \"num_bins\",\n                \"embedding_net\",\n                \"num_components\",\n            ),\n            (\n                z_score_x,\n                z_score_theta,\n                hidden_features,\n                num_transforms,\n                num_bins,\n                embedding_net,\n                num_components,\n            ),\n        ),\n        **kwargs,\n    )\n\n    def build_fn(batch_theta, batch_x):\n        if model == \"mdn\":\n            return build_mdn(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        elif model == \"made\":\n            return build_made(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        elif model == \"maf\":\n            return build_maf(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        elif model == \"maf_rqs\":\n            return build_maf_rqs(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        elif model == \"nsf\":\n            return build_nsf(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        elif model == \"mnle\":\n            return build_mnle(batch_x=batch_x, batch_y=batch_theta, **kwargs)\n        else:\n            raise NotImplementedError\n\n    return build_fn\n</code></pre> <p>Returns a function that builds a classifier for learning density ratios.</p> <p>This function will usually be used for SNRE. The returned function is to be passed to the inference class when using the flexible interface.</p> <p>Note that in the view of the SNRE classifier we build below, x=theta and y=x.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The type of classifier that will be created. One of [<code>linear</code>, <code>mlp</code>, <code>resnet</code>].</p> required <code>z_score_theta</code> <code>Optional[str]</code> <p>Whether to z-score parameters \\(\\theta\\) before passing them into the network, can take one of the following: - <code>none</code>, or None: do not z-score. - <code>independent</code>: z-score each dimension independently. - <code>structured</code>: treat dimensions as related, therefore compute mean and std over the entire batch, instead of per-dimension. Should be used when each sample is, for example, a time series or an image.</p> <code>'independent'</code> <code>z_score_x</code> <code>Optional[str]</code> <p>Whether to z-score simulation outputs \\(x\\) before passing them into the network, same options as z_score_theta.</p> <code>'independent'</code> <code>hidden_features</code> <code>int</code> <p>Number of hidden features.</p> <code>50</code> <code>embedding_net_theta</code> <code>Module</code> <p>Optional embedding network for parameters \\(\\theta\\).</p> <code>Identity()</code> <code>embedding_net_x</code> <code>Module</code> <p>Optional embedding network for simulation outputs \\(x\\). This embedding net allows to learn features from potentially high-dimensional simulation outputs.</p> <code>Identity()</code> <code>kwargs</code> <p>additional custom arguments passed to downstream build functions.</p> <code>{}</code> Source code in <code>sbi/utils/get_nn_models.py</code> <pre><code>def classifier_nn(\n    model: str,\n    z_score_theta: Optional[str] = \"independent\",\n    z_score_x: Optional[str] = \"independent\",\n    hidden_features: int = 50,\n    embedding_net_theta: nn.Module = nn.Identity(),\n    embedding_net_x: nn.Module = nn.Identity(),\n    **kwargs,\n) -&gt; Callable:\n    r\"\"\"\n    Returns a function that builds a classifier for learning density ratios.\n\n    This function will usually be used for SNRE. The returned function is to be passed\n    to the inference class when using the flexible interface.\n\n    Note that in the view of the SNRE classifier we build below, x=theta and y=x.\n\n    Args:\n        model: The type of classifier that will be created. One of [`linear`, `mlp`,\n            `resnet`].\n        z_score_theta: Whether to z-score parameters $\\theta$ before passing them into\n            the network, can take one of the following:\n            - `none`, or None: do not z-score.\n            - `independent`: z-score each dimension independently.\n            - `structured`: treat dimensions as related, therefore compute mean and std\n            over the entire batch, instead of per-dimension. Should be used when each\n            sample is, for example, a time series or an image.\n        z_score_x: Whether to z-score simulation outputs $x$ before passing them into\n            the network, same options as z_score_theta.\n        hidden_features: Number of hidden features.\n        embedding_net_theta:  Optional embedding network for parameters $\\theta$.\n        embedding_net_x:  Optional embedding network for simulation outputs $x$. This\n            embedding net allows to learn features from potentially high-dimensional\n            simulation outputs.\n        kwargs: additional custom arguments passed to downstream build functions.\n    \"\"\"\n\n    kwargs = dict(\n        zip(\n            (\n                \"z_score_x\",\n                \"z_score_y\",\n                \"hidden_features\",\n                \"embedding_net_x\",\n                \"embedding_net_y\",\n            ),\n            (\n                z_score_theta,\n                z_score_x,\n                hidden_features,\n                embedding_net_theta,\n                embedding_net_x,\n            ),\n        ),\n        **kwargs,\n    )\n\n    def build_fn(batch_theta, batch_x):\n        if model == \"linear\":\n            return build_linear_classifier(\n                batch_x=batch_theta, batch_y=batch_x, **kwargs\n            )\n        if model == \"mlp\":\n            return build_mlp_classifier(batch_x=batch_theta, batch_y=batch_x, **kwargs)\n        if model == \"resnet\":\n            return build_resnet_classifier(\n                batch_x=batch_theta, batch_y=batch_x, **kwargs\n            )\n        else:\n            raise NotImplementedError\n\n    return build_fn\n</code></pre>"},{"location":"reference/#potentials","title":"Potentials","text":"<p>Returns the potential for posterior-based methods.</p> <p>It also returns a transformation that can be used to transform the potential into unconstrained space.</p> <p>The potential is the same as the log-probability of the <code>posterior_estimator</code>, but it is set to \\(-\\inf\\) outside of the prior bounds.</p> <p>Parameters:</p> Name Type Description Default <code>posterior_estimator</code> <code>Module</code> <p>The neural network modelling the posterior.</p> required <code>prior</code> <code>Distribution</code> <p>The prior distribution.</p> required <code>x_o</code> <code>Optional[Tensor]</code> <p>The observed data at which to evaluate the posterior.</p> required <code>enable_transform</code> <code>bool</code> <p>Whether to transform parameters to unconstrained space. When False, an identity transform will be returned for <code>theta_transform</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>Callable</code> <p>The potential function and a transformation that maps</p> <code>TorchTransform</code> <p>to unconstrained space.</p> Source code in <code>sbi/inference/potentials/posterior_based_potential.py</code> <pre><code>def posterior_estimator_based_potential(\n    posterior_estimator: nn.Module,\n    prior: Distribution,\n    x_o: Optional[Tensor],\n    enable_transform: bool = True,\n) -&gt; Tuple[Callable, TorchTransform]:\n    r\"\"\"Returns the potential for posterior-based methods.\n\n    It also returns a transformation that can be used to transform the potential into\n    unconstrained space.\n\n    The potential is the same as the log-probability of the `posterior_estimator`, but\n    it is set to $-\\inf$ outside of the prior bounds.\n\n    Args:\n        posterior_estimator: The neural network modelling the posterior.\n        prior: The prior distribution.\n        x_o: The observed data at which to evaluate the posterior.\n        enable_transform: Whether to transform parameters to unconstrained space.\n            When False, an identity transform will be returned for `theta_transform`.\n\n    Returns:\n        The potential function and a transformation that maps\n        to unconstrained space.\n    \"\"\"\n\n    device = str(next(posterior_estimator.parameters()).device)\n\n    potential_fn = PosteriorBasedPotential(\n        posterior_estimator, prior, x_o, device=device\n    )\n\n    theta_transform = mcmc_transform(\n        prior, device=device, enable_transform=enable_transform\n    )\n\n    return potential_fn, theta_transform\n</code></pre> <p>Returns potential \\(\\log(p(x_o|\\theta)p(\\theta))\\) for likelihood-based methods.</p> <p>It also returns a transformation that can be used to transform the potential into unconstrained space.</p> <p>Parameters:</p> Name Type Description Default <code>likelihood_estimator</code> <code>Module</code> <p>The neural network modelling the likelihood.</p> required <code>prior</code> <code>Distribution</code> <p>The prior distribution.</p> required <code>x_o</code> <code>Optional[Tensor]</code> <p>The observed data at which to evaluate the likelihood.</p> required <code>enable_transform</code> <code>bool</code> <p>Whether to transform parameters to unconstrained space.  When False, an identity transform will be returned for <code>theta_transform</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>Callable</code> <p>The potential function \\(p(x_o|\\theta)p(\\theta)\\) and a transformation that maps</p> <code>TorchTransform</code> <p>to unconstrained space.</p> Source code in <code>sbi/inference/potentials/likelihood_based_potential.py</code> <pre><code>def likelihood_estimator_based_potential(\n    likelihood_estimator: nn.Module,\n    prior: Distribution,\n    x_o: Optional[Tensor],\n    enable_transform: bool = True,\n) -&gt; Tuple[Callable, TorchTransform]:\n    r\"\"\"Returns potential $\\log(p(x_o|\\theta)p(\\theta))$ for likelihood-based methods.\n\n    It also returns a transformation that can be used to transform the potential into\n    unconstrained space.\n\n    Args:\n        likelihood_estimator: The neural network modelling the likelihood.\n        prior: The prior distribution.\n        x_o: The observed data at which to evaluate the likelihood.\n        enable_transform: Whether to transform parameters to unconstrained space.\n             When False, an identity transform will be returned for `theta_transform`.\n\n    Returns:\n        The potential function $p(x_o|\\theta)p(\\theta)$ and a transformation that maps\n        to unconstrained space.\n    \"\"\"\n\n    device = str(next(likelihood_estimator.parameters()).device)\n\n    potential_fn = LikelihoodBasedPotential(\n        likelihood_estimator, prior, x_o, device=device\n    )\n    theta_transform = mcmc_transform(\n        prior, device=device, enable_transform=enable_transform\n    )\n\n    return potential_fn, theta_transform\n</code></pre> <p>Returns the potential for ratio-based methods.</p> <p>It also returns a transformation that can be used to transform the potential into unconstrained space.</p> <p>Parameters:</p> Name Type Description Default <code>ratio_estimator</code> <code>Module</code> <p>The neural network modelling likelihood-to-evidence ratio.</p> required <code>prior</code> <code>Distribution</code> <p>The prior distribution.</p> required <code>x_o</code> <code>Optional[Tensor]</code> <p>The observed data at which to evaluate the likelihood-to-evidence ratio.</p> required <code>enable_transform</code> <code>bool</code> <p>Whether to transform parameters to unconstrained space. When False, an identity transform will be returned for <code>theta_transform</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>Callable</code> <p>The potential function and a transformation that maps</p> <code>TorchTransform</code> <p>to unconstrained space.</p> Source code in <code>sbi/inference/potentials/ratio_based_potential.py</code> <pre><code>def ratio_estimator_based_potential(\n    ratio_estimator: nn.Module,\n    prior: Distribution,\n    x_o: Optional[Tensor],\n    enable_transform: bool = True,\n) -&gt; Tuple[Callable, TorchTransform]:\n    r\"\"\"Returns the potential for ratio-based methods.\n\n    It also returns a transformation that can be used to transform the potential into\n    unconstrained space.\n\n    Args:\n        ratio_estimator: The neural network modelling likelihood-to-evidence ratio.\n        prior: The prior distribution.\n        x_o: The observed data at which to evaluate the likelihood-to-evidence ratio.\n        enable_transform: Whether to transform parameters to unconstrained space.\n            When False, an identity transform will be returned for `theta_transform`.\n\n    Returns:\n        The potential function and a transformation that maps\n        to unconstrained space.\n    \"\"\"\n\n    device = str(next(ratio_estimator.parameters()).device)\n\n    potential_fn = RatioBasedPotential(ratio_estimator, prior, x_o, device=device)\n    theta_transform = mcmc_transform(\n        prior, device=device, enable_transform=enable_transform\n    )\n\n    return potential_fn, theta_transform\n</code></pre>"},{"location":"reference/#analysis","title":"Analysis","text":"<p>Plot samples in a 2D grid showing marginals and pairwise marginals.</p> <p>Each of the diagonal plots can be interpreted as a 1D-marginal of the distribution that the samples were drawn from. Each upper-diagonal plot can be interpreted as a 2D-marginal of the distribution.</p> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>Union[List[ndarray], List[Tensor], ndarray, Tensor]</code> <p>Samples used to build the histogram.</p> required <code>points</code> <code>Optional[Union[List[ndarray], List[Tensor], ndarray, Tensor]]</code> <p>List of additional points to scatter.</p> <code>None</code> <code>limits</code> <code>Optional[Union[List, Tensor]]</code> <p>Array containing the plot xlim for each parameter dimension. If None, just use the min and max of the passed samples</p> <code>None</code> <code>subset</code> <code>Optional[List[int]]</code> <p>List containing the dimensions to plot. E.g. subset=[1,3] will plot plot only the 1<sup>st</sup> and 3<sup>rd</sup> dimension but will discard the 0<sup>th</sup> and 2<sup>nd</sup> (and, if they exist, the 4<sup>th</sup>, 5<sup>th</sup> and so on).</p> <code>None</code> <code>offdiag</code> <code>Optional[Union[List[str], str]]</code> <p>Plotting style for upper diagonal, {hist, scatter, contour, cond, None}.</p> <code>'hist'</code> <code>upper</code> <code>Optional[str]</code> <p>deprecated, use offdiag instead.</p> <code>None</code> <code>diag</code> <code>Optional[Union[List[str], str]]</code> <p>Plotting style for diagonal, {hist, cond, None}.</p> <code>'hist'</code> <code>figsize</code> <code>Tuple</code> <p>Size of the entire figure.</p> <code>(10, 10)</code> <code>labels</code> <code>Optional[List[str]]</code> <p>List of strings specifying the names of the parameters.</p> <code>None</code> <code>ticks</code> <code>Union[List, Tensor]</code> <p>Position of the ticks.</p> <code>[]</code> <code>fig</code> <p>matplotlib figure to plot on.</p> <code>None</code> <code>axes</code> <p>matplotlib axes corresponding to fig.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments to adjust the plot, e.g., <code>samples_colors</code>, <code>points_colors</code> and many more, see the source code in <code>_get_default_opts()</code> in <code>sbi.analysis.plot</code> for details.</p> <code>{}</code> <p>Returns: figure and axis of posterior distribution plot</p> Source code in <code>sbi/analysis/plot.py</code> <pre><code>def pairplot(\n    samples: Union[List[np.ndarray], List[torch.Tensor], np.ndarray, torch.Tensor],\n    points: Optional[\n        Union[List[np.ndarray], List[torch.Tensor], np.ndarray, torch.Tensor]\n    ] = None,\n    limits: Optional[Union[List, torch.Tensor]] = None,\n    subset: Optional[List[int]] = None,\n    offdiag: Optional[Union[List[str], str]] = \"hist\",\n    diag: Optional[Union[List[str], str]] = \"hist\",\n    figsize: Tuple = (10, 10),\n    labels: Optional[List[str]] = None,\n    ticks: Union[List, torch.Tensor] = [],\n    upper: Optional[str] = None,\n    fig=None,\n    axes=None,\n    **kwargs,\n):\n    \"\"\"\n    Plot samples in a 2D grid showing marginals and pairwise marginals.\n\n    Each of the diagonal plots can be interpreted as a 1D-marginal of the distribution\n    that the samples were drawn from. Each upper-diagonal plot can be interpreted as a\n    2D-marginal of the distribution.\n\n    Args:\n        samples: Samples used to build the histogram.\n        points: List of additional points to scatter.\n        limits: Array containing the plot xlim for each parameter dimension. If None,\n            just use the min and max of the passed samples\n        subset: List containing the dimensions to plot. E.g. subset=[1,3] will plot\n            plot only the 1st and 3rd dimension but will discard the 0th and 2nd (and,\n            if they exist, the 4th, 5th and so on).\n        offdiag: Plotting style for upper diagonal, {hist, scatter, contour, cond,\n            None}.\n        upper: deprecated, use offdiag instead.\n        diag: Plotting style for diagonal, {hist, cond, None}.\n        figsize: Size of the entire figure.\n        labels: List of strings specifying the names of the parameters.\n        ticks: Position of the ticks.\n        fig: matplotlib figure to plot on.\n        axes: matplotlib axes corresponding to fig.\n        **kwargs: Additional arguments to adjust the plot, e.g., `samples_colors`,\n            `points_colors` and many more, see the source code in `_get_default_opts()`\n            in `sbi.analysis.plot` for details.\n\n    Returns: figure and axis of posterior distribution plot\n    \"\"\"\n\n    # TODO: add color map support\n    # TODO: automatically determine good bin sizes for histograms\n    # TODO: add legend (if legend is True)\n\n    opts = _get_default_opts()\n    # update the defaults dictionary by the current values of the variables (passed by\n    # the user)\n\n    opts = _update(opts, locals())\n    opts = _update(opts, kwargs)\n\n    samples, dim, limits = prepare_for_plot(samples, limits)\n\n    # checks.\n    if opts[\"legend\"]:\n        assert len(opts[\"samples_labels\"]) &gt;= len(\n            samples\n        ), \"Provide at least as many labels as samples.\"\n    if opts[\"upper\"] is not None:\n        warn(\"upper is deprecated, use offdiag instead.\")\n        opts[\"offdiag\"] = opts[\"upper\"]\n\n    # Prepare diag/upper/lower\n    if type(opts[\"diag\"]) is not list:\n        opts[\"diag\"] = [opts[\"diag\"] for _ in range(len(samples))]\n    if type(opts[\"offdiag\"]) is not list:\n        opts[\"offdiag\"] = [opts[\"offdiag\"] for _ in range(len(samples))]\n    # if type(opts['lower']) is not list:\n    #    opts['lower'] = [opts['lower'] for _ in range(len(samples))]\n    opts[\"lower\"] = None\n\n    diag_func = get_diag_func(samples, limits, opts, **kwargs)\n\n    def offdiag_func(row, col, limits, **kwargs):\n        if len(samples) &gt; 0:\n            for n, v in enumerate(samples):\n                if opts[\"offdiag\"][n] == \"hist\" or opts[\"offdiag\"][n] == \"hist2d\":\n                    hist, xedges, yedges = np.histogram2d(\n                        v[:, col],\n                        v[:, row],\n                        range=[\n                            [limits[col][0], limits[col][1]],\n                            [limits[row][0], limits[row][1]],\n                        ],\n                        **opts[\"hist_offdiag\"],\n                    )\n                    plt.imshow(\n                        hist.T,\n                        origin=\"lower\",\n                        extent=(\n                            xedges[0],\n                            xedges[-1],\n                            yedges[0],\n                            yedges[-1],\n                        ),\n                        aspect=\"auto\",\n                    )\n\n                elif opts[\"offdiag\"][n] in [\n                    \"kde\",\n                    \"kde2d\",\n                    \"contour\",\n                    \"contourf\",\n                ]:\n                    density = gaussian_kde(\n                        v[:, [col, row]].T,\n                        bw_method=opts[\"kde_offdiag\"][\"bw_method\"],\n                    )\n                    X, Y = np.meshgrid(\n                        np.linspace(\n                            limits[col][0],\n                            limits[col][1],\n                            opts[\"kde_offdiag\"][\"bins\"],\n                        ),\n                        np.linspace(\n                            limits[row][0],\n                            limits[row][1],\n                            opts[\"kde_offdiag\"][\"bins\"],\n                        ),\n                    )\n                    positions = np.vstack([X.ravel(), Y.ravel()])\n                    Z = np.reshape(density(positions).T, X.shape)\n\n                    if opts[\"offdiag\"][n] == \"kde\" or opts[\"offdiag\"][n] == \"kde2d\":\n                        plt.imshow(\n                            Z,\n                            extent=(\n                                limits[col][0],\n                                limits[col][1],\n                                limits[row][0],\n                                limits[row][1],\n                            ),\n                            origin=\"lower\",\n                            aspect=\"auto\",\n                        )\n                    elif opts[\"offdiag\"][n] == \"contour\":\n                        if opts[\"contour_offdiag\"][\"percentile\"]:\n                            Z = probs2contours(Z, opts[\"contour_offdiag\"][\"levels\"])\n                        else:\n                            Z = (Z - Z.min()) / (Z.max() - Z.min())\n                        plt.contour(\n                            X,\n                            Y,\n                            Z,\n                            origin=\"lower\",\n                            extent=[\n                                limits[col][0],\n                                limits[col][1],\n                                limits[row][0],\n                                limits[row][1],\n                            ],\n                            colors=opts[\"samples_colors\"][n],\n                            levels=opts[\"contour_offdiag\"][\"levels\"],\n                        )\n                    else:\n                        pass\n                elif opts[\"offdiag\"][n] == \"scatter\":\n                    plt.scatter(\n                        v[:, col],\n                        v[:, row],\n                        color=opts[\"samples_colors\"][n],\n                        **opts[\"scatter_offdiag\"],\n                    )\n                elif opts[\"offdiag\"][n] == \"plot\":\n                    plt.plot(\n                        v[:, col],\n                        v[:, row],\n                        color=opts[\"samples_colors\"][n],\n                        **opts[\"plot_offdiag\"],\n                    )\n                else:\n                    pass\n\n    return _arrange_plots(\n        diag_func, offdiag_func, dim, limits, points, opts, fig=fig, axes=axes\n    )\n</code></pre> <p>Plot samples in a row showing 1D marginals of selected dimensions.</p> <p>Each of the plots can be interpreted as a 1D-marginal of the distribution that the samples were drawn from.</p> <p>Parameters:</p> Name Type Description Default <code>samples</code> <code>Union[List[ndarray], List[Tensor], ndarray, Tensor]</code> <p>Samples used to build the histogram.</p> required <code>points</code> <code>Optional[Union[List[ndarray], List[Tensor], ndarray, Tensor]]</code> <p>List of additional points to scatter.</p> <code>None</code> <code>limits</code> <code>Optional[Union[List, Tensor]]</code> <p>Array containing the plot xlim for each parameter dimension. If None, just use the min and max of the passed samples</p> <code>None</code> <code>subset</code> <code>Optional[List[int]]</code> <p>List containing the dimensions to plot. E.g. subset=[1,3] will plot plot only the 1<sup>st</sup> and 3<sup>rd</sup> dimension but will discard the 0<sup>th</sup> and 2<sup>nd</sup> (and, if they exist, the 4<sup>th</sup>, 5<sup>th</sup> and so on).</p> <code>None</code> <code>diag</code> <code>Optional[str]</code> <p>Plotting style for 1D marginals, {hist, kde cond, None}.</p> <code>'hist'</code> <code>figsize</code> <code>Tuple</code> <p>Size of the entire figure.</p> <code>(10, 10)</code> <code>labels</code> <code>Optional[List[str]]</code> <p>List of strings specifying the names of the parameters.</p> <code>None</code> <code>ticks</code> <code>Union[List, Tensor]</code> <p>Position of the ticks.</p> <code>[]</code> <code>points_colors</code> <p>Colors of the <code>points</code>.</p> required <code>fig</code> <p>matplotlib figure to plot on.</p> <code>None</code> <code>axes</code> <p>matplotlib axes corresponding to fig.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments to adjust the plot, e.g., <code>samples_colors</code>, <code>points_colors</code> and many more, see the source code in <code>_get_default_opts()</code> in <code>sbi.analysis.plot</code> for details.</p> <code>{}</code> <p>Returns: figure and axis of posterior distribution plot</p> Source code in <code>sbi/analysis/plot.py</code> <pre><code>def marginal_plot(\n    samples: Union[List[np.ndarray], List[torch.Tensor], np.ndarray, torch.Tensor],\n    points: Optional[\n        Union[List[np.ndarray], List[torch.Tensor], np.ndarray, torch.Tensor]\n    ] = None,\n    limits: Optional[Union[List, torch.Tensor]] = None,\n    subset: Optional[List[int]] = None,\n    diag: Optional[str] = \"hist\",\n    figsize: Tuple = (10, 10),\n    labels: Optional[List[str]] = None,\n    ticks: Union[List, torch.Tensor] = [],\n    fig=None,\n    axes=None,\n    **kwargs,\n):\n    \"\"\"\n    Plot samples in a row showing 1D marginals of selected dimensions.\n\n    Each of the plots can be interpreted as a 1D-marginal of the distribution\n    that the samples were drawn from.\n\n    Args:\n        samples: Samples used to build the histogram.\n        points: List of additional points to scatter.\n        limits: Array containing the plot xlim for each parameter dimension. If None,\n            just use the min and max of the passed samples\n        subset: List containing the dimensions to plot. E.g. subset=[1,3] will plot\n            plot only the 1st and 3rd dimension but will discard the 0th and 2nd (and,\n            if they exist, the 4th, 5th and so on).\n        diag: Plotting style for 1D marginals, {hist, kde cond, None}.\n        figsize: Size of the entire figure.\n        labels: List of strings specifying the names of the parameters.\n        ticks: Position of the ticks.\n        points_colors: Colors of the `points`.\n        fig: matplotlib figure to plot on.\n        axes: matplotlib axes corresponding to fig.\n        **kwargs: Additional arguments to adjust the plot, e.g., `samples_colors`,\n            `points_colors` and many more, see the source code in `_get_default_opts()`\n            in `sbi.analysis.plot` for details.\n\n    Returns: figure and axis of posterior distribution plot\n    \"\"\"\n\n    opts = _get_default_opts()\n    # update the defaults dictionary by the current values of the variables (passed by\n    # the user)\n\n    opts = _update(opts, locals())\n    opts = _update(opts, kwargs)\n\n    samples, dim, limits = prepare_for_plot(samples, limits)\n\n    # Prepare diag/upper/lower\n    if type(opts[\"diag\"]) is not list:\n        opts[\"diag\"] = [opts[\"diag\"] for _ in range(len(samples))]\n\n    diag_func = get_diag_func(samples, limits, opts, **kwargs)\n\n    return _arrange_plots(\n        diag_func, None, dim, limits, points, opts, fig=fig, axes=axes\n    )\n</code></pre> <p>Plot conditional distribution given all other parameters.</p> <p>The conditionals can be interpreted as slices through the <code>density</code> at a location given by <code>condition</code>.</p> <p>For example: Say we have a 3D density with parameters \\(\\theta_0\\), \\(\\theta_1\\), \\(\\theta_2\\) and a condition \\(c\\) passed by the user in the <code>condition</code> argument. For the plot of \\(\\theta_0\\) on the diagonal, this will plot the conditional \\(p(\\theta_0 | \\theta_1=c[1], \\theta_2=c[2])\\). For the upper diagonal of \\(\\theta_1\\) and \\(\\theta_2\\), it will plot \\(p(\\theta_1, \\theta_2 | \\theta_0=c[0])\\). All other diagonals and upper-diagonals are built in the corresponding way.</p> <p>Parameters:</p> Name Type Description Default <code>density</code> <code>Any</code> <p>Probability density with a <code>log_prob()</code> method.</p> required <code>condition</code> <code>Tensor</code> <p>Condition that all but the one/two regarded parameters are fixed to. The condition should be of shape (1, dim_theta), i.e. it could e.g. be a sample from the posterior distribution.</p> required <code>limits</code> <code>Union[List, Tensor]</code> <p>Limits in between which each parameter will be evaluated.</p> required <code>points</code> <code>Optional[Union[List[ndarray], List[Tensor], ndarray, Tensor]]</code> <p>Additional points to scatter.</p> <code>None</code> <code>subset</code> <code>Optional[List[int]]</code> <p>List containing the dimensions to plot. E.g. subset=[1,3] will plot plot only the 1<sup>st</sup> and 3<sup>rd</sup> dimension but will discard the 0<sup>th</sup> and 2<sup>nd</sup> (and, if they exist, the 4<sup>th</sup>, 5<sup>th</sup> and so on)</p> <code>None</code> <code>resolution</code> <code>int</code> <p>Resolution of the grid at which we evaluate the <code>pdf</code>.</p> <code>50</code> <code>figsize</code> <code>Tuple</code> <p>Size of the entire figure.</p> <code>(10, 10)</code> <code>labels</code> <code>Optional[List[str]]</code> <p>List of strings specifying the names of the parameters.</p> <code>None</code> <code>ticks</code> <code>Union[List, Tensor]</code> <p>Position of the ticks.</p> <code>[]</code> <code>points_colors</code> <p>Colors of the <code>points</code>.</p> required <code>fig</code> <p>matplotlib figure to plot on.</p> <code>None</code> <code>axes</code> <p>matplotlib axes corresponding to fig.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments to adjust the plot, e.g., <code>samples_colors</code>, <code>points_colors</code> and many more, see the source code in <code>_get_default_opts()</code> in <code>sbi.analysis.plot</code> for details.</p> <code>{}</code> <p>Returns: figure and axis of posterior distribution plot</p> Source code in <code>sbi/analysis/plot.py</code> <pre><code>def conditional_pairplot(\n    density: Any,\n    condition: torch.Tensor,\n    limits: Union[List, torch.Tensor],\n    points: Optional[\n        Union[List[np.ndarray], List[torch.Tensor], np.ndarray, torch.Tensor]\n    ] = None,\n    subset: Optional[List[int]] = None,\n    resolution: int = 50,\n    figsize: Tuple = (10, 10),\n    labels: Optional[List[str]] = None,\n    ticks: Union[List, torch.Tensor] = [],\n    fig=None,\n    axes=None,\n    **kwargs,\n):\n    r\"\"\"\n    Plot conditional distribution given all other parameters.\n\n    The conditionals can be interpreted as slices through the `density` at a location\n    given by `condition`.\n\n    For example:\n    Say we have a 3D density with parameters $\\theta_0$, $\\theta_1$, $\\theta_2$ and\n    a condition $c$ passed by the user in the `condition` argument.\n    For the plot of $\\theta_0$ on the diagonal, this will plot the conditional\n    $p(\\theta_0 | \\theta_1=c[1], \\theta_2=c[2])$. For the upper\n    diagonal of $\\theta_1$ and $\\theta_2$, it will plot\n    $p(\\theta_1, \\theta_2 | \\theta_0=c[0])$. All other diagonals and upper-diagonals\n    are built in the corresponding way.\n\n    Args:\n        density: Probability density with a `log_prob()` method.\n        condition: Condition that all but the one/two regarded parameters are fixed to.\n            The condition should be of shape (1, dim_theta), i.e. it could e.g. be\n            a sample from the posterior distribution.\n        limits: Limits in between which each parameter will be evaluated.\n        points: Additional points to scatter.\n        subset: List containing the dimensions to plot. E.g. subset=[1,3] will plot\n            plot only the 1st and 3rd dimension but will discard the 0th and 2nd (and,\n            if they exist, the 4th, 5th and so on)\n        resolution: Resolution of the grid at which we evaluate the `pdf`.\n        figsize: Size of the entire figure.\n        labels: List of strings specifying the names of the parameters.\n        ticks: Position of the ticks.\n        points_colors: Colors of the `points`.\n\n        fig: matplotlib figure to plot on.\n        axes: matplotlib axes corresponding to fig.\n        **kwargs: Additional arguments to adjust the plot, e.g., `samples_colors`,\n            `points_colors` and many more, see the source code in `_get_default_opts()`\n            in `sbi.analysis.plot` for details.\n\n    Returns: figure and axis of posterior distribution plot\n    \"\"\"\n    device = density._device if hasattr(density, \"_device\") else \"cpu\"\n\n    # Setting these is required because _pairplot_scaffold will check if opts['diag'] is\n    # `None`. This would break if opts has no key 'diag'. Same for 'upper'.\n    diag = \"cond\"\n    offdiag = \"cond\"\n\n    opts = _get_default_opts()\n    # update the defaults dictionary by the current values of the variables (passed by\n    # the user)\n    opts = _update(opts, locals())\n    opts = _update(opts, kwargs)\n    opts[\"lower\"] = None\n\n    dim, limits, eps_margins = prepare_for_conditional_plot(condition, opts)\n    diag_func = get_conditional_diag_func(opts, limits, eps_margins, resolution)\n\n    def offdiag_func(row, col, **kwargs):\n        p_image = (\n            eval_conditional_density(\n                opts[\"density\"],\n                opts[\"condition\"].to(device),\n                limits.to(device),\n                row,\n                col,\n                resolution=resolution,\n                eps_margins1=eps_margins[row],\n                eps_margins2=eps_margins[col],\n            )\n            .to(\"cpu\")\n            .numpy()\n        )\n        plt.imshow(\n            p_image.T,\n            origin=\"lower\",\n            extent=(\n                limits[col, 0].item(),\n                limits[col, 1].item(),\n                limits[row, 0].item(),\n                limits[row, 1].item(),\n            ),\n            aspect=\"auto\",\n        )\n\n    return _arrange_plots(\n        diag_func, offdiag_func, dim, limits, points, opts, fig=fig, axes=axes\n    )\n</code></pre> <p>Returns the conditional correlation matrix of a distribution.</p> <p>To compute the conditional distribution, we condition all but two parameters to values from <code>condition</code>, and then compute the Pearson correlation coefficient \\(\\rho\\) between the remaining two parameters under the distribution <code>density</code>. We do so for any pair of parameters specified in <code>subset</code>, thus creating a matrix containing conditional correlations between any pair of parameters.</p> <p>If <code>condition</code> is a batch of conditions, this function computes the conditional correlation matrix for each one of them and returns the mean.</p> <p>Parameters:</p> Name Type Description Default <code>density</code> <code>Any</code> <p>Probability density function with <code>.log_prob()</code> function.</p> required <code>limits</code> <code>Tensor</code> <p>Limits within which to evaluate the <code>density</code>.</p> required <code>condition</code> <code>Tensor</code> <p>Values to condition the <code>density</code> on. If a batch of conditions is passed, we compute the conditional correlation matrix for each of them and return the average conditional correlation matrix.</p> required <code>subset</code> <code>Optional[List[int]]</code> <p>Evaluate the conditional distribution only on a subset of dimensions. If <code>None</code> this function uses all dimensions.</p> <code>None</code> <code>resolution</code> <code>int</code> <p>Number of grid points on which the conditional distribution is evaluated. A higher value increases the accuracy of the estimated correlation but also increases the computational cost.</p> <code>50</code> <p>Returns: Average conditional correlation matrix of shape either <code>(num_dim, num_dim)</code> or <code>(len(subset), len(subset))</code> if <code>subset</code> was specified.</p> Source code in <code>sbi/analysis/conditional_density.py</code> <pre><code>def conditional_corrcoeff(\n    density: Any,\n    limits: Tensor,\n    condition: Tensor,\n    subset: Optional[List[int]] = None,\n    resolution: int = 50,\n) -&gt; Tensor:\n    r\"\"\"Returns the conditional correlation matrix of a distribution.\n\n    To compute the conditional distribution, we condition all but two parameters to\n    values from `condition`, and then compute the Pearson correlation\n    coefficient $\\rho$ between the remaining two parameters under the distribution\n    `density`. We do so for any pair of parameters specified in `subset`, thus\n    creating a matrix containing conditional correlations between any pair of\n    parameters.\n\n    If `condition` is a batch of conditions, this function computes the conditional\n    correlation matrix for each one of them and returns the mean.\n\n    Args:\n        density: Probability density function with `.log_prob()` function.\n        limits: Limits within which to evaluate the `density`.\n        condition: Values to condition the `density` on. If a batch of conditions is\n            passed, we compute the conditional correlation matrix for each of them and\n            return the average conditional correlation matrix.\n        subset: Evaluate the conditional distribution only on a subset of dimensions.\n            If `None` this function uses all dimensions.\n        resolution: Number of grid points on which the conditional distribution is\n            evaluated. A higher value increases the accuracy of the estimated\n            correlation but also increases the computational cost.\n\n    Returns: Average conditional correlation matrix of shape either `(num_dim, num_dim)`\n    or `(len(subset), len(subset))` if `subset` was specified.\n    \"\"\"\n\n    device = density._device if hasattr(density, \"_device\") else \"cpu\"\n\n    subset_ = subset if subset is not None else range(condition.shape[1])\n\n    correlation_matrices = []\n    for cond in condition:\n        correlation_matrices.append(\n            torch.stack(\n                [\n                    compute_corrcoeff(\n                        eval_conditional_density(\n                            density,\n                            cond.to(device),\n                            limits.to(device),\n                            dim1=dim1,\n                            dim2=dim2,\n                            resolution=resolution,\n                        ),\n                        limits[[dim1, dim2]].to(device),\n                    )\n                    for dim1 in subset_\n                    for dim2 in subset_\n                    if dim1 &lt; dim2\n                ]\n            )\n        )\n\n    average_correlations = torch.mean(torch.stack(correlation_matrices), dim=0)\n\n    # `average_correlations` is still a vector containing the upper triangular entries.\n    # Below, assemble them into a matrix:\n    av_correlation_matrix = torch.zeros((len(subset_), len(subset_)), device=device)\n    triu_indices = torch.triu_indices(\n        row=len(subset_), col=len(subset_), offset=1, device=device\n    )\n    av_correlation_matrix[triu_indices[0], triu_indices[1]] = average_correlations\n\n    # Make the matrix symmetric by copying upper diagonal to lower diagonal.\n    av_correlation_matrix = torch.triu(av_correlation_matrix) + torch.tril(\n        av_correlation_matrix.T\n    )\n\n    av_correlation_matrix.fill_diagonal_(1.0)\n    return av_correlation_matrix\n</code></pre>"},{"location":"examples/00_HH_simulator/","title":"Inference on Hodgkin-Huxley model: tutorial","text":"<p>In this tutorial, we use <code>sbi</code> to do inference on a Hodgkin-Huxley model from neuroscience (Hodgkin and Huxley, 1952). We will learn two parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)) based on a current-clamp recording, that we generate synthetically (in practice, this would be an experimental observation).</p> <p>Note, you find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/examples/00_HH_simulator.ipynb in the <code>sbi</code> repository.</p> <p>First we are going to import basic packages.</p> <pre><code>import numpy as np\nimport torch\n\n# visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# sbi\nfrom sbi import utils as utils\nfrom sbi import analysis as analysis\nfrom sbi.inference.base import infer\n</code></pre> <pre><code># remove top and right axis from plots\nmpl.rcParams[\"axes.spines.right\"] = False\nmpl.rcParams[\"axes.spines.top\"] = False\n</code></pre>"},{"location":"examples/00_HH_simulator/#different-required-components","title":"Different required components","text":"<p>Before running inference, let us define the different required components:</p> <ol> <li>observed data</li> <li>prior over model parameters</li> <li>simulator</li> </ol>"},{"location":"examples/00_HH_simulator/#1-observed-data","title":"1. Observed data","text":"<p>Let us assume we current-clamped a neuron and recorded the following voltage trace:</p> <p> </p> <p>In fact, this voltage trace was not measured experimentally but synthetically generated by simulating a Hodgkin-Huxley model with particular parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)). We will come back to this point later in the tutorial.</p>"},{"location":"examples/00_HH_simulator/#2-simulator","title":"2. Simulator","text":"<p>We would like to infer the posterior over the two parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)) of a Hodgkin-Huxley model, given the observed electrophysiological recording above. The model has channel kinetics as in Pospischil et al. 2008, and is defined by the following set of differential equations (parameters of interest highlighted in orange):</p> \\[ \\scriptsize \\begin{align} C_m\\frac{dV}{dt}&amp;=g_1\\left(E_1-V\\right)+                     \\color{orange}{\\bar{g}_{Na}}m^3h\\left(E_{Na}-V\\right)+                     \\color{orange}{\\bar{g}_{K}}n^4\\left(E_K-V\\right)+                     \\bar{g}_Mp\\left(E_K-V\\right)+                     I_{inj}+                     \\sigma\\eta\\left(t\\right)\\\\ \\frac{dq}{dt}&amp;=\\frac{q_\\infty\\left(V\\right)-q}{\\tau_q\\left(V\\right)},\\;q\\in\\{m,h,n,p\\} \\end{align} \\] <p>Above, \\(V\\) represents the membrane potential, \\(C_m\\) is the membrane capacitance, \\(g_{\\text{l}}\\) is the leak conductance, \\(E_{\\text{l}}\\) is the membrane reversal potential, \\(\\bar{g}_c\\) is the density of channels of type \\(c\\) (\\(\\text{Na}^+\\), \\(\\text{K}^+\\), M), \\(E_c\\) is the reversal potential of \\(c\\), (\\(m\\), \\(h\\), \\(n\\), \\(p\\)) are the respective channel gating kinetic variables, and \\(\\sigma \\eta(t)\\) is the intrinsic neural noise. The right hand side of the voltage dynamics is composed of a leak current, a voltage-dependent \\(\\text{Na}^+\\) current, a delayed-rectifier \\(\\text{K}^+\\) current, a slow voltage-dependent \\(\\text{K}^+\\) current responsible for spike-frequency adaptation, and an injected current \\(I_{\\text{inj}}\\). Channel gating variables \\(q\\) have dynamics fully characterized by the neuron membrane potential \\(V\\), given the respective steady-state \\(q_{\\infty}(V)\\) and time constant \\(\\tau_{q}(V)\\) (details in Pospischil et al. 2008).</p> <p>The input current \\(I_{\\text{inj}}\\) is defined as</p> <pre><code>from HH_helper_functions import syn_current\n\nI, t_on, t_off, dt, t, A_soma = syn_current()\n</code></pre> <p>The Hodgkin-Huxley simulator is given by:</p> <pre><code>from HH_helper_functions import HHsimulator\n</code></pre> <p>Putting the input current and the simulator together:</p> <pre><code>def run_HH_model(params):\n\n    params = np.asarray(params)\n\n    # input current, time step\n    I, t_on, t_off, dt, t, A_soma = syn_current()\n\n    t = np.arange(0, len(I), 1) * dt\n\n    # initial voltage\n    V0 = -70\n\n    states = HHsimulator(V0, params.reshape(1, -1), dt, t, I)\n\n    return dict(data=states.reshape(-1), time=t, dt=dt, I=I.reshape(-1))\n</code></pre> <p>To get an idea of the output of the Hodgkin-Huxley model, let us generate some voltage traces for different parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)), given the input current \\(I_{\\text{inj}}\\):</p> <pre><code># three sets of (g_Na, g_K)\nparams = np.array([[50.0, 1.0], [4.0, 1.5], [20.0, 15.0]])\n\nnum_samples = len(params[:, 0])\nsim_samples = np.zeros((num_samples, len(I)))\nfor i in range(num_samples):\n    sim_samples[i, :] = run_HH_model(params=params[i, :])[\"data\"]\n</code></pre> <pre><code># colors for traces\ncol_min = 2\nnum_colors = num_samples + col_min\ncm1 = mpl.cm.Blues\ncol1 = [cm1(1.0 * i / num_colors) for i in range(col_min, num_colors)]\n\nfig = plt.figure(figsize=(7, 5))\ngs = mpl.gridspec.GridSpec(2, 1, height_ratios=[4, 1])\nax = plt.subplot(gs[0])\nfor i in range(num_samples):\n    plt.plot(t, sim_samples[i, :], color=col1[i], lw=2)\nplt.ylabel(\"voltage (mV)\")\nax.set_xticks([])\nax.set_yticks([-80, -20, 40])\n\nax = plt.subplot(gs[1])\nplt.plot(t, I * A_soma * 1e3, \"k\", lw=2)\nplt.xlabel(\"time (ms)\")\nplt.ylabel(\"input (nA)\")\n\nax.set_xticks([0, max(t) / 2, max(t)])\nax.set_yticks([0, 1.1 * np.max(I * A_soma * 1e3)])\nax.yaxis.set_major_formatter(mpl.ticker.FormatStrFormatter(\"%.2f\"))\nplt.show()\n</code></pre> <p></p> <p>As can be seen, the voltage traces can be quite diverse for different parameter values.</p> <p>Often, we are not interested in matching the exact trace, but only in matching certain features thereof. In this example of the Hodgkin-Huxley model, the summary features are the number of spikes, the mean resting potential, the standard deviation of the resting potential, and the first four voltage moments: mean, standard deviation, skewness and kurtosis. Using the function <code>calculate_summary_statistics()</code> imported below, we obtain these statistics from the output of the Hodgkin Huxley simulator. </p> <pre><code>from HH_helper_functions import calculate_summary_statistics\n</code></pre> <p>Lastly, we define a function that performs all of the above steps at once. The function <code>simulation_wrapper</code> takes in conductance values, runs the Hodgkin Huxley model and then returns the summary statistics.</p> <pre><code>def simulation_wrapper(params):\n    \"\"\"\n    Returns summary statistics from conductance values in `params`.\n\n    Summarizes the output of the HH simulator and converts it to `torch.Tensor`.\n    \"\"\"\n    obs = run_HH_model(params)\n    summstats = torch.as_tensor(calculate_summary_statistics(obs))\n    return summstats\n</code></pre> <p><code>sbi</code> takes any function as simulator. Thus, <code>sbi</code> also has the flexibility to use simulators that utilize external packages, e.g., Brian (http://briansimulator.org/), nest (https://www.nest-simulator.org/), or NEURON (https://neuron.yale.edu/neuron/). External simulators do not even need to be Python-based as long as they store simulation outputs in a format that can be read from Python. All that is necessary is to wrap your external simulator of choice into a Python callable that takes a parameter set and outputs a set of summary statistics we want to fit the parameters to.</p>"},{"location":"examples/00_HH_simulator/#3-prior-over-model-parameters","title":"3. Prior over model parameters","text":"<p>Now that we have the simulator, we need to define a function with the prior over the model parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)), which in this case is chosen to be a Uniform distribution:</p> <pre><code>prior_min = [0.5, 1e-4]\nprior_max = [80.0, 15.0]\nprior = utils.torchutils.BoxUniform(\n    low=torch.as_tensor(prior_min), high=torch.as_tensor(prior_max)\n)\n</code></pre>"},{"location":"examples/00_HH_simulator/#inference","title":"Inference","text":"<p>Now that we have all the required components, we can run inference with SNPE to identify parameters whose activity matches this trace.</p> <pre><code>posterior = infer(\n    simulation_wrapper, prior, method=\"SNPE\", num_simulations=300, num_workers=4\n)\n</code></pre> <pre><code>HBox(children=(FloatProgress(value=0.0, description='Running 300 simulations in 300 batches.', max=300.0, styl\u2026\n\n\n\nNeural network successfully converged after 233 epochs.\n</code></pre> <p>Note <code>sbi</code> can parallelize your simulator. If you experience problems with parallelization, try setting <code>num_workers=1</code> and please give us an error report as a GitHub issue.</p>"},{"location":"examples/00_HH_simulator/#coming-back-to-the-observed-data","title":"Coming back to the observed data","text":"<p>As mentioned at the beginning of the tutorial, the observed data are generated by the Hodgkin-Huxley model with a set of known parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)). To illustrate how to compute the summary statistics of the observed data, let us regenerate the observed data:</p> <pre><code># true parameters and respective labels\ntrue_params = np.array([50.0, 5.0])\nlabels_params = [r\"$g_{Na}$\", r\"$g_{K}$\"]\n</code></pre> <pre><code>observation_trace = run_HH_model(true_params)\nobservation_summary_statistics = calculate_summary_statistics(observation_trace)\n</code></pre> <p>As we already shown above, the observed voltage traces look as follows:</p> <pre><code>fig = plt.figure(figsize=(7, 5))\ngs = mpl.gridspec.GridSpec(2, 1, height_ratios=[4, 1])\nax = plt.subplot(gs[0])\nplt.plot(observation_trace[\"time\"], observation_trace[\"data\"])\nplt.ylabel(\"voltage (mV)\")\nplt.title(\"observed data\")\nplt.setp(ax, xticks=[], yticks=[-80, -20, 40])\n\nax = plt.subplot(gs[1])\nplt.plot(observation_trace[\"time\"], I * A_soma * 1e3, \"k\", lw=2)\nplt.xlabel(\"time (ms)\")\nplt.ylabel(\"input (nA)\")\n\nax.set_xticks([0, max(observation_trace[\"time\"]) / 2, max(observation_trace[\"time\"])])\nax.set_yticks([0, 1.1 * np.max(I * A_soma * 1e3)])\nax.yaxis.set_major_formatter(mpl.ticker.FormatStrFormatter(\"%.2f\"))\n</code></pre> <p></p>"},{"location":"examples/00_HH_simulator/#analysis-of-the-posterior-given-the-observed-data","title":"Analysis of the posterior given the observed data","text":"<p>After running the inference algorithm, let us inspect the inferred posterior distribution over the parameters (\\(\\bar g_{Na}\\),\\(\\bar g_K\\)), given the observed trace. To do so, we first draw samples (i.e. consistent parameter sets) from the posterior:</p> <pre><code>samples = posterior.sample((10000,), x=observation_summary_statistics)\n</code></pre> <pre><code>HBox(children=(FloatProgress(value=0.0, description='Drawing 10000 posterior samples', max=10000.0, style=Prog\u2026\n</code></pre> <pre><code>fig, axes = analysis.pairplot(\n    samples,\n    limits=[[0.5, 80], [1e-4, 15.0]],\n    ticks=[[0.5, 80], [1e-4, 15.0]],\n    figsize=(5, 5),\n    points=true_params,\n    points_offdiag={\"markersize\": 6},\n    points_colors=\"r\",\n);\n</code></pre> <p></p> <p>As can be seen, the inferred posterior contains the ground-truth parameters (red) in a high-probability region. Now, let us sample parameters from the posterior distribution, simulate the Hodgkin-Huxley model for this parameter set and compare the simulations with the observed data:</p> <pre><code># Draw a sample from the posterior and convert to numpy for plotting.\nposterior_sample = posterior.sample((1,), x=observation_summary_statistics).numpy()\n</code></pre> <pre><code>HBox(children=(FloatProgress(value=0.0, description='Drawing 1 posterior samples', max=1.0, style=ProgressStyl\u2026\n</code></pre> <pre><code>fig = plt.figure(figsize=(7, 5))\n\n# plot observation\nt = observation_trace[\"time\"]\ny_obs = observation_trace[\"data\"]\nplt.plot(t, y_obs, lw=2, label=\"observation\")\n\n# simulate and plot samples\nx = run_HH_model(posterior_sample)\nplt.plot(t, x[\"data\"], \"--\", lw=2, label=\"posterior sample\")\n\nplt.xlabel(\"time (ms)\")\nplt.ylabel(\"voltage (mV)\")\n\nax = plt.gca()\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles[::-1], labels[::-1], bbox_to_anchor=(1.3, 1), loc=\"upper right\")\n\nax.set_xticks([0, 60, 120])\nax.set_yticks([-80, -20, 40]);\n</code></pre> <p></p> <p>As can be seen, the sample from the inferred posterior leads to simulations that closely resemble the observed data, confirming that <code>SNPE</code> did a good job at capturing the observed data in this simple case.</p>"},{"location":"examples/00_HH_simulator/#references","title":"References","text":"<p>A. L. Hodgkin and A. F. Huxley. A quantitative description of membrane current and its application to conduction and excitation in nerve. The Journal of Physiology, 117(4):500\u2013544, 1952.</p> <p>M. Pospischil, M. Toledo-Rodriguez, C. Monier, Z. Piwkowska, T. Bal, Y. Fr\u00e9gnac, H. Markram, and A. Destexhe. Minimal Hodgkin-Huxley type models for different classes of cortical and thalamic neurons. Biological Cybernetics, 99(4-5), 2008.</p>"},{"location":"examples/01_decision_making_model/","title":"SBI for decision-making models","text":"<p>In a previous tutorial, we showed how to use SBI with trial-based iid data. Such scenarios can arise, for example, in models of perceptual decision making. In addition to trial-based iid data points, these models often come with mixed data types and varying experimental conditions. Here, we show how <code>sbi</code> can be used to perform inference in such models with the <code>MNLE</code> method.</p>"},{"location":"examples/01_decision_making_model/#trial-based-sbi-with-mixed-data-types","title":"Trial-based SBI with mixed data types","text":"<p>In some cases, models with trial-based data additionally return data with mixed data types, e.g., continous and discrete data. For example, most computational models of decision-making have continuous reaction times and discrete choices as output. </p> <p>This can induce a problem when performing trial-based SBI that relies on learning a neural likelihood: It is challenging for most density estimators to handle both, continuous and discrete data at the same time.  However, there is a recent SBI method for solving this problem, it\u2019s called Mixed Neural Likelihood Estimation (MNLE). It works just like NLE, but with mixed data types. The trick is that it learns two separate density estimators, one for the discrete part of the data, and one for the continuous part, and combines the two to obtain the final neural likelihood. Crucially, the continuous density estimator is trained conditioned on the output of the discrete one, such that statistical dependencies between the discrete and continuous data (e.g., between choices and reaction times) are modeled as well. The interested reader is referred to the original paper available here.</p> <p>MNLE was recently added to <code>sbi</code> (see this PR and also issue) and follows the same API as <code>SNLE</code>.</p> <p>In this tutorial we will show how to apply <code>MNLE</code> to mixed data, and how to deal with varying experimental conditions. </p>"},{"location":"examples/01_decision_making_model/#toy-problem-for-mnle","title":"Toy problem for <code>MNLE</code>","text":"<p>To illustrate <code>MNLE</code> we set up a toy simulator that outputs mixed data and for which we know the likelihood such we can obtain reference posterior samples via MCMC.</p> <p>Simulator: To simulate mixed data we do the following</p> <ul> <li>Sample reaction time from <code>inverse Gamma</code></li> <li>Sample choices from <code>Binomial</code></li> <li>Return reaction time \\(rt \\in (0, \\infty)\\) and choice index \\(c \\in \\{0, 1\\}\\)</li> </ul> \\[ c \\sim \\text{Binomial}(\\rho) \\\\ rt \\sim \\text{InverseGamma}(\\alpha=2, \\beta) \\\\ \\] <p>Prior: The priors of the two parameters \\(\\rho\\) and \\(\\beta\\) are independent. We define a <code>Beta</code> prior over the probabilty parameter of the <code>Binomial</code> used in the simulator and a <code>Gamma</code> prior over the shape-parameter of the <code>inverse Gamma</code> used in the simulator:</p> \\[ p(\\beta, \\rho) = p(\\beta) \\; p(\\rho) ; \\\\ p(\\beta) = \\text{Gamma}(1, 0.5) \\\\ p(\\text{probs}) = \\text{Beta}(2, 2)  \\] <p>Because the <code>InverseGamma</code> and the <code>Binomial</code> likelihoods are well-defined we can perform MCMC on this problem and obtain reference-posterior samples.</p> <pre><code>import matplotlib.pyplot as plt\nimport torch\nfrom torch import Tensor\n\n\nfrom sbi.inference import MNLE\nfrom pyro.distributions import InverseGamma\nfrom torch.distributions import Beta, Binomial, Categorical, Gamma\nfrom sbi.utils import MultipleIndependent\nfrom sbi.utils.metrics import c2st\n\nfrom sbi.analysis import pairplot\nfrom sbi.inference import MCMCPosterior\nfrom sbi.utils.torchutils import atleast_2d\n\nfrom sbi.inference.potentials.likelihood_based_potential import (\n    MixedLikelihoodBasedPotential,\n)\nfrom sbi.utils.conditional_density_utils import ConditionedPotential\n\nfrom sbi.utils import mcmc_transform\nfrom sbi.inference.potentials.base_potential import BasePotential\n</code></pre> <pre><code># Toy simulator for mixed data\ndef mixed_simulator(theta: Tensor, concentration_scaling: float = 1.0):\n    \"\"\"Returns a sample from a mixed distribution given parameters theta.\n\n    Args:\n        theta: batch of parameters, shape (batch_size, 2)\n        concentration_scaling: scaling factor for the concentration parameter of the InverseGamma distribution, mimics an experimental condition.\n\n    \"\"\"\n    beta, ps = theta[:, :1], theta[:, 1:]\n\n    choices = Binomial(probs=ps).sample()\n    rts = InverseGamma(\n        concentration=concentration_scaling * torch.ones_like(beta), rate=beta\n    ).sample()\n\n    return torch.cat((rts, choices), dim=1)\n\n\n# The potential function defines the ground truth likelihood and allows us to obtain reference posterior samples via MCMC.\nclass PotentialFunctionProvider(BasePotential):\n    allow_iid_x = True  # type: ignore\n\n    def __init__(self, prior, x_o, concentration_scaling=1.0, device=\"cpu\"):\n        super().__init__(prior, x_o, device)\n        self.concentration_scaling = concentration_scaling\n\n    def __call__(self, theta, track_gradients: bool = True):\n        theta = atleast_2d(theta)\n\n        with torch.set_grad_enabled(track_gradients):\n            iid_ll = self.iid_likelihood(theta)\n\n        return iid_ll + self.prior.log_prob(theta)\n\n    def iid_likelihood(self, theta):\n        lp_choices = torch.stack(\n            [\n                Binomial(probs=th.reshape(1, -1)).log_prob(self.x_o[:, 1:])\n                for th in theta[:, 1:]\n            ],\n            dim=1,\n        )\n\n        lp_rts = torch.stack(\n            [\n                InverseGamma(\n                    concentration=self.concentration_scaling * torch.ones_like(beta_i),\n                    rate=beta_i,\n                ).log_prob(self.x_o[:, :1])\n                for beta_i in theta[:, :1]\n            ],\n            dim=1,\n        )\n\n        joint_likelihood = (lp_choices + lp_rts).squeeze()\n\n        assert joint_likelihood.shape == torch.Size([self.x_o.shape[0], theta.shape[0]])\n        return joint_likelihood.sum(0)\n</code></pre> <pre><code># Define independent prior.\nprior = MultipleIndependent(\n    [\n        Gamma(torch.tensor([1.0]), torch.tensor([0.5])),\n        Beta(torch.tensor([2.0]), torch.tensor([2.0])),\n    ],\n    validate_args=False,\n)\n</code></pre>"},{"location":"examples/01_decision_making_model/#obtain-reference-posterior-samples-via-analytical-likelihood-and-mcmc","title":"Obtain reference-posterior samples via analytical likelihood and MCMC","text":"<pre><code>torch.manual_seed(42)\nnum_trials = 10\nnum_samples = 1000\ntheta_o = prior.sample((1,))\nx_o = mixed_simulator(theta_o.repeat(num_trials, 1))\n</code></pre> <pre><code>mcmc_kwargs = dict(\n    num_chains=20,\n    warmup_steps=50,\n    method=\"slice_np_vectorized\",\n    init_strategy=\"proposal\",\n)\n\ntrue_posterior = MCMCPosterior(\n    potential_fn=PotentialFunctionProvider(prior, x_o),\n    proposal=prior,\n    theta_transform=mcmc_transform(prior, enable_transform=True),\n    **mcmc_kwargs,\n)\ntrue_samples = true_posterior.sample((num_samples,))\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 10 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n</code></pre>"},{"location":"examples/01_decision_making_model/#train-mnle-and-generate-samples-via-mcmc","title":"Train MNLE and generate samples via MCMC","text":"<pre><code># Training data\nnum_simulations = 20000\n# For training the MNLE emulator we need to define a proposal distribution, the prior is\n# a good choice.\nproposal = prior\ntheta = proposal.sample((num_simulations,))\nx = mixed_simulator(theta)\n\n# Train MNLE and obtain MCMC-based posterior.\ntrainer = MNLE()\nestimator = trainer.append_simulations(theta, x).train(training_batch_size=1000)\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/neural_nets/mnle.py:60: UserWarning: The mixed neural likelihood estimator assumes that x contains\n        continuous data in the first n-1 columns (e.g., reaction times) and\n        categorical data in the last column (e.g., corresponding choices). If\n        this is not the case for the passed `x` do not use this function.\n  warnings.warn(\n\n\n Neural network successfully converged after 73 epochs.\n</code></pre> <pre><code># Build posterior from the trained estimator and prior.\nmnle_posterior = trainer.build_posterior(prior=prior)\n\nmnle_samples = mnle_posterior.sample((num_samples,), x=x_o, **mcmc_kwargs)\n</code></pre> <pre><code>Running vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n</code></pre>"},{"location":"examples/01_decision_making_model/#compare-mnle-and-reference-posterior","title":"Compare MNLE and reference posterior","text":"<pre><code># Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    [\n        prior.sample((1000,)),\n        true_samples,\n        mnle_samples,\n    ],\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n    labels=[r\"$\\beta$\", r\"$\\rho$\"],\n)\n\nplt.sca(ax[1, 1])\nplt.legend(\n    [\"Prior\", \"Reference\", \"MNLE\", r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <p>We see that the inferred <code>MNLE</code> posterior nicely matches the reference posterior, and how both inferred a posterior that is quite different from the prior.</p> <p>Because MNLE training is amortized we can obtain another posterior given a different observation with potentially a different number of trials, just by running MCMC again (without re-training <code>MNLE</code>):</p>"},{"location":"examples/01_decision_making_model/#repeat-inference-with-different-x_o-that-contains-more-trials","title":"Repeat inference with different <code>x_o</code> that contains more trials","text":"<pre><code>num_trials = 50\nx_o = mixed_simulator(theta_o.repeat(num_trials, 1))\ntrue_samples = true_posterior.sample((num_samples,), x=x_o, **mcmc_kwargs)\nmnle_samples = mnle_posterior.sample((num_samples,), x=x_o, **mcmc_kwargs)\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 50 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n\n\n\nRunning vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code># Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    [\n        prior.sample((1000,)),\n        true_samples,\n        mnle_samples,\n    ],\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n    labels=[r\"$\\beta$\", r\"$\\rho$\"],\n)\n\nplt.sca(ax[1, 1])\nplt.legend(\n    [\"Prior\", \"Reference\", \"MNLE\", r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <pre><code>print(c2st(true_samples, mnle_samples)[0])\n</code></pre> <pre><code>tensor(0.5565)\n</code></pre> <p>Again we can see that the posteriors match nicely. In addition, we observe that the posterior\u2019s (epistemic) uncertainty reduces as we increase the number of trials. </p> <p>Note: <code>MNLE</code> is trained on single-trial data. Theoretically, density estimation is perfectly accurate only in the limit of infinite training data. Thus, training with a finite amount of training data naturally induces a small bias in the density estimator.  As we observed above, this bias is so small that we don\u2019t really notice it, e.g., the <code>c2st</code> scores were close to 0.5.  However, when we increase the number of trials in <code>x_o</code> dramatically (on the order of 1000s) the small bias can accumulate over the trials and inference with <code>MNLE</code> can become less accurate.</p>"},{"location":"examples/01_decision_making_model/#mnle-with-experimental-conditions","title":"MNLE with experimental conditions","text":"<p>In the perceptual decision-making research it is common to design experiments with varying experimental decisions, e.g., to vary the difficulty of the task.  During parameter inference, it can be beneficial to incorporate the experimental conditions.  In MNLE, we are learning an emulator that should be able to generate synthetic experimental data including reaction times and choices given different experimental conditions.  Thus, to make MNLE work with experimental conditions, we need to include them in the training process, i.e., treat them like auxiliary parameters of the simulator: </p> <pre><code># define a simulator wrapper in which the experimental condition are contained in theta and passed to the simulator.\ndef sim_wrapper(theta):\n    # simulate with experiment conditions\n    return mixed_simulator(\n        theta=theta[:, :2],\n        concentration_scaling=theta[:, 2:]\n        + 1,  # add 1 to deal with 0 values from Categorical distribution\n    )\n</code></pre> <pre><code># Define a proposal that contains both, priors for the parameters and a discrte prior over experimental conditions.\nproposal = MultipleIndependent(\n    [\n        Gamma(torch.tensor([1.0]), torch.tensor([0.5])),\n        Beta(torch.tensor([2.0]), torch.tensor([2.0])),\n        Categorical(probs=torch.ones(1, 3)),\n    ],\n    validate_args=False,\n)\n\n# Simulated data\nnum_simulations = 10000\nnum_samples = 1000\ntheta = proposal.sample((num_simulations,))\nx = sim_wrapper(theta)\nassert x.shape == (num_simulations, 2)\n\n# simulate observed data and define ground truth parameters\nnum_trials = 10\ntheta_o = proposal.sample((1,))\ntheta_o[0, 2] = 2.0  # set condition to 2 as in original simulator.\nx_o = sim_wrapper(theta_o.repeat(num_trials, 1))\n</code></pre>"},{"location":"examples/01_decision_making_model/#obtain-ground-truth-posterior-via-mcmc","title":"Obtain ground truth posterior via MCMC","text":"<p>We obtain a ground-truth posterior via MCMC by using the PotentialFunctionProvider.</p> <p>For that, we first the define the actual prior, i.e., the distribution over the parameter we want to infer (not the proposal).</p> <p>Thus, we leave out the discrete prior over experimental conditions.</p> <pre><code>prior = MultipleIndependent(\n    [\n        Gamma(torch.tensor([1.0]), torch.tensor([0.5])),\n        Beta(torch.tensor([2.0]), torch.tensor([2.0])),\n    ],\n    validate_args=False,\n)\nprior_transform = mcmc_transform(prior)\n\n# We can now use the PotentialFunctionProvider to obtain a ground-truth posterior via MCMC.\ntrue_posterior_samples = MCMCPosterior(\n    PotentialFunctionProvider(\n        prior,\n        x_o,\n        concentration_scaling=float(theta_o[0, 2])\n        + 1.0,  # add one because the sim_wrapper adds one (see above)\n    ),\n    theta_transform=prior_transform,\n    proposal=prior,\n    **mcmc_kwargs,\n).sample((num_samples,), show_progress_bars=True)\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 10 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n</code></pre>"},{"location":"examples/01_decision_making_model/#train-mnle-including-experimental-conditions","title":"Train MNLE including experimental conditions","text":"<pre><code>trainer = MNLE(proposal)\nestimator = trainer.append_simulations(theta, x).train(training_batch_size=100)\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/neural_nets/mnle.py:60: UserWarning: The mixed neural likelihood estimator assumes that x contains\n        continuous data in the first n-1 columns (e.g., reaction times) and\n        categorical data in the last column (e.g., corresponding choices). If\n        this is not the case for the passed `x` do not use this function.\n  warnings.warn(\n\n\n Neural network successfully converged after 73 epochs.\n</code></pre>"},{"location":"examples/01_decision_making_model/#construct-conditional-potential-function","title":"Construct conditional potential function","text":"<p>To obtain posterior samples conditioned on a particular experimental condition (and on x_o), we need to construct a corresponding potential function.</p> <pre><code># First, we define the potential function for the complete, unconditional MNLE-likelihood.\npotential_fn = MixedLikelihoodBasedPotential(estimator, proposal, x_o)\n\n# Then we use the potential to construct the conditional potential function.\n# Here, we tell the constructor to condition on the last dimension (index 2) by passing dims_to_sample=[0, 1].\nconditioned_potential_fn = ConditionedPotential(\n    potential_fn,\n    condition=theta_o,\n    dims_to_sample=[0, 1],\n    allow_iid_x=True,  # we also need to explicitly tell that MNLE allows iid_x\n)\n\n# Using this potential function, we can now obtain conditional samples.\nmnle_posterior = MCMCPosterior(\n    potential_fn=conditioned_potential_fn,\n    theta_transform=prior_transform,\n    proposal=prior,\n    **mcmc_kwargs\n)\nconditional_samples = mnle_posterior.sample((num_samples,), x=x_o)\n</code></pre> <pre><code>Running vectorized MCMC with 20 chains:   0%|          | 0/20000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code># Finally, we can compare the ground truth conditional posterior with the MNLE-conditional posterior.\nfig, ax = pairplot(\n    [\n        prior.sample((1000,)),\n        true_posterior_samples,\n        conditional_samples,\n    ],\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n    labels=[r\"$\\beta$\", r\"$\\rho$\"],\n)\n\nplt.sca(ax[1, 1])\nplt.legend(\n    [\"Prior\", \"Reference\", \"MNLE\", r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <p></p> <p>They match accurately, showing that we can indeed post-hoc condition the trained MNLE likelihood on different experimental conditions.</p> <pre><code>\n</code></pre>"},{"location":"faq/question_01/","title":"What should I do when my \u2018posterior samples are outside of the prior support\u2019 in SNPE?","text":"<p>When working with multi-round SNPE, you might have experienced the following warning:  <pre><code>Only x% posterior samples are within the prior support. It may take a long time to collect the remaining 10000 samples. Consider interrupting (Ctrl-C) and switching to 'sample_with_mcmc=True'.\n</code></pre></p> <p>This reason for this issue is described in more detail  here and here.  The following fixes are possible:  </p> <ul> <li> <p>sample with MCMC: <code>samples = posterior((num_samples,), x=x_o, sample_with_mcmc=True)</code>. This will make sampling slower, but samples will not \u2018leak\u2019.  </p> </li> <li> <p>resort to single-round SNPE and (if necessary) increase your simulation budget.  </p> </li> <li> <p>if your prior is either Gaussian (torch.distributions.multivariateNormal) or Uniform  (sbi.utils.BoxUniform), you can avoid leakage by using a mixture density network as  density estimator. I.e., using the  flexible interface, set  <code>density_estimator='mdn'</code>. When running inference, there should be a print statement  \u201cUsing SNPE-C with non-atomic loss\u201d</p> </li> <li> <p>use a different algorithm, e.g. SNRE and SNLE. Note, however, that these algorithms can have different issues and potential pitfalls.  </p> </li> </ul>"},{"location":"faq/question_02/","title":"Can the algorithms deal with invalid data, e.g. NaN or inf?","text":"<p>Yes. By default, whenever a simulation returns at least one <code>NaN</code> or <code>inf</code>, it is  completely excluded from the training data. In other words, the simulation is simply  discarded.</p> <p>In cases where a very large fraction of simulations return <code>NaN</code> or <code>inf</code>, discarding many simulations can be wasteful. There are two options to deal with this: Either, you use the <code>RestrictionEstimator</code> to learn regions in parameter space that do not produce <code>NaN</code> or <code>inf</code>, see here. Alternatively, you can manually substitute the \u2018invalid\u2019 values with a reasonable replacement.  I.e., at the end of your simulation code, you search for invalid entries and replace  them with a floating point number. Importantly, in order for neural network training  work well, the floating point number should still be in a reasonable range, i.e. maybe a  few standard deviations outside of \u2018good\u2019 values.</p> <p>If you are running multi-round SNPE, however, things can go fully wrong if invalid  data are encountered. In that case, you will get the following warning <pre><code>When invalid simulations are excluded, multi-round SNPE-C can leak into the regions where parameters led to invalid simulations. This can lead to poor results.\n</code></pre> Hence, if you are running multi-round SNPE and a significant fraction of simulations returns at least one invalid number, we strongly recommend to manually replace the value  in your simulation code as described above (or resort to single-round SNPE or use a   different method).</p>"},{"location":"faq/question_03/","title":"When using multiple workers, I get a pickling error. Can I still use multiprocessing?","text":"<p>Yes, but you will have to make a few adjustments to your code. </p> <p>Some background: when using <code>num_workers &gt; 1</code>, you might experience an error that a  certain object from your simulator could not be pickled (an example can be found here).</p> <p>This can be fixed by forcing <code>sbi</code> to pickle with <code>dill</code> instead of the default  <code>cloudpickle</code>. To do so, adjust your code as  follows:</p> <ul> <li>Install <code>dill</code>: <pre><code>pip install dill\n</code></pre></li> <li>At the very beginning of your python script, set the pickler to <code>dill</code>: <pre><code>from joblib.externals.loky import set_loky_pickler\nset_loky_pickler(\"dill\")\n</code></pre></li> <li>Move all imports required by your simulator into the simulator: <pre><code># Imports specified outside of the simulator will break dill:\nimport torch\ndef my_simulator(parameters):\n    return torch.ones(1,10)\n\n# Therefore, move the imports into the simulator:\ndef my_simulator(parameters):\n    import torch\n    return torch.ones(1,10)\n</code></pre></li> </ul>"},{"location":"faq/question_03/#alternative-parallelize-yourself","title":"Alternative: parallelize yourself","text":"<p>You can also write your own code to parallelize simulations with whatever  multiprocessing framework you prefer. You can then simulate your data outside of <code>sbi</code> and pass the simulated data as shown in the  flexible interface: </p>"},{"location":"faq/question_03/#some-more-background","title":"Some more background","text":"<p><code>sbi</code> uses <code>joblib</code> to parallelize simulations, which in turn uses <code>pickle</code> or  <code>cloudpickle</code> to serialize the simulator. Almost all simulators will be picklable with  <code>cloudpickle</code>, but we have experienced issues e.g. with <code>neuron</code> simulators, see here.</p>"},{"location":"faq/question_04/","title":"Can I use the GPU for training the density estimator?","text":"<p>TLDR; Yes, by passing <code>device=\"cuda\"</code> and by passing a prior that lives on the device name your passed. But no speed-ups for default density estimators.</p> <p>Yes. When creating the inference object in the flexible interface, you can pass the <code>device</code> as an argument, e.g.,</p> <pre><code>inference = SNPE(prior, device=\"cuda\", density_estimator=\"maf\")\n</code></pre> <p>The device is set to <code>\"cpu\"</code> by default, and it can be set to anything, as long as it maps to an existing PyTorch CUDA device. <code>sbi</code> will take care of copying the <code>net</code> and the training data to and from the <code>device</code>.  Note that the prior must be on the training device already, e.g., when passing <code>device=\"cuda:0\"</code>, make sure to pass a prior object that was created on that device, e.g.,  <code>prior = torch.distributions.MultivariateNormal(loc=torch.zeros(2, device=\"cuda:0\"),                                                  covariance_matrix=torch.eye(2, device=\"cuda:0\"))</code>.</p>"},{"location":"faq/question_04/#performance","title":"Performance","text":"<p>Whether or not you reduce your training time when training on a GPU depends on the problem at hand. We provide a couple of default density estimators for <code>SNPE</code>, <code>SNLE</code> and <code>SNRE</code>, e.g., a mixture density network (<code>density_estimator=\"mdn\"</code>) or a Masked Autoregressive Flow (<code>density_estimator=\"maf\"</code>). For those default density estimators we do not expect a speed up. This is because the underlying neural networks are quite shallow and not tall, e.g., they do not have many parameters or matrix operations that profit a lot from being executed on the GPU. </p> <p>A speed up through training on the GPU will most likely become visible when you are using convolutional modules in your neural networks. E.g., when passing an embedding net for image processing like in this example: https://github.com/sbi-dev/sbi/blob/main/tutorials/05_embedding_net.ipynb. </p>"},{"location":"faq/question_05/","title":"How should I save and load objects in <code>sbi</code>?","text":"<p><code>NeuralPosterior</code> objects are picklable. <pre><code>import pickle\n\n# ... run inference\nposterior = inference.build_posterior()\n\nwith open(\"/path/to/my_posterior.pkl\", \"wb\") as handle:\n    pickle.dump(posterior, handle)\n</code></pre></p> <p>Note: posterior objects that were saved under <code>sbi v0.17.2</code> or older can not be loaded under <code>sbi v0.18.0</code> or newer.</p> <p>Note: if you try to load a posterior that was saved under <code>sbi v0.14.x</code> or earlier under <code>sbi v0.15.x</code> until <code>sbi v0.17.x</code>, you have to add: <pre><code>import sys\nfrom sbi.utils import user_input_checks_utils\n\nsys.modules[\"sbi.user_input.user_input_checks_utils\"] = user_input_checks_utils\n</code></pre> to your script before loading the posterior.</p> <p>As of <code>sbi v0.18.0</code>, <code>NeuralInference</code> objects are also picklable. <pre><code>import pickle\n\n# ... run inference\nposterior = inference.build_posterior()\n\nwith open(\"/path/to/my_inference.pkl\", \"wb\") as handle:\n    pickle.dump(inference, handle)\n</code></pre> However, saving and loading the <code>inference</code> object will slightly modify the object (in order to make it serializable). These modifications lead to the following two changes in behaviour: 1) Retraining from scratch is not supported, i.e. <code>.train(..., retrain_from_scratch=True)</code> does not work. 2) When the loaded object calls the <code>.train()</code> method, it generates a new tensorboard summary writer (instead of appending to the current one).</p>"},{"location":"faq/question_06/","title":"Can I stop neural network training and resume it later?","text":"<p>Many clusters have a time limit and <code>sbi</code> might exceed this limit. You can circumvent this problem by using the flexible interface. After simulations are finished, <code>sbi</code> trains a neural network. If this process takes too long, you can stop training and resume it later. The syntax is:</p> <pre><code>inference = SNPE(prior=prior)\ninference = inference.append_simulations(theta, x)\ninference.train(max_num_epochs=300)  # Pick `max_num_epochs` such that it does not exceed the runtime.\n\nwith open(\"path/to/my/inference.pkl\", \"wb\") as handle:\n    pickle.dump(inference, handle)\n\n# To resume training:\nwith open(\"path/to/my/inference.pkl\", \"rb\") as handle:\n    inference_from_disk = pickle.load(handle)\ninference_from_disk.train(resume_training=True, max_num_epochs=600)  # Run epochs 301 until 600 (or stop early).\nposterior = inference_from_disk.build_posterior()\n</code></pre>"},{"location":"faq/question_07/","title":"Can I use a custom prior with sbi?","text":"<p><code>sbi</code> works with torch distributions only so we recommend to use those whenever possible. For example, when you are used to using <code>scipy.stats</code> distributions as priors then we recommend using the corresponding <code>torch.distributions</code>, most common distributions are implemented there. </p> <p>In case you want to use a custom prior that is not in the set of common distributions that\u2019s possible as well: You need to write a prior class that mimicks the behaviour of a <code>torch.distributions.Distribution</code> class. Then <code>sbi</code> will wrap this class to make it a fully functional torch <code>Distribution</code>.</p> <p>Essentially, the class needs two methods:</p> <ul> <li><code>.sample(sample_shape)</code>, where sample_shape is a shape tuple, e.g., <code>(n,)</code>, and returns a batch of n samples, e.g., of shape (n, 2)` for a two dimenional prior.</li> <li><code>.log_prob(value)</code> method that returns the \u201clog probs\u201d of parameters under the prior, e.g., for a batches of n parameters with shape <code>(n, ndims)</code> it should return a log probs array of shape <code>(n,)</code>.</li> </ul> <p>For sbi &gt; 0.17.2 this could look like the following:</p> <pre><code>class CustomUniformPrior:\n    \"\"\"User defined numpy uniform prior.\n\n    Custom prior with user-defined valid .sample and .log_prob methods.\n    \"\"\"\n\n    def __init__(self, lower: Tensor, upper: Tensor, return_numpy: bool = False):\n        self.lower = lower\n        self.upper = upper\n        self.dist = BoxUniform(lower, upper)\n        self.return_numpy = return_numpy\n\n    def sample(self, sample_shape=torch.Size([])):\n        samples = self.dist.sample(sample_shape)\n        return samples.numpy() if self.return_numpy else samples\n\n    def log_prob(self, values):\n        if self.return_numpy:\n            values = torch.as_tensor(values)\n        log_probs = self.dist.log_prob(values)\n        return log_probs.numpy() if self.return_numpy else log_probs\n</code></pre> <p>Once you have such a class you can wrap into a <code>Distribution</code> using the <code>process_prior</code> function <code>sbi</code> provides:</p> <pre><code>from sbi.utils import process_prior\n\ncustom_prior = CustomUniformPrior(torch.zeros(2), torch.ones(2))\nprior, *_ = process_prior(custom_prior)  # Keeping only the first return.\n# use this wrapped prior in sbi...\n</code></pre> <p>In <code>sbi</code> it is sometimes required to check the support of the prior, e.g., when the prior support is bounded and one wants to reject samples from the posterior density estimator that lie outside the prior support. In torch <code>Distributions</code> this is handled automatically, however, when using a custom prior it is not. Thus,  if your prior has bounded support (like the one above) it makes sense to pass the bounds to the wrapper function such that <code>sbi</code> can pass them to torch <code>Distributions</code>:</p> <pre><code>from sbi.utils import process_prior\n\ncustom_prior = CustomUniformPrior(torch.zeros(2), torch.ones(2))\nprior = process_prior(custom_prior, \n                      custom_prior_wrapper_kwargs=dict(lower_bound=torch.zeros(2), \n                                                       upper_bound=torch.ones(2)))\n# use this wrapped prior in sbi...\n</code></pre> <p>Note that in <code>custom_prior_wrapper_kwargs</code> you can pass additinal arguments for the wrapper, e.g., <code>validate_args</code> or <code>arg_constraints</code> see the <code>Distribution</code> documentation for more details. </p> <p>If you are running sbi &lt; 0.17.2 and use <code>SNLE</code> the code above will produce a <code>NotImplementedError</code> (see #581). In this case you need to update to a newer version of <code>sbi</code> or use <code>SNPE</code> instead. </p>"},{"location":"tutorial/00_getting_started/","title":"Getting started with <code>sbi</code>","text":"<p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/00_getting_started.ipynb in the <code>sbi</code> repository.</p> <pre><code>import torch\nfrom sbi import utils as utils\nfrom sbi import analysis as analysis\nfrom sbi.inference.base import infer\n</code></pre>"},{"location":"tutorial/00_getting_started/#running-the-inference-procedure","title":"Running the inference procedure","text":"<p><code>sbi</code> provides a simple interface to run state-of-the-art algorithms for simulation-based inference.</p> <p>For inference, you need to provide two ingredients:</p> <p>1) a prior distribution that allows to sample parameter sets. 2) a simulator that takes parameter sets and produces simulation outputs.</p> <p>For example, we can have a 3-dimensional parameter space with a uniform prior between [-1,1] and a simple simulator that for the sake of example adds 1.0 and some Gaussian noise to the parameter set:</p> <pre><code>num_dim = 3\nprior = utils.BoxUniform(low=-2 * torch.ones(num_dim), high=2 * torch.ones(num_dim))\n\ndef simulator(parameter_set):\n    return 1.0 + parameter_set + torch.randn(parameter_set.shape) * 0.1\n</code></pre> <p><code>sbi</code> can then run inference:</p> <pre><code># Other methods are \"SNLE\" or \"SNRE\".\nposterior = infer(simulator, prior, method=\"SNPE\", num_simulations=1000)\n</code></pre> <pre><code>Running 1000 simulations.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 119 epochs.\n</code></pre> <p>Let\u2019s say we have made some observation \\(x\\):</p> <pre><code>observation = torch.zeros(3)\n</code></pre> <p>Given this observation, we can then sample from the posterior \\(p(\\theta|x)\\), evaluate its log-probability, or plot it.</p> <pre><code>samples = posterior.sample((10000,), x=observation)\nlog_probability = posterior.log_prob(samples, x=observation)\n_ = analysis.pairplot(samples, limits=[[-2, 2], [-2, 2], [-2, 2]], figsize=(6, 6))\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p>"},{"location":"tutorial/00_getting_started/#next-steps","title":"Next steps","text":"<p>The single-line interface described above provides an easy entry for using <code>sbi</code>. However, on almost any real-world problem that goes beyond a simple demonstration, we strongly recommend using the flexible interface.</p>"},{"location":"tutorial/01_gaussian_amortized/","title":"Amortized posterior inference on Gaussian example","text":"<p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/01_gaussian_amortized.ipynb in the <code>sbi</code> repository.</p> <p>In this tutorial, we will demonstrate how <code>sbi</code> can infer an amortized posterior for a simple toy model with a uniform prior and Gaussian likelihood.</p> <pre><code>import torch\nimport numpy as np\n\nfrom sbi import utils as utils\nfrom sbi import analysis as analysis\nfrom sbi.inference.base import infer\n</code></pre>"},{"location":"tutorial/01_gaussian_amortized/#defining-prior-simulator-and-running-inference","title":"Defining prior, simulator, and running inference","text":"<p>Say we have a 3-dimensional parameter space, and the prior is uniformly distributed between <code>-2</code> and <code>2</code> in each dimension, i.e. \\(\\theta \\in [-2,2], y\\in [-2,2], z \\in [-2,2]\\).</p> <pre><code>num_dim = 3\nprior = utils.BoxUniform(low=-2 * torch.ones(num_dim), high=2 * torch.ones(num_dim))\n</code></pre> <p>Our simulator takes the input parameters, adds <code>1.0</code> in each dimension, and then adds some Gaussian noise:</p> <pre><code>def linear_gaussian(theta):\n    return theta + 1.0 + torch.randn_like(theta) * 0.1\n</code></pre> <p>We can then run inference (either with the simple interface or with the flexible interface):</p> <pre><code>posterior = infer(linear_gaussian, prior, \"SNPE\", num_simulations=1000)\n</code></pre>"},{"location":"tutorial/01_gaussian_amortized/#amortized-inference","title":"Amortized inference","text":"<p>Note that we have not yet provided an observation to the inference procedure. In fact, we can evaluate the posterior for different observations without having to re-run inference. This is called amortization. An amortized posterior is one that is not focused on any particular observation. Naturally, if the diversity of observations is large, any of the inference methods will need to run a sufficient number of simulations for the resulting posterior to perform well across these diverse observations.</p> <p>Let\u2019s say we have two observations <code>x_o_1 = [0,0,0]</code> and <code>x_o_2 = [2,2,2]</code>:</p> <pre><code>x_o_1 = torch.zeros(3,)\nx_o_2 = 2.0 * torch.ones(3,)\n</code></pre> <p>We can draw samples from the posterior given <code>x_o_1</code> and then plot them:</p> <pre><code>posterior_samples_1 = posterior.sample((10000,), x=x_o_1)\n\n# plot posterior samples\n_ = analysis.pairplot(\n    posterior_samples_1, limits=[[-2, 2], [-2, 2], [-2, 2]], figsize=(5, 5)\n)\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <p>As it can be seen, the posterior samples are centered around <code>[-1,-1,-1]</code> in each dimension.  This makes sense because the simulator always adds <code>1.0</code> in each dimension and we have observed <code>x_o_1 = [0,0,0]</code>.</p> <p>Since the learned posterior is amortized, we can also draw samples from the posterior given the second observation without having to re-run inference:</p> <pre><code>posterior_samples_2 = posterior.sample((10000,), x=x_o_2)\n\n# plot posterior samples\n_ = analysis.pairplot(\n    posterior_samples_2, limits=[[-2, 2], [-2, 2], [-2, 2]], figsize=(5, 5)\n)\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <p>So, if we observed <code>x_o_2 = [2,2,2]</code>, the posterior is centered around <code>[1,1,1]</code> \u2013 again, this makes sense because the simulator adds <code>1.0</code> in each dimension.</p>"},{"location":"tutorial/02_flexible_interface/","title":"The flexible interface","text":"<p>In the previous tutorial, we have demonstrated how <code>sbi</code> can be used to run simulation-based inference with just a single line of code.</p> <p>In addition to this simple interface, <code>sbi</code> also provides a flexible interface which provides several additional features implemented in <code>sbi</code>.</p> <p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/02_flexible_interface.ipynb in the <code>sbi</code> repository.</p>"},{"location":"tutorial/02_flexible_interface/#features","title":"Features","text":"<p>The flexible interface offers the following features (and many more):</p> <ul> <li>performing sequential posterior estimation by focusing on a particular observation over multiple rounds. This can decrease the number of simulations one has to run, but the inference procedure is no longer amortized (tutorial).    </li> <li>specify your own density estimator, or change hyperparameters of existing ones (e.g. number of hidden units for NSF) (tutorial).    </li> <li>use an <code>embedding_net</code> to learn summary features from high-dimensional simulation outputs (tutorial).  </li> <li>provide presimulated data  </li> <li>choose between different methods to sample from the posterior.  </li> <li>use calibration kernels as proposed by Lueckmann, Goncalves et al. 2017.</li> </ul>"},{"location":"tutorial/02_flexible_interface/#main-syntax","title":"Main syntax","text":"<pre><code>from sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi\n\nsimulator, prior = prepare_for_sbi(simulator, prior)\ninference = SNPE(prior)\n\ntheta, x = simulate_for_sbi(simulator, proposal=prior, num_simulations=1000)\ndensity_estimator = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior(density_estimator)\n</code></pre>"},{"location":"tutorial/02_flexible_interface/#linear-gaussian-example","title":"Linear Gaussian example","text":"<p>We will show an example of how we can use the flexible interface to infer the posterior for an example with a Gaussian likelihood (same example as before). First, we import the inference method we want to use (<code>SNPE</code>, <code>SNLE</code>, or <code>SNRE</code>) and other helper functions.</p> <pre><code>import torch\n\nfrom sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi\nfrom sbi.utils.get_nn_models import posterior_nn\nfrom sbi import utils as utils\nfrom sbi import analysis as analysis\n</code></pre> <p>Next, we define the prior and simulator:</p> <pre><code>num_dim = 3\nprior = utils.BoxUniform(low=-2 * torch.ones(num_dim), high=2 * torch.ones(num_dim))\n</code></pre> <pre><code>def linear_gaussian(theta):\n    return theta + 1.0 + torch.randn_like(theta) * 0.1\n</code></pre> <p>In the flexible interface, you have to ensure that your simulator and prior adhere the requirements of <code>sbi</code>. You can do so with the <code>prepare_for_sbi()</code> function.</p> <pre><code>simulator, prior = prepare_for_sbi(linear_gaussian, prior)\n</code></pre> <p>Then, we instantiate the inference object:</p> <pre><code>inference = SNPE(prior=prior)\n</code></pre> <p>Next, we run simulations. You can do so either by yourself by sampling from the prior and running the simulator (e.g. on a compute cluster), or you can use a helper function provided by <code>sbi</code> called <code>simulate_for_sbi</code>. This function allows to parallelize your code with <code>joblib</code>.</p> <pre><code>theta, x = simulate_for_sbi(simulator, proposal=prior, num_simulations=2000)\n</code></pre> <pre><code>Running 2000 simulations.:   0%|          | 0/2000 [00:00&lt;?, ?it/s]\n</code></pre> <p>We then pass the simulated data to the inference object. <code>theta</code> and <code>x</code> should both be a <code>torch.Tensor</code> of type <code>float32</code>.</p> <pre><code>inference = inference.append_simulations(theta, x)\n</code></pre> <p>Next, we train the neural density estimator.</p> <pre><code>density_estimator = inference.train()\n</code></pre> <pre><code> Neural network successfully converged after 73 epochs.\n</code></pre> <p>Lastly, we can use this density estimator to build the posterior:</p> <pre><code>posterior = inference.build_posterior(density_estimator)\n</code></pre> <p>Once we have obtained the posterior, we can <code>.sample()</code>, <code>.log_prob()</code>, or <code>.pairplot()</code> in the same way as for the simple interface.</p> <pre><code>x_o = torch.zeros(3,)\n</code></pre> <pre><code>posterior_samples = posterior.sample((10000,), x=x_o)\n\n# plot posterior samples\n_ = analysis.pairplot(\n    posterior_samples, limits=[[-2, 2], [-2, 2], [-2, 2]], figsize=(5, 5)\n)\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <p>We can always print the posterior to know how it was trained:</p> <pre><code>print(posterior)\n</code></pre> <pre><code>Posterior conditional density p(\u03b8|x) of type DirectPosterior. It samples the posterior network and rejects samples that\n            lie outside of the prior bounds.\n</code></pre>"},{"location":"tutorial/03_multiround_inference/","title":"Multi-round inference","text":"<p>In the previous tutorials, we have inferred the posterior using single-round inference. In single-round inference, we draw parameters from the prior, simulate the corresponding data, and then train a neural network to obtain the posterior. However,  if one is interested in only one particular observation <code>x_o</code> sampling from the prior can be inefficient in the number of simulations because one is effectively learning a posterior estimate for all observations in the prior space. In this tutorial, we show how one can alleviate this issue by performing multi-round inference with <code>sbi</code>.  </p> <p>Multi-round inference also starts by drawing parameters from the prior, simulating them, and training a neural network to estimate the posterior distribution. Afterwards, however, it continues inference in multiple rounds, focusing on a particular observation <code>x_o</code>. In each new round of inference, it draws samples from the obtained posterior distribution conditioned at <code>x_o</code> (instead of from the prior), simulates these, and trains the network again. This process can be repeated arbitrarily often to get increasingly good approximations to the true posterior distribution at <code>x_o</code>.</p> <p>Running multi-round inference can be more efficient in the number of simulations, but it will lead to the posterior no longer being amortized (i.e. it will be accurate only for a specific observation <code>x_o</code>, not for any <code>x</code>).</p> <p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/03_multiround_inference.ipynb in the <code>sbi</code> repository.</p>"},{"location":"tutorial/03_multiround_inference/#main-syntax","title":"Main syntax","text":"<pre><code># 2 rounds: first round simulates from the prior, second round simulates parameter set\n# that were sampled from the obtained posterior.\nnum_rounds = 2\n# The specific observation we want to focus the inference on.\nx_o = torch.zeros(\n    3,\n)\n\nposteriors = []\nproposal = prior\n\nfor _ in range(num_rounds):\n    theta, x = simulate_for_sbi(simulator, proposal, num_simulations=500)\n\n    # In `SNLE` and `SNRE`, you should not pass the `proposal` to `.append_simulations()`\n    density_estimator = inference.append_simulations(\n        theta, x, proposal=proposal\n    ).train()\n    posterior = inference.build_posterior(density_estimator)\n    posteriors.append(posterior)\n    proposal = posterior.set_default_x(x_o)\n</code></pre>"},{"location":"tutorial/03_multiround_inference/#linear-gaussian-example","title":"Linear Gaussian example","text":"<p>Below, we give a full example of inferring the posterior distribution over multiple rounds.</p> <pre><code>import torch\n\nfrom sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi\nfrom sbi.utils.get_nn_models import posterior_nn\nfrom sbi import utils as utils\nfrom sbi import analysis as analysis\n\n_ = torch.manual_seed(0)\n</code></pre> <p>First, we define a simple prior and simulator and ensure that they comply with <code>sbi</code> by using <code>prepare_for_sbi</code>:</p> <pre><code>num_dim = 3\nprior = utils.BoxUniform(low=-2 * torch.ones(num_dim), high=2 * torch.ones(num_dim))\n</code></pre> <pre><code>def linear_gaussian(theta):\n    return theta + 1.0 + torch.randn_like(theta) * 0.1\n</code></pre> <pre><code>simulator, prior = prepare_for_sbi(linear_gaussian, prior)\n</code></pre> <p>Then, we instantiate the inference object:</p> <pre><code>inference = SNPE(prior=prior)\n</code></pre> <p>And we can run inference. In this example, we will run inference over <code>2</code> rounds, potentially leading to a more focused posterior around the observation <code>x_o</code>.</p> <pre><code>num_rounds = 2\nx_o = torch.zeros(\n    3,\n)\n\nposteriors = []\nproposal = prior\n\nfor _ in range(num_rounds):\n    theta, x = simulate_for_sbi(simulator, proposal, num_simulations=500)\n    density_estimator = inference.append_simulations(\n        theta, x, proposal=proposal\n    ).train()\n    posterior = inference.build_posterior(density_estimator)\n    posteriors.append(posterior)\n    proposal = posterior.set_default_x(x_o)\n</code></pre> <pre><code>Running 500 simulations.:   0%|          | 0/500 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 157 epochs.\n\n\nDrawing 500 posterior samples:   0%|          | 0/500 [00:00&lt;?, ?it/s]\n\n\n\nRunning 500 simulations.:   0%|          | 0/500 [00:00&lt;?, ?it/s]\n\n\nUsing SNPE-C with atomic loss\n Neural network successfully converged after 58 epochs.\n</code></pre> <p>Note that, for <code>num_rounds&gt;1</code>, the posterior is no longer amortized: it will give good results when sampled around <code>x=observation</code>, but possibly bad results for other <code>x</code>.</p> <p>Once we have obtained the posterior, we can <code>.sample()</code>, <code>.log_prob()</code>, or <code>.pairplot()</code> in the same way as for the simple interface.</p> <pre><code>posterior_samples = posterior.sample((10000,), x=x_o)\n\n# plot posterior samples\n_ = analysis.pairplot(\n    posterior_samples, limits=[[-2, 2], [-2, 2], [-2, 2]], figsize=(5, 5)\n)\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p>"},{"location":"tutorial/04_density_estimators/","title":"Customizing the density estimator","text":"<p><code>sbi</code> allows to specify a custom density estimator for each of the implemented methods. For all options, check the API reference here.</p>"},{"location":"tutorial/04_density_estimators/#changing-the-type-of-density-estimator","title":"Changing the type of density estimator","text":"<p>One option is to use one of set of preconfigured density estimators by passing a string in the <code>density_estimator</code> keyword argument to the inference object (<code>SNPE</code> or <code>SNLE</code>), e.g., \u201cmaf\u201d to use a Masked Autoregressive Flow, of \u201cnsf\u201d to use a Neural Spline Flow with default hyperparameters.</p> <pre><code>inference = SNPE(prior=prior, density_estimator=\"maf\")\n</code></pre> <p>In the case of <code>SNRE</code>, the argument is called <code>classifier</code>:</p> <pre><code>inference = SNRE(prior=prior, classifier=\"resnet\")\n</code></pre>"},{"location":"tutorial/04_density_estimators/#changing-hyperparameters-of-density-estimators","title":"Changing hyperparameters of density estimators","text":"<p>Alternatively, you can use a set of utils functions to configure a density estimator yourself, e.g., use a MAF with hyperparameters chosen for your problem at hand.</p> <p>Here, because we want to use SN*P*E, we specifiy a neural network targeting the posterior (using the utils function <code>posterior_nn</code>). In this example, we will create a neural spline flow (<code>'nsf'</code>) with <code>60</code> hidden units and <code>3</code> transform layers:</p> <pre><code>from sbi.utils.get_nn_models import (\n    posterior_nn,\n)  # For SNLE: likelihood_nn(). For SNRE: classifier_nn()\n\ndensity_estimator_build_fun = posterior_nn(\n    model=\"nsf\", hidden_features=60, num_transforms=3\n)\ninference = SNPE(prior=prior, density_estimator=density_estimator_build_fun)\n</code></pre> <p>It is also possible to pass an <code>embedding_net</code> to <code>posterior_nn()</code> which learn summary statistics from high-dimensional simulation outputs. You can find a more detailed tutorial on this here.</p>"},{"location":"tutorial/04_density_estimators/#building-new-density-estimators-from-scratch","title":"Building new density estimators from scratch","text":"<p>Finally, it is also possible to implement your own density estimator from scratch, e.g., including embedding nets to preprocess data, or to a density estimator architecture of your choice. </p> <p>For this, the <code>density_estimator</code> argument needs to be a function that takes <code>theta</code> and <code>x</code> batches as arguments to then construct the density estimator after the first set of simulations was generated. Our utils functions in <code>sbi/utils/get_nn_models.py</code> return such a function. </p>"},{"location":"tutorial/05_embedding_net/","title":"Learning summary statistics with a neural net","text":"<p>When doing simulation-based inference, it is very important to use well-chosen summary statistics for describing the data generated by the simulator. Usually, these statistics take into account domain knowledge. For instance, in the example of the Hodgkin-Huxley model, the summary statistics are defined by a function which takes a 120 ms recording as input (a 12000-dimensional input vector) and outputs a 7-dimensional feature vector containing different statistical descriptors of the recording (e.g., number of spikes, average value, etc.). </p> <p>However, in other cases, it might be of interest to actually learn from the data which summary statistics to use, e.g., because the raw data is highly complex and domain knowledge is not available or not applicable. </p> <p><code>sbi</code> offers functionality to learn summary statistics from (potentially high-dimensional) simulation outputs with a neural network. In <code>sbi</code>, this neural network is referred to as <code>embedding_net</code>. If an <code>embedding_net</code> is specified, the simulation outputs are passed through the <code>embedding_net</code>, whose outputs are then passed to the neural density estimator. The parameters of the <code>embedding_net</code> are learned together with the parameters of the neural density estimator.</p> <p>NB: only <code>SNPE</code> and <code>SNRE</code> methods can use an <code>embedding_net</code> to learn summary statistics from simulation outputs. <code>SNLE</code> does not offer this functionality since the simulation outputs \\(x\\) are the outputs of the neural density estimator.</p> <p>In the example that follows, we illustrate a situation where the data points generated by the simulator model are high-dimensional (32 by 32 images) and we use a convolutional neural network as summary statistics extractor.</p> <p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/05_embedding_net.ipynb in the <code>sbi</code> repository.</p> <p>First of all, we import all the packages required for running the tutorial</p> <pre><code>import matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sbi import utils\nfrom sbi import analysis\nfrom sbi import inference\nfrom sbi.inference import SNPE, simulate_for_sbi, prepare_for_sbi\n\nseed = 0\ntorch.manual_seed(seed)\n</code></pre> <pre><code>&lt;torch._C.Generator at 0x7f124d5d04b0&gt;\n</code></pre>"},{"location":"tutorial/05_embedding_net/#the-simulator-model","title":"The simulator model","text":"<p>The simulator model that we consider has two parameters: \\(r\\) and \\(\\theta\\). On each run, it generates 100 two-dimensional points centered around \\((r \\cos(\\theta), r \\sin(\\theta))\\) and perturbed by a Gaussian noise with variance 0.01. Instead of simply outputting the \\((x,y)\\) coordinates of each data point, the model generates a grayscale image of the scattered points with dimensions 32 by 32. This image is further perturbed by an uniform noise with values betweeen 0 and 0.2. The code below defines such model.</p> <pre><code>def simulator_model(parameter, return_points=False):\n    \"\"\"Simulator model with two-dimensional input parameter and 1024-dimensional output\n\n    This simulator serves as a basic example for using a neural net for learning summary features.\n    It has only two input parameters but generates high-dimensional output vectors.\n    The data is generated as follows:\n        (-) Input:  parameter = [r, theta]\n        (1) Generate 100 two-dimensional points centered around (r cos(theta),r sin(theta))\n            and perturbed by a Gaussian noise with variance 0.01\n        (2) Create a grayscale image I of the scattered points with dimensions 32 by 32\n        (3) Perturb I with an uniform noise with values betweeen 0 and 0.2\n        (-) Output: I\n\n    Parameters\n    ----------\n    parameter : array-like, shape (2)\n        The two input parameters of the model, ordered as [r, theta]\n    return_points : bool (default: False)\n        Whether the simulator should return the coordinates of the simulated data points as well\n\n    Returns\n    -------\n    I: torch tensor, shape (1, 1024)\n        Output flattened image\n    (optional) points: array-like, shape (100, 2)\n        Coordinates of the 2D simulated data points\n\n    \"\"\"\n    r = parameter[0]\n    theta = parameter[1]\n\n    sigma_points = 0.10\n    npoints = 100\n    points = []\n    for _ in range(npoints):\n        x = r * torch.cos(theta) + sigma_points * torch.randn(1)\n        y = r * torch.sin(theta) + sigma_points * torch.randn(1)\n        points.append([x, y])\n    points = torch.as_tensor(points)\n\n    nx = 32\n    ny = 32\n    sigma_image = 0.20\n    I = torch.zeros(nx, ny)\n    for point in points:\n        pi = int((point[0] - (-1)) / ((+1) - (-1)) * nx)\n        pj = int((point[1] - (-1)) / ((+1) - (-1)) * ny)\n        if (pi &lt; nx) and (pj &lt; ny):\n            I[pi, pj] = 1\n    I = I + sigma_image * torch.rand(nx, ny)\n    I = I.T\n    I = I.reshape(1, -1)\n\n    if return_points:\n        return I, points\n    else:\n        return I\n</code></pre> <p>The figure below shows an example of the output of the simulator when \\(r = 0.70\\) and \\(\\theta = \\pi/4\\)</p> <pre><code># simulate samples\ntrue_parameter = torch.tensor([0.70, torch.pi / 4])\nx_observed, x_points = simulator_model(true_parameter, return_points=True)\n\n# plot the observation\nfig, ax = plt.subplots(\n    facecolor=\"white\", figsize=(11.15, 5.61), ncols=2, constrained_layout=True\n)\ncircle = plt.Circle((0, 0), 1.0, color=\"k\", ls=\"--\", lw=0.8, fill=False)\nax[0].add_artist(circle)\nax[0].scatter(x_points[:, 0], x_points[:, 1], s=20)\nax[0].set_xlabel(\"x\")\nax[0].set_ylabel(\"y\")\nax[0].set_xlim(-1, +1)\nax[0].set_xticks([-1, 0.0, +1.0])\nax[0].set_ylim(-1, +1)\nax[0].set_yticks([-1, 0.0, +1.0])\nax[0].set_title(r\"original simulated points with $r = 0.70$ and $\\theta = \\pi/4$\")\nax[1].imshow(x_observed.view(32, 32), origin=\"lower\", cmap=\"gray\")\nax[1].set_xticks([])\nax[1].set_yticks([])\nax[1].set_title(\"noisy observed data (gray image with 32 x 32 pixels)\")\n</code></pre> <pre><code>Text(0.5, 1.0, 'noisy observed data (gray image with 32 x 32 pixels)')\n</code></pre> <p></p>"},{"location":"tutorial/05_embedding_net/#defining-an-embedding_net","title":"Defining an <code>embedding_net</code>","text":"<p>An inference procedure applied to the output data from this simulator model determines the posterior distribution of \\(r\\) and \\(\\theta\\) given an observation of \\(x\\), which lives in a 1024 dimensional space (32 x 32 = 1024). To avoid working directly on these high-dimensional vectors, one can use a convolutional neural network (CNN) that takes the 32x32 images as input and encodes them into 8-dimensional feature vectors. This CNN is trained along with the neural density estimator of the inference procedure and serves as an automatic summary statistics extractor. </p> <p>We define and instantiate the CNN as follows:</p> <pre><code>class SummaryNet(nn.Module):\n    def __init__(self):\n        super().__init__()\n        # 2D convolutional layer\n        self.conv1 = nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5, padding=2)\n        # Maxpool layer that reduces 32x32 image to 4x4\n        self.pool = nn.MaxPool2d(kernel_size=8, stride=8)\n        # Fully connected layer taking as input the 6 flattened output arrays from the maxpooling layer\n        self.fc = nn.Linear(in_features=6 * 4 * 4, out_features=8)\n\n    def forward(self, x):\n        x = x.view(-1, 1, 32, 32)\n        x = self.pool(F.relu(self.conv1(x)))\n        x = x.view(-1, 6 * 4 * 4)\n        x = F.relu(self.fc(x))\n        return x\n\n\nembedding_net = SummaryNet()\n</code></pre>"},{"location":"tutorial/05_embedding_net/#the-inference-procedure","title":"The inference procedure","text":"<p>With the <code>embedding_net</code> defined and instantiated, we can follow the usual workflow of an inference procedure in <code>sbi</code>. The <code>embedding_net</code> object appears as an input argument when instantiating the neural density estimator with <code>utils.posterior_nn</code>.</p> <pre><code># set prior distribution for the parameters\nprior = utils.BoxUniform(\n    low=torch.tensor([0.0, 0.0]), high=torch.tensor([1.0, 2 * torch.pi])\n)\n\n# make a SBI-wrapper on the simulator object for compatibility\nsimulator_wrapper, prior = prepare_for_sbi(simulator_model, prior)\n</code></pre> <pre><code># instantiate the neural density estimator\nneural_posterior = utils.posterior_nn(\n    model=\"maf\", embedding_net=embedding_net, hidden_features=10, num_transforms=2\n)\n\n# setup the inference procedure with the SNPE-C procedure\ninference = SNPE(prior=prior, density_estimator=neural_posterior)\n</code></pre> <pre><code># run the inference procedure on one round and 10000 simulated data points\ntheta, x = simulate_for_sbi(simulator_wrapper, prior, num_simulations=10000)\n</code></pre> <pre><code>Running 10000 simulations.:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code>density_estimator = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior(density_estimator)\n</code></pre> <pre><code> Neural network successfully converged after 76 epochs.\n</code></pre>"},{"location":"tutorial/05_embedding_net/#visualizing-the-results","title":"Visualizing the results","text":"<p>We now generate 50000 samples of the posterior distribution of \\(r\\) and \\(\\theta\\) when observing an input data point \\(x\\) generated from the <code>simulator model</code> with \\(r = 0.70\\) and \\(\\theta = \\pi/4\\). </p> <pre><code># generate posterior samples\ntrue_parameter = torch.tensor([0.70, torch.pi / 4])\nx_observed = simulator_model(true_parameter)\nsamples = posterior.set_default_x(x_observed).sample((50000,))\n</code></pre> <pre><code>Drawing 50000 posterior samples:   0%|          | 0/50000 [00:00&lt;?, ?it/s]\n</code></pre> <p>The figure below shows the statistics of the generated samples.</p> <pre><code># create the figure\nfig, ax = analysis.pairplot(\n    samples,\n    points=true_parameter,\n    labels=[\"r\", r\"$\\theta$\"],\n    limits=[[0, 1], [0, 2 * torch.pi]],\n    points_colors=\"r\",\n    points_offdiag={\"markersize\": 6},\n    figsize=(5, 5),\n)\n</code></pre> <p></p> <pre><code>\n</code></pre>"},{"location":"tutorial/07_conditional_distributions/","title":"Analysing variability and compensation mechansims with conditional distributions","text":"<p>A central advantage of <code>sbi</code> over parameter search methods such as genetic algorithms is that the posterior captures all models that can reproduce experimental data. This allows us to analyse whether parameters can be variable or have to be narrowly tuned, and to analyse compensation mechanisms between different parameters. See also Marder and Taylor, 2011 for further motivation to identify all models that capture experimental data.  </p> <p>In this tutorial, we will show how one can use the posterior distribution to identify whether parameters can be variable or have to be finely tuned, and how we can use the posterior to find potential compensation mechanisms between model parameters. To investigate this, we will extract conditional distributions from the posterior inferred with <code>sbi</code>.</p> <p>Note, you can find the original version of this notebook at https://github.com/sbi-dev/sbi/blob/main/tutorials/07_conditional_distributions.ipynb in the <code>sbi</code> repository.</p>"},{"location":"tutorial/07_conditional_distributions/#main-syntax","title":"Main syntax","text":"<pre><code>from sbi.analysis import conditional_pairplot, conditional_corrcoeff\n\n# Plot slices through posterior, i.e. conditionals.\n_ = conditional_pairplot(\n    density=posterior,\n    condition=posterior.sample((1,)),\n    limits=torch.tensor([[-2.0, 2.0], [-2.0, 2.0]]),\n)\n\n# Compute the matrix of correlation coefficients of the slices.\ncond_coeff_mat = conditional_corrcoeff(\n    density=posterior,\n    condition=posterior.sample((1,)),\n    limits=torch.tensor([[-2.0, 2.0], [-2.0, 2.0]]),\n)\nplt.imshow(cond_coeff_mat, clim=[-1, 1])\n</code></pre>"},{"location":"tutorial/07_conditional_distributions/#analysing-variability-and-compensation-mechanisms-in-a-toy-example","title":"Analysing variability and compensation mechanisms in a toy example","text":"<p>Below, we use a simple toy example to demonstrate the above described features. For an application of these features to a neuroscience problem, see figure 6 in Gon\u00e7alves, Lueckmann, Deistler et al., 2019.</p> <pre><code>from sbi import utils as utils\nfrom sbi.analysis import pairplot, conditional_pairplot, conditional_corrcoeff\nimport torch\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import animation, rc\nfrom IPython.display import HTML, Image\n\n_ = torch.manual_seed(0)\n</code></pre> <p>Let\u2019s say we have used SNPE to obtain a posterior distribution over three parameters. In this tutorial, we just load the posterior from a file:</p> <pre><code>from toy_posterior_for_07_cc import ExamplePosterior\n\nposterior = ExamplePosterior()\n</code></pre> <p>First, we specify the experimental observation \\(x_o\\) at which we want to evaluate and sample the posterior \\(p(\\theta|x_o)\\):</p> <pre><code>x_o = torch.ones(1, 20)  # simulator output was 20-dimensional\nposterior.set_default_x(x_o)\n</code></pre> <p>As always, we can inspect the posterior marginals with the <code>pairplot()</code> function:</p> <pre><code>posterior_samples = posterior.sample((5000,))\n\nfig, ax = pairplot(\n    samples=posterior_samples,\n    limits=torch.tensor([[-2.0, 2.0]] * 3),\n    offdiag=[\"kde\"],\n    diag=[\"kde\"],\n    figsize=(5, 5),\n)\n</code></pre> <p></p> <p>The 1D and 2D marginals of the posterior fill almost the entire parameter space! Also, the Pearson correlation coefficient matrix of the marginal shows rather weak interactions (low correlations):</p> <pre><code>corr_matrix_marginal = np.corrcoef(posterior_samples.T)\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nim = plt.imshow(corr_matrix_marginal, clim=[-1, 1], cmap=\"PiYG\")\n_ = fig.colorbar(im)\n</code></pre> <p></p> <p>It might be tempting to conclude that the experimental data barely constrains our parameters and that almost all parameter combinations can reproduce the experimental data. As we will show below, this is not the case.</p> <p>Because our toy posterior has only three parameters, we can plot posterior samples in a 3D plot:</p> <pre><code>rc(\"animation\", html=\"html5\")\n\n# First set up the figure, the axis, and the plot element we want to animate\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_subplot(111, projection=\"3d\")\n\nax.set_xlim((-2, 2))\nax.set_ylim((-2, 2))\n\n\ndef init():\n    (line,) = ax.plot([], [], lw=2)\n    line.set_data([], [])\n    return (line,)\n\n\ndef animate(angle):\n    num_samples_vis = 1000\n    line = ax.scatter(\n        posterior_samples[:num_samples_vis, 0],\n        posterior_samples[:num_samples_vis, 1],\n        posterior_samples[:num_samples_vis, 2],\n        zdir=\"z\",\n        s=15,\n        c=\"#2171b5\",\n        depthshade=False,\n    )\n    ax.view_init(20, angle)\n    return (line,)\n\n\nanim = animation.FuncAnimation(\n    fig, animate, init_func=init, frames=range(0, 360, 5), interval=150, blit=True\n)\n\nplt.close()\n</code></pre> <pre><code>HTML(anim.to_html5_video())\n</code></pre>    Your browser does not support the video tag.  <p>Clearly, the range of admissible parameters is constrained to a narrow region in parameter space, which had not been evident from the marginals.</p> <p>If the posterior has more than three dimensions, inspecting all dimensions at once will not be possible anymore. One way to still reveal structures in high-dimensional posteriors is to inspect 2D-slices through the posterior. In <code>sbi</code>, this can be done with the <code>conditional_pairplot()</code> function, which computes the conditional distributions within the posterior. We can slice (i.e. condition) the posterior at any location, given by the <code>condition</code>. In the plot below, for all upper diagonal plots, we keep all but two parameters constant at values sampled from the posterior, and inspect what combinations of the remaining two parameters can reproduce experimental data. For the plots on the diagonal (the 1D conditionals), we keep all but one parameter constant.</p> <pre><code>condition = posterior.sample((1,))\n\n_ = conditional_pairplot(\n    density=posterior,\n    condition=condition,\n    limits=torch.tensor([[-2.0, 2.0]] * 3),\n    figsize=(5, 5),\n)\n</code></pre> <p></p> <p>This plot looks completely different from the marginals obtained with <code>pairplot()</code>. As it can be seen on the diagonal plots, if all parameters but one are kept constant, the remaining parameter has to be tuned to a narrow region in parameter space. In addition, the upper diagonal plots show strong correlations: deviations in one parameter can be compensated through changes in another parameter.</p> <p>We can summarize these correlations in a conditional correlation matrix, which computes the Pearson correlation coefficient of each of these pairwise plots. This matrix (below) shows strong correlations between many parameters, which can be interpreted as potential compensation mechansims:</p> <pre><code>cond_coeff_mat = conditional_corrcoeff(\n    density=posterior,\n    condition=condition,\n    limits=torch.tensor([[-2.0, 2.0]] * 3),\n)\nfig, ax = plt.subplots(1, 1, figsize=(4, 4))\nim = plt.imshow(cond_coeff_mat, clim=[-1, 1], cmap=\"PiYG\")\n_ = fig.colorbar(im)\n</code></pre> <p></p> <p>So far, we have investigated the conditional distribution only at a specific <code>condition</code> sampled from the posterior. In many applications, it makes sense to repeat the above analyses with a different <code>condition</code> (another sample from the posterior), which can be interpreted as slicing the posterior at a different location. Note that <code>conditional_corrcoeff()</code> can directly compute the matrix for several <code>conditions</code> and then outputs the average over them. This can be done by passing a batch of \\(N\\) conditions as the <code>condition</code> argument.</p>"},{"location":"tutorial/07_conditional_distributions/#sampling-conditional-distributions","title":"Sampling conditional distributions","text":"<p>So far, we have demonstrated how one can plot 2D conditional distributions with <code>conditional_pairplot()</code> and how one can compute the pairwise conditional correlation coefficient with <code>conditional_corrcoeff()</code>. In some cases, it can be useful to keep a subset of parameters fixed and to vary more than two parameters. This can be done by sampling the conditonal posterior \\(p(\\theta_i | \\theta_{j \\neq i}, x_o)\\). As of <code>sbi</code> <code>v0.18.0</code>, this functionality requires using the sampler interface. In this tutorial, we demonstrate this functionality on a linear gaussian simulator with four parameters. We would like to fix the forth parameter to \\(\\theta_4=0.2\\) and sample the first three parameters given that value, i.e. we want to sample \\(p(\\theta_1, \\theta_2, \\theta_3 | \\theta_4 = 0.2, x_o)\\). For an application in neuroscience, see Deistler, Gon\u00e7alves, Macke, 2021.</p> <p>In this tutorial, we will use SNPE, but the same also works for SNLE and SNRE. First, we define the prior and the simulator and train the deep neural density estimator:</p> <pre><code>from sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi\nfrom sbi.inference import posterior_estimator_based_potential, MCMCPosterior\nfrom sbi.utils import BoxUniform\nimport torch\n\nnum_dim = 4\nprior = BoxUniform(low=-2 * torch.ones(num_dim), high=2 * torch.ones(num_dim))\n\n\ndef linear_gaussian(theta):\n    return theta + 1.0 + torch.randn_like(theta) * 0.1\n\n\nsimulator, prior = prepare_for_sbi(linear_gaussian, prior)\n\ninference = SNPE()\ntheta, x = simulate_for_sbi(simulator, prior, 1000)\nposterior_estimator = inference.append_simulations(theta, x).train()\n</code></pre> <pre><code>Running 1000 simulations.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 147 epochs.\n</code></pre> <p>Next, we follow the sampler interface and create a potential_function. The observation in this example is <code>x_o=[1, 1, 1, 1]</code>.</p> <pre><code>potential_fn, theta_transform = posterior_estimator_based_potential(\n    posterior_estimator, prior=prior, x_o=torch.ones(4)\n)\n</code></pre> <p>Now we want to build the conditional potential (please read throught the sampler interface tutorial for an explanation of potential functions). For this, we have to pass a <code>condition</code>. In our case, we want to condition the forth parameter on \\(\\theta_4=0.2\\). Regardless of how many parameters one wants to condition on, in <code>sbi</code>, one has to pass a <code>condition</code> value for all parameters. The first three values will simply be ignored. We can tell the algorithm which parameters should be kept fixed and which ones should be sampled with the argument <code>dims_to_sample</code>.</p> <pre><code>from sbi.analysis import conditional_potential\n\nconditioned_potential_fn, restricted_tf, restricted_prior = conditional_potential(\n    potential_fn=potential_fn,\n    theta_transform=theta_transform,\n    prior=prior,\n    condition=torch.as_tensor(\n        [0.0, 0.0, 0.0, 0.2]\n    ),  # the first three values are arbitrary and are ignored internally\n    dims_to_sample=[0, 1, 2],\n)\n</code></pre> <p>Finally, we have to build a sampler for the <code>conditioned_potential_fn</code>. E.g., we can sample the conditional posterior with MCMC:</p> <pre><code>mcmc_posterior = MCMCPosterior(\n    potential_fn=conditioned_potential_fn,\n    theta_transform=restricted_tf,\n    proposal=restricted_prior,\n)\ncond_samples = mcmc_posterior.sample((100,))\n</code></pre> <pre><code>  0%|          | 0/50 [00:00&lt;?, ?it/s]\n\n\n\n  0%|          | 0/10 [00:00&lt;?, ?it/s]\n\n\n\n  0%|          | 0/100 [00:00&lt;?, ?it/s]\n</code></pre> <p>The resulting samples are 3-dimensional, corresponding to \\([\\theta_1, \\theta_2, \\theta_3]\\), sampled from \\(p(\\theta_1, \\theta_2, \\theta_3 | \\theta_4=0.2, x_o)\\).</p> <pre><code>print(cond_samples.shape)\n</code></pre> <pre><code>torch.Size([100, 3])\n</code></pre> <p>We can also plot them with <code>pairplot</code>:</p> <pre><code>from sbi.analysis import pairplot\n\n_ = pairplot(cond_samples, limits=[[-2, 2], [-2, 2], [-2, 2], [-2, 2]], figsize=(4, 4))\n</code></pre> <p></p>"},{"location":"tutorial/08_restriction_estimator/","title":"Efficient handling of invalid simulation outputs","text":"<p>For many simulators, the output of the simulator can be ill-defined or it can have non-sensical values. For example, in neuroscience models, if a specific parameter set does not produce a spike, features such as the spike shape can not be computed. When using <code>sbi</code>, such simulations that have <code>NaN</code> or <code>inf</code> in their output are discarded during neural network training. This can lead to inefficetive use of simulation budget: we carry out many simulations, but a potentially large fraction of them is discarded. </p> <p>In this tutorial, we show how we can use <code>sbi</code> to learn regions in parameter space that produce <code>valid</code> simulation outputs, and thereby improve the sampling efficiency. The key idea of the method is to use a classifier to distinguish parameters that lead to <code>valid</code> simulations from regions that lead to <code>invalid</code> simulations. After we have obtained the region in parameter space that produes <code>valid</code> simulation outputs, we train the deep neural density estimator used in <code>SNPE</code>. The method was originally proposed in Lueckmann, Goncalves et al. 2017 and later used in Deistler et al. 2021.</p>"},{"location":"tutorial/08_restriction_estimator/#main-syntax","title":"Main syntax","text":"<pre><code>from sbi.inference import SNPE\nfrom sbi.utils import RestrictionEstimator\n\nrestriction_estimator = RestrictionEstimator(prior=prior)\nproposals = [prior]\n\nfor r in range(num_rounds):\n    theta, x = simulate_for_sbi(simulator, proposals[-1], 1000)\n    restriction_estimator.append_simulations(theta, x)\n    if (\n        r &lt; num_rounds - 1\n    ):  # training not needed in last round because classifier will not be used anymore.\n        classifier = restriction_estimator.train()\n    proposals.append(restriction_estimator.restrict_prior())\n\nall_theta, all_x, _ = restriction_estimator.get_simulations()\n\ninference = SNPE(prior=prior)\ndensity_estimator = inference.append_simulations(all_theta, all_x).train()\nposterior = inference.build_posterior()\n</code></pre>"},{"location":"tutorial/08_restriction_estimator/#further-explanation-in-a-toy-example","title":"Further explanation in a toy example","text":"<pre><code>from sbi.inference import SNPE, simulate_for_sbi\nfrom sbi.utils import RestrictionEstimator, BoxUniform\nfrom sbi.analysis import pairplot\nimport torch\n\n_ = torch.manual_seed(2)\n</code></pre> <p>We will define a simulator with two parameters and two simulation outputs. The simulator produces <code>NaN</code> whenever the first parameter is below <code>0.0</code>. If it is above <code>0.0</code> the simulator simply perturbs the parameter set with Gaussian noise:</p> <pre><code>def simulator(theta):\n    perturbed_theta = theta + 0.5 * torch.randn(2)\n    perturbed_theta[theta[:, 0] &lt; 0.0] = torch.as_tensor([float(\"nan\"), float(\"nan\")])\n    return perturbed_theta\n</code></pre> <p>The prior is a uniform distribution in [-2, 2]:</p> <pre><code>prior = BoxUniform(-2 * torch.ones(2), 2 * torch.ones(2))\n</code></pre> <p>We then begin by drawing samples from the prior and simulating them. Looking at the simulation outputs, half of them contain <code>NaN</code>:</p> <pre><code>theta, x = simulate_for_sbi(simulator, prior, 1000)\nprint(\"Simulation outputs: \", x)\n</code></pre> <pre><code>Running 1000 simulations.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\nSimulation outputs:  tensor([[ 0.0411, -0.5656],\n        [ 0.0096, -1.0841],\n        [ 1.2937,  0.9448],\n        ...,\n        [    nan,     nan],\n        [    nan,     nan],\n        [ 2.7940,  0.6461]])\n</code></pre> <p>The simulations that contain <code>NaN</code> are wasted, and we want to learn to \u201crestrict\u201d the prior such that it produces only <code>valid</code> simulation outputs. To do so, we set up the <code>RestrictionEstimator</code>:</p> <pre><code>restriction_estimator = RestrictionEstimator(prior=prior)\n</code></pre> <p>The <code>RestrictionEstimator</code> trains a classifier to distinguish parameters that lead to <code>valid</code> simulation outputs from parameters that lead to <code>invalid</code> simulation outputs </p> <pre><code>restriction_estimator.append_simulations(theta, x)\nclassifier = restriction_estimator.train()\n</code></pre> <pre><code>Training neural network. Epochs trained:  35\n</code></pre> <p>We can inspect the <code>restricted_prior</code>, i.e. the parameters that the classifier believes will lead to <code>valid</code> simulation outputs, with:</p> <pre><code>restricted_prior = restriction_estimator.restrict_prior()\nsamples = restricted_prior.sample((10_000,))\n_ = pairplot(samples, limits=[[-2, 2], [-2, 2]], fig_size=(4, 4))\n</code></pre> <pre><code>The classifier rejected 51.6% of all samples. You will get a speed-up of 106.5%.\n</code></pre> <p></p> <p>Indeed, parameter sets sampled from the <code>restricted_prior</code> always have a first parameter larger than <code>0.0</code>. These are the ones that produce <code>valid</code> simulation outputs (see our definition of the simulator above). We can then use the <code>restricted_prior</code> to generate more simulations. Almost all of them will have <code>valid</code> simulation outputs:</p> <pre><code>new_theta, new_x = simulate_for_sbi(simulator, restricted_prior, 1000)\nprint(\"Simulation outputs: \", new_x)\n</code></pre> <pre><code>The classifier rejected 50.9% of all samples. You will get a speed-up of 103.6%.\n\n\n\nRunning 1000 simulations.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\nSimulation outputs:  tensor([[ 0.6834, -0.2415],\n        [ 1.3459,  1.5373],\n        [ 2.1092,  1.9180],\n        ...,\n        [ 0.8845,  0.4036],\n        [ 1.9111,  1.2526],\n        [ 0.8320,  2.3755]])\n</code></pre> <p>We can now use all simulations and run <code>SNPE</code> as always:</p> <pre><code>restriction_estimator.append_simulations(\n    new_theta, new_x\n)  # Gather the new simulations in the `restriction_estimator`.\n(\n    all_theta,\n    all_x,\n    _,\n) = restriction_estimator.get_simulations()  # Get all simulations run so far.\n\ninference = SNPE(prior=prior)\ndensity_estimator = inference.append_simulations(all_theta, all_x).train()\nposterior = inference.build_posterior()\n\nposterior_samples = posterior.sample((10_000,), x=torch.ones(2))\n_ = pairplot(posterior_samples, limits=[[-2, 2], [-2, 2]], fig_size=(3, 3))\n</code></pre> <pre><code>WARNING:root:Found 523 NaN simulations and 0 Inf simulations. They will be excluded from training.\n\n\n Neural network successfully converged after 118 epochs.\n\n\nDrawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p>"},{"location":"tutorial/08_restriction_estimator/#further-options-for-tuning-the-algorithm","title":"Further options for tuning the algorithm","text":"<ul> <li>the whole procedure can be repeated many times (see the loop shown in \u201cMain syntax\u201d in this tutorial)  </li> <li>the classifier is trained to be relatively conservative, i.e. it will try to be very sure that a specific parameter set can indeed not produce <code>valid</code> simulation outputs. If you are ok with the restricted prior potentially ignoring a small fraction of parameter sets that might have produced <code>valid</code> data, you can use <code>restriction_estimator.restrict_prior(allowed_false_negatives=...)</code>. The argument <code>allowed_false_negatives</code> sets the fraction of potentially ignored parameter sets. A higher value will lead to more <code>valid</code> simulations.  </li> <li>By default, the algorithm considers simulations that have at least one <code>NaN</code> of <code>inf</code> as <code>invalid</code>. You can specify custom criterions with <code>RestrictionEstimator(decision_criterion=...)</code></li> </ul>"},{"location":"tutorial/09_sensitivity_analysis/","title":"Active subspaces for sensitivity analysis","text":"<p>A standard method to analyse dynamical systems such as models of neural dynamics is to use a sensitivity analysis. We can use the posterior obtained with <code>sbi</code>, to perform such analyses.</p>"},{"location":"tutorial/09_sensitivity_analysis/#main-syntax","title":"Main syntax","text":"<pre><code>from sbi.analysis import ActiveSubspace\n\nsensitivity = ActiveSubspace(posterior.set_default_x(x_o))\ne_vals, e_vecs = sensitivity.find_directions(posterior_log_prob_as_property=True)\nprojected_data = sensitivity.project(theta_project, num_dimensions=1)\n</code></pre>"},{"location":"tutorial/09_sensitivity_analysis/#example-and-further-explanation","title":"Example and further explanation","text":"<pre><code>import torch\nfrom torch.distributions import MultivariateNormal\n\nfrom sbi.analysis import ActiveSubspace, pairplot\nfrom sbi.simulators import linear_gaussian\nfrom sbi.inference import simulate_for_sbi, infer\n\n_ = torch.manual_seed(0)\n</code></pre> <p>Let\u2019s define a simple Gaussian toy example:</p> <pre><code>prior = MultivariateNormal(0.0 * torch.ones(2), 2 * torch.eye(2))\n\n\ndef simulator(theta):\n    return linear_gaussian(\n        theta, -0.8 * torch.ones(2), torch.tensor([[1.0, 0.98], [0.98, 1.0]])\n    )\n\n\nposterior = infer(simulator, prior, num_simulations=2000, method=\"SNPE\").set_default_x(\n    torch.zeros(2)\n)\n</code></pre> <pre><code>Running 2000 simulations.:   0%|          | 0/2000 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 117 epochs.\n</code></pre> <pre><code>posterior_samples = posterior.sample((2000,))\n</code></pre> <pre><code>Drawing 2000 posterior samples:   0%|          | 0/2000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code>_ = pairplot(posterior_samples, limits=[[-3, 3], [-3, 3]], figsize=(4, 4))\n</code></pre> <p></p> <p>When performing a sensitivity analysis on this model, we would expect that there is one direction that is less sensitive (from bottom left to top right, along the vector [1, 1]) and one direction that is more sensitive (from top left to bottom right, along [1, -1]). We can recover these directions with the <code>ActiveSubspace</code> module in <code>sbi</code>.</p> <pre><code>sensitivity = ActiveSubspace(posterior)\ne_vals, e_vecs = sensitivity.find_directions(posterior_log_prob_as_property=True)\n</code></pre> <pre><code>Drawing 1000 posterior samples:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n</code></pre> <p>The method <code>.find_active()</code> returns eigenvalues and the corresponding eigenvectors. It does so by computing the matrix:</p> <p>\\(M = \\mathbb{E}_{p(\\theta|x_o)}[\\nabla_{\\theta}p(\\theta|x_o)^T \\nabla_{\\theta}p(\\theta|x_o)\\)]  </p> <p>It then does an eigendecomposition: \\(M = Q \\Lambda Q^{-1}\\) </p> <p>A strong eigenvalue indicates that the gradient of the posterior density is large, i.e. the system output is sensitive to changes along the direction of the corresponding eigenvector (or <code>active</code>). The eigenvalue corresponding to the vector <code>[0.68, -0.73]</code> is much larger than the eigenvalue of <code>[0.73, 0.67]</code>. This matches the intuition we developed above.</p> <pre><code>print(\"Eigenvalues: \\n\", e_vals, \"\\n\")\nprint(\"Eigenvectors: \\n\", e_vecs)\n</code></pre> <pre><code>Eigenvalues: \n tensor([2.3552e-06, 7.0754e-05])\n\nEigenvectors: \n tensor([[-0.7066, -0.7076],\n        [-0.7076,  0.7066]])\n</code></pre> <p>Lastly, we can project the data into the active dimensions. In this case, we will just use one active dimension:</p> <pre><code>projected_data = sensitivity.project(posterior_samples, num_dimensions=1)\n</code></pre>"},{"location":"tutorial/09_sensitivity_analysis/#some-technical-details","title":"Some technical details","text":"<ul> <li>The gradients and thus the eigenvectors are computed in z-scored space. The mean and standard deviation are computed w.r.t. the prior distribution. Thus, the gradients (and thus the eigenvales) reflect changes on the scale of the prior.</li> <li>The expected value used to compute the matrix \\(M\\) is estimated using <code>1000</code> posterior samples. This value can be set with the <code>.find_active(num_monte_carlo_samples=...)</code> variable.</li> <li>How does this relate to Principal Component Analysis (PCA)? In the example above, the results of PCA would be very similar. However, there are two main differences to PCA: First, PCA ignores local changes in the posterior, whereas the active subspace can change a lot (since it computes the gradient, which is a local quantity). Second, active subspaces can be used characterize the sensitivity of any other quantity w.r.t. circuit parameters. This is outlined below:</li> </ul>"},{"location":"tutorial/09_sensitivity_analysis/#computing-the-sensitivity-of-a-specific-summary-statistic","title":"Computing the sensitivity of a specific summary statistic","text":"<p>Above, we have shown how to identify directions along which the posterior probability changes rapidly. Notably, the posterior probability reflects how consistent a specific parameter set is with all summary statistics, i.e. the entire \\(x_o\\). Sometimes, we might be interested in investigating how a specific features is influenced by the parameters. This feature could be one of the values of \\(x_o\\), but it could also be a different property.</p> <p>As a neuroscience example, in Deistler et al. 2021, we obtained the posterior distribution given burst durations and delays between bursts. After having obtained the posterior, we then wanted to analyse the sensitivity of metabolic cost w.r.t. circuit parameters. The framework we presented above can easily be extended to study such questions.</p> <pre><code>prior = MultivariateNormal(0.0 * torch.ones(2), 2 * torch.eye(2))\n\n\ndef simulator(theta):\n    return linear_gaussian(theta, -0.8 * torch.ones(2), torch.eye(2))\n\n\nposterior = infer(simulator, prior, num_simulations=2000, method=\"SNPE\").set_default_x(\n    torch.zeros(2)\n)\n</code></pre> <pre><code>Running 2000 simulations.:   0%|          | 0/2000 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 139 epochs.\n</code></pre> <pre><code>_ = pairplot(posterior.sample((10_000,)), limits=[[-3, 3], [-3, 3]], figsize=(4, 4))\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <pre><code>sensitivity = ActiveSubspace(posterior)\n</code></pre> <p>This time, we begin by drawing samples from the posterior and then computing the desired property for each of the samples (i.e. you will probably have to run simulations for each theta and extract the property from the simulation output). As an example, we assume that the property is just the cube of the first dimension of the simulation output:</p> <pre><code>theta, x = simulate_for_sbi(simulator, posterior, 5000)\nproperty_ = x[:, :1] ** 3  # E.g. metabolic cost.\n</code></pre> <pre><code>Drawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nRunning 5000 simulations.:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n</code></pre> <p>To investigate the sensitivity of a given parameter, we train a neural network to predict the <code>property_</code> from the parameters and then analyse the neural network as above:</p> <p>\\(M = \\mathbb{E}_{p(\\theta|x_o)}[\\nabla_{\\theta}f(\\theta)^T \\nabla_{\\theta}f(\\theta)\\)]  </p> <p>where \\(f(\\cdot)\\) is the trained neural network.</p> <pre><code>_ = sensitivity.add_property(theta, property_).train()\ne_vals, e_vecs = sensitivity.find_directions()\n</code></pre> <pre><code> Training neural network. Epochs trained:  24\n\n\nDrawing 1000 posterior samples:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code>print(\"Eigenvalues: \\n\", e_vals, \"\\n\")\nprint(\"Eigenvectors: \\n\", e_vecs)\n</code></pre> <pre><code>Eigenvalues: \n tensor([2.8801e-06, 6.1131e-05])\n\nEigenvectors: \n tensor([[ 0.0362,  0.9993],\n        [ 0.9993, -0.0362]])\n</code></pre> <p>As we can see, one of the eigenvalues is much smaller than the other one. The larger eigenvalue represents (approximately) the vector <code>[1.0, 0.0]</code>. This makes sense, because only the <code>property_</code> is influenced only by the first output which, in turn, is influenced only by the first parameter.</p>"},{"location":"tutorial/10_crafting_summary_statistics/","title":"Crafting summary statistics","text":"<p>Many simulators produce outputs that are high-dimesional. For example, a simulator might generate a time series or an image. In a previous tutorial, we discussed how a neural networks can be used to learn summary statistics from such data. In this notebook, we will instead focus on hand-crafting summary statistics. We demonstrate that the choice of summary statistics can be crucial for the performance of the inference algorithm.</p> <pre><code>import numpy as np\nimport torch\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\n# sbi\nimport sbi.utils as utils\nfrom sbi.inference.base import infer\nfrom sbi.inference import SNPE, prepare_for_sbi, simulate_for_sbi\nfrom sbi.utils.get_nn_models import posterior_nn\nfrom sbi.analysis import pairplot\n</code></pre> <pre><code># remove top and right axis from plots\nmpl.rcParams[\"axes.spines.right\"] = False\nmpl.rcParams[\"axes.spines.top\"] = False\n</code></pre> <p>This notebook is not intended to provide a one-fits-all approach. In fact it argues against this: it argues for the user to carefully construct their summary statistics to (i) further help the user understand his observed data, (ii) help them understand exactly what they want the model to recover from the observation and (iii) help the inference framework itself.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#example-1-the-quadratic-function","title":"Example 1: The quadratic function","text":"<p>Assume we have a simulator that is given by a quadratic function:</p> <p>\\(x(t) = a\\cdot t^2 + b\\cdot t + c + \\epsilon\\),</p> <p>where \\(\\epsilon\\) is Gaussian observation noise and \\(\\theta = \\{a, b, c\\}\\) are the parameters. Given an observed quadratic function \\(x_o\\), we would like to recover the posterior over parameters \\(a_o\\), \\(b_o\\) and \\(c_o\\).</p>"},{"location":"tutorial/10_crafting_summary_statistics/#11-prior-over-parameters","title":"1.1 Prior over parameters","text":"<p>First we define a prior distribution over parameters \\(a\\), \\(b\\) and \\(c\\). Here, we use a uniform prior for \\(a\\), \\(b\\) and \\(c\\) to go from \\(-1\\) to \\(1\\).</p> <pre><code>prior_min = [-1, -1, -1]\nprior_max = [1, 1, 1]\nprior = utils.torchutils.BoxUniform(\n    low=torch.as_tensor(prior_min), high=torch.as_tensor(prior_max)\n)\n</code></pre>"},{"location":"tutorial/10_crafting_summary_statistics/#12-simulator","title":"1.2 Simulator","text":"<p>Defining some helper functions first:</p> <pre><code>def create_t_x(theta, seed=None):\n    \"\"\"Return an t, x array for plotting based on params\"\"\"\n    if theta.ndim == 1:\n        theta = theta[np.newaxis, :]\n\n    if seed is not None:\n        rng = np.random.RandomState(seed)\n    else:\n        rng = np.random.RandomState()\n\n    t = np.linspace(-1, 1, 200)\n    ts = np.repeat(t[:, np.newaxis], theta.shape[0], axis=1)\n    x = (\n        theta[:, 0] * ts**2\n        + theta[:, 1] * ts\n        + theta[:, 2]\n        + 0.01 * rng.randn(ts.shape[0], theta.shape[0])\n    )\n    return t, x\n\n\ndef eval(theta, t, seed=None):\n    \"\"\"Evaluate the quadratic function at `t`\"\"\"\n\n    if theta.ndim == 1:\n        theta = theta[np.newaxis, :]\n\n    if seed is not None:\n        rng = np.random.RandomState(seed)\n    else:\n        rng = np.random.RandomState()\n\n    return theta[:, 0] * t**2 + theta[:, 1] * t + theta[:, 2] + 0.01 * rng.randn(1)\n</code></pre> <p>In this example, we generate the observation \\(x_o\\) from parameters \\(\\theta_o=(a_o, b_o, c_o)=(0.3, -0.2, -0.1)\\). The observation as follows.</p> <pre><code>theta_o = np.array([0.3, -0.2, -0.1])\nt, x = create_t_x(theta_o)\nplt.plot(t, x, \"k\")\n</code></pre> <pre><code>[&lt;matplotlib.lines.Line2D at 0x7f828b191d60&gt;]\n</code></pre> <p></p>"},{"location":"tutorial/10_crafting_summary_statistics/#13-summary-statistics","title":"1.3 Summary statistics","text":"<p>We will compare two methods for defining summary statistics. One method uses three summary statistics which are function evaluations at three points in time. The other method uses a single summary statistic: the mean squared error between the observed and the simulated trace. In the second case, one then tries to obtain the posterior \\(p(\\theta | 0)\\), i.e. the error being zero. These two methods are implemented below:  \\(\\textbf{get_3_values()}\\) returns 3 function evaluations at \\(x=-0.5, x=0\\) and \\(x=0.75\\).  \\(\\textbf{get_MSE()}\\) returns the mean squared error between true and a quadratic function corresponding to a prior distributions sample.</p> <pre><code>def get_3_values(theta, seed=None):\n    \"\"\"\n    Return 3 'y' values corresponding to x=-0.5,0,0.75 as summary statistic vector\n    \"\"\"\n    return np.array(\n        [\n            eval(theta, -0.5, seed=seed),\n            eval(theta, 0, seed=seed),\n            eval(theta, 0.75, seed=seed),\n        ]\n    ).T\n</code></pre> <pre><code>def get_MSE(theta, theta_o, seed=None):\n    \"\"\"\n    Return the mean-squared error (MSE) i.e. Euclidean distance from the observation function\n    \"\"\"\n    _, y = create_t_x(theta_o, seed=seed)  # truth\n    _, y_ = create_t_x(theta, seed=seed)  # simulations\n    return np.mean(np.square(y_ - y), axis=0, keepdims=True).T  # MSE\n</code></pre> <p>Let\u2019s try a couple of samples from our prior and see their summary statistics. Notice that these indeed change in small amounts every time you rerun it due to the noise, except if you set the seed.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#14-simulating-data","title":"1.4 Simulating data","text":"<p>Let us see various plots of prior samples and their summary statistics versus the truth, i.e. our artificial observation.</p> <pre><code>t, x_truth = create_t_x(theta_o)\nplt.plot(t, x_truth, \"k\", zorder=1, label=\"truth\")\nn_samples = 100\ntheta = prior.sample((n_samples,))\nt, x = create_t_x(theta.numpy())\nplt.plot(t, x, \"grey\", zorder=0)\nplt.legend()\n</code></pre> <pre><code>&lt;matplotlib.legend.Legend at 0x7f8289154eb0&gt;\n</code></pre> <p></p> <p>In summary, we defined reasonable summary statistics and, a priori, there might be an appararent reason why one method would be better than another. When we do inference, we\u2019d like our posterior to focus around parameter samples that have their simulated MSE very close to 0 (i.e. the truth MSE summary statistic) or their 3 extracted \\((t, x)\\) coordinates to be the truthful ones.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#15-inference","title":"1.5 Inference","text":""},{"location":"tutorial/10_crafting_summary_statistics/#151-using-the-mse","title":"1.5.1 Using the MSE","text":"<p>Let\u2019s see if we can use the MSE to recover the true observation parameters \\(\\theta_o=(a_0,b_0,c_0)\\).</p> <pre><code>theta = prior.sample((1000,))\nx = get_MSE(theta.numpy(), theta_o)\n\ntheta = torch.as_tensor(theta, dtype=torch.float32)\nx = torch.as_tensor(x, dtype=torch.float32)\n</code></pre> <pre><code>inference = SNPE(prior)\n_ = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior()\n</code></pre> <pre><code> Neural network successfully converged after 181 epochs.\n</code></pre> <p>Now that we\u2019ve build the posterior as such, we can see how likely it finds certain parameters given that we tell it that we\u2019ve observed a certain summary statistic (in this case the MSE). We can then sample from it.</p> <pre><code>x_o = torch.as_tensor(\n    [\n        [\n            0.0,\n        ]\n    ]\n)\ntheta_p = posterior.sample((10000,), x=x_o)\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code>fig, axes = pairplot(\n    theta_p,\n    limits=list(zip(prior_min, prior_max)),\n    ticks=list(zip(prior_min, prior_max)),\n    figsize=(7, 7),\n    labels=[\"a\", \"b\", \"c\"],\n    points_offdiag={\"markersize\": 6},\n    points_colors=\"r\",\n    points=theta_o,\n);\n</code></pre> <p></p> <p>The posterior seems to pretty broad: i.e. it is not so certain about the \u2018true\u2019 parameters (here showcased in red).</p> <pre><code>x_o_t, x_o_x = create_t_x(theta_o)\nplt.plot(x_o_t, x_o_x, \"k\", zorder=1, label=\"truth\")\n\ntheta_p = posterior.sample((10,), x=x_o)\nx_t, x_x = create_t_x(theta_p.numpy())\nplt.plot(x_t, x_x, \"grey\", zorder=0)\nplt.legend()\n</code></pre> <pre><code>Drawing 10 posterior samples:   0%|          | 0/10 [00:00&lt;?, ?it/s]\n\n\n\n\n\n&lt;matplotlib.legend.Legend at 0x7f82882cd670&gt;\n</code></pre> <p></p> <p>The functions are a bit closer to the observation than prior samples, but many posterior samples generate activity that is very far off from the observation. We would expect <code>sbi</code> do better on such a simple example. So what\u2019s going on? Do we need more simulations? Feel free to try, but below we will show that one can use the same number of simulation samples with different summary statistics and do much better.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#152-using-3-coordinates-as-summary-statistics","title":"1.5.2 Using 3 coordinates as summary statistics","text":"<pre><code>x = get_3_values(theta.numpy())\nx = torch.as_tensor(x, dtype=torch.float32)\n</code></pre> <pre><code>inference = SNPE(prior)\n\n_ = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior()\n</code></pre> <pre><code> Neural network successfully converged after 127 epochs.\n</code></pre> <p>The observation is now given by the values of the observed trace at three different coordinates:</p> <pre><code>x_o = torch.as_tensor(get_3_values(theta_o), dtype=float)\n</code></pre> <pre><code>theta_p = posterior.sample((10000,), x=x_o)\n\nfig, axes = pairplot(\n    theta_p,\n    limits=list(zip(prior_min, prior_max)),\n    ticks=list(zip(prior_min, prior_max)),\n    figsize=(7, 7),\n    labels=[\"a\", \"b\", \"c\"],\n    points_offdiag={\"markersize\": 6},\n    points_colors=\"r\",\n    points=theta_o,\n);\n</code></pre> <pre><code>Drawing 10000 posterior samples:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <pre><code>x_o_x, x_o_y = create_t_x(theta_o)\nplt.plot(x_o_x, x_o_y, \"k\", zorder=1, label=\"truth\")\ntheta_p = posterior.sample((100,), x=x_o)\nind_10_highest = np.argsort(np.array(posterior.log_prob(theta=theta_p, x=x_o)))[-10:]\ntheta_p_considered = theta_p[ind_10_highest, :]\nx_x, x_y = create_t_x(theta_p_considered.numpy())\nplt.plot(x_x, x_y, \"grey\", zorder=0)\nplt.legend()\n</code></pre> <pre><code>Drawing 100 posterior samples:   0%|          | 0/100 [00:00&lt;?, ?it/s]\n\n\n\n\n\n&lt;matplotlib.legend.Legend at 0x7f82885b4af0&gt;\n</code></pre> <p></p> <p>Ok this definitely seems to work! The posterior correctly focuses on the true parameters with greater confidence. You can experiment yourself how this improves further with more training samples or you could try to see how many you\u2019d exactly need to keep having a satisfyingly looking posterior and high posterior sample simulations.</p> <p>So, what\u2019s up with the MSE? Why does it not seem so informative to constrain the posterior? In 1.6, we\u2019ll see both the power and pitfalls of summary statistics.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#16-prior-simulations-summary-statistics-vs-observed-summary-statistics","title":"1.6 Prior simulations\u2019 summary statistics vs observed summary statistics","text":"<p>Let\u2019s try to understand this\u2026Let\u2019s look at a histogram of the four summary statistics we\u2019ve experimented with, and see how they compare to our observed truth summary statistic vector:</p> <pre><code>stats = np.concatenate(\n    (get_3_values(theta.numpy()), get_MSE(theta.numpy(), theta_o)), axis=1\n)\nx_o = np.concatenate((get_3_values(theta_o), np.asarray([[0.0]])), axis=1)\n\nfeatures = [\"y @ x=-0.5\", \"y @ x=0\", \"y @ x=0.7\", \"MSE\"]\nfig, axes = plt.subplots(1, 4, figsize=(10, 3))\nxlabelfontsize = 10\nfor i, ax in enumerate(axes.reshape(-1)):\n    ax.hist(\n        stats[:, i],\n        color=[\"grey\"],\n        alpha=0.5,\n        bins=30,\n        density=True,\n        histtype=\"stepfilled\",\n        label=[\"simulations\"],\n    )\n    ax.axvline(x_o[:, i], label=\"observation\")\n    ax.set_xlabel(features[i], fontsize=xlabelfontsize)\n    if i == 3:\n        ax.legend()\nplt.tight_layout()\n</code></pre> <p></p> <p>We see that for the coordinates (three plots on the left), simulations cover the observation. That is: it covers it from the left and right side in each case. For the MSE, simulations never truly reach the observation \\(0.0\\).</p> <p>For the trained neural network, it is strongly preferable if the simulations cover the observation. In that case, the neural network can interpolate between simulated data. Contrary to that, for the MSE, the neural network has to extrapolate: it never observes a simulation that is to the left of the observation and has to extrapolate to the region of MSE=\\(0.0\\). This seems like a technical point but, as we saw above, it makes a huge difference in performance.</p>"},{"location":"tutorial/10_crafting_summary_statistics/#17-explicit-recommendations","title":"1.7 Explicit recommendations","text":"<p>We give some explicit recommendation when using summary statistics</p> <ul> <li> <p>Visualize the histogram of each summary statistic and plot the value of the observation. If, for some summary statistics, the observation is not covered (or is at the very border, e.g. the MSE above), the trained neural network will struggle.</p> </li> <li> <p>Do not use an \u201cerror\u201d as summary statistic. This is common in optimization (e.g. genetic algorithms), but it often leads to trouble in <code>sbi</code> due to the reason above.</p> </li> <li> <p>Only use summary statistics that are necessary. The less summary statistics you use, the less can go wrong with them. Of course, you have to ensure that the summary statistics describe the raw data sufficiently well.</p> </li> </ul>"},{"location":"tutorial/11_sampler_interface/","title":"Sampling algorithms in <code>sbi</code>","text":"<p>Note: this tutorial requires that the user is already familiar with the flexible interface.</p> <p><code>sbi</code> implements three methods: SNPE, SNLE, and SNRE. When using SNPE, the trained neural network directly approximates the posterior. Thus, sampling from the posterior can be done by sampling from the trained neural network. The neural networks trained in SNLE and SNRE approximate the likelihood(-ratio). Thus, in order to draw samples from the posterior, one has to perform additional sampling steps, e.g. Markov-chain Monte-Carlo (MCMC). In <code>sbi</code>, the implemented samplers are:</p> <ul> <li> <p>Markov-chain Monte-Carlo (MCMC)</p> </li> <li> <p>Rejection sampling  </p> </li> <li> <p>Variational inference (VI)</p> </li> </ul> <p>Below, we will demonstrate how these samplers can be used in <code>sbi</code>. First, we train the neural network as always:</p> <pre><code>import torch\nfrom sbi.inference import SNLE\n\n# dummy Gaussian simulator for demonstration\nnum_dim = 2\nprior = torch.distributions.MultivariateNormal(torch.zeros(num_dim), torch.eye(num_dim))\ntheta = prior.sample((1000,))\nx = theta + torch.randn((1000, num_dim))\nx_o = torch.randn((1, num_dim))\n\ninference = SNLE(prior=prior, show_progress_bars=False)\nlikelihood_estimator = inference.append_simulations(theta, x).train()\n</code></pre> <p>And then we pass the options for which sampling method to use to the <code>build_posterior()</code> method:</p> <pre><code># Sampling with MCMC\nsampling_algorithm = \"mcmc\"\nmcmc_method = \"slice_np\"  # or nuts, or hmc\nposterior = inference.build_posterior(sample_with=sampling_algorithm, mcmc_method=mcmc_method)\n\n# Sampling with variational inference\nsampling_algorithm = \"vi\"\nvi_method = \"rKL\"  # or fKL\nposterior = inference.build_posterior(sample_with=sampling_algorithm, vi_method=vi_method)\n# Unlike other methods, vi needs a training step for every observation.\nposterior = posterior.set_default_x(x_o).train()\n\n# Sampling with rejection sampling\nsampling_algorithm = \"rejection\"\nposterior = inference.build_posterior(sample_with=sampling_algorithm)\n</code></pre>"},{"location":"tutorial/11_sampler_interface/#more-flexibility-in-adjusting-the-sampler","title":"More flexibility in adjusting the sampler","text":"<p>With the above syntax, you can easily try out different sampling algorithms. However, in many cases, you might want to customize your sampler. Below, we demonstrate how you can change hyperparameters of the samplers (e.g. number of warm-up steps of MCMC) or how you can write your own sampler from scratch.</p>"},{"location":"tutorial/11_sampler_interface/#main-syntax-for-snle-and-snre","title":"Main syntax (for SNLE and SNRE)","text":"<p>As above, we begin by training the neural network as always:</p> <pre><code>import torch\n\nfrom sbi.inference import SNLE\n\n# dummy Gaussian simulator for demonstration\nnum_dim = 2\nprior = torch.distributions.MultivariateNormal(torch.zeros(num_dim), torch.eye(num_dim))\ntheta = prior.sample((1000,))\nx = theta + torch.randn((1000, num_dim))\nx_o = torch.randn((1, num_dim))\n\ninference = SNLE(show_progress_bars=False)\nlikelihood_estimator = inference.append_simulations(theta, x).train()\n</code></pre> <pre><code> Neural network successfully converged after 52 epochs.\n</code></pre> <p>Then, for full flexibility on using the sampler, we do not use the <code>.build_posterior()</code> method, but instead we explicitly define the potential function and the sampling algorithm (see below for explanation):</p> <pre><code>from sbi.inference import likelihood_estimator_based_potential, MCMCPosterior\n\npotential_fn, parameter_transform = likelihood_estimator_based_potential(\n    likelihood_estimator, prior, x_o\n)\nposterior = MCMCPosterior(\n    potential_fn, proposal=prior, theta_transform=parameter_transform, warmup_steps=10\n)\n</code></pre> <p>If you want to use variational inference or rejection sampling, you have to replace the last line with <code>VIPosterior</code> or <code>RejectionPosterior</code>:</p> <pre><code># For VI, we have to train.\nposterior = VIPosterior(\n    potential_fn, proposal=prior, theta_transform=parameter_transform\n).train()\n\nposterior = RejectionPosterior(\n    potential_fn, proposal=prior, theta_transform=parameter_transform\n)\n</code></pre> <p>At this point, you could also plug the <code>potential_fn</code> into any sampler of your choice and not rely on any of the in-built <code>sbi</code>-samplers.</p>"},{"location":"tutorial/11_sampler_interface/#further-explanation","title":"Further explanation","text":"<p>The first lines are the same as for the flexible interface:</p> <pre><code>inference = SNLE()\nlikelihood_estimator = inference.append_simulations(theta, x).train()\n</code></pre> <pre><code> Neural network successfully converged after 33 epochs.\n</code></pre> <p>Next, we obtain the potential function. A potential function is a function of the parameter \\(f(\\theta)\\). The posterior is proportional to the product of likelihood and prior: \\(p(\\theta | x_o) \\propto p(x_o | \\theta)p(\\theta)\\). The potential function is the logarithm of the right-hand side of this equation: \\(f(\\theta) = \\log(p(x_o | \\theta)p(\\theta))\\)</p> <pre><code>potential_fn, parameter_transform = likelihood_estimator_based_potential(\n    likelihood_estimator, prior, x_o\n)\n</code></pre> <p>By calling the <code>potential_fn</code>, you can evaluate the potential:</p> <pre><code># Assuming that your parameters are 1D.\npotential = potential_fn(\n    torch.zeros(1, num_dim)\n)  # -&gt; returns f(0) = log( p(x_o|0) p(0) )\n</code></pre> <p>The other object that is returned by <code>likelihood_estimator_based_potential</code> is a <code>parameter_transform</code>. The <code>parameter_transform</code> is a pytorch transform. The <code>parameter_transform</code> is a fixed transform that is can be applied to parameter <code>theta</code>. It transforms the parameters into unconstrained space (if the prior is bounded, e.g. <code>BoxUniform</code>), and standardizes the parameters (i.e. zero mean, one std). Using <code>parameter_transform</code> during sampling is optional, but it usually improves the performance of MCMC.</p> <pre><code>theta_tf = parameter_transform(torch.zeros(1, num_dim))\ntheta_original = parameter_transform.inv(theta_tf)\nprint(theta_original)  # -&gt; tensor([[0.0]])\n</code></pre> <pre><code>tensor([[0., 0.]])\n</code></pre> <p>After having obtained the <code>potential_fn</code>, we can sample from the posterior with MCMC or rejection sampling:</p> <pre><code>from sbi.inference import MCMCPosterior, RejectionPosterior\n\nposterior = MCMCPosterior(\n    potential_fn, proposal=prior, theta_transform=parameter_transform\n)\nposterior = RejectionPosterior(potential_fn, proposal=prior)\n</code></pre>"},{"location":"tutorial/11_sampler_interface/#main-syntax-for-snpe","title":"Main syntax for SNPE","text":"<p>SNPE usually does not require MCMC or rejection sampling (if you still need it, you can use the same syntax as above with the <code>posterior_estimator_based_potential</code> function). Instead, SNPE samples from the neural network. If the support of the prior is bounded, some samples can lie outside of the support of the prior. The <code>DirectPosterior</code> class automatically rejects these samples:</p> <pre><code>from sbi.inference import SNPE\nfrom sbi.inference import DirectPosterior\n\ninference = SNPE()\nposterior_estimator = inference.append_simulations(theta, x).train()\n\nposterior = DirectPosterior(posterior_estimator, prior=prior)\n</code></pre> <pre><code> Neural network successfully converged after 57 epochs.\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorial/12_diagnostics_posterior_predictive_check/","title":"Posterior Predictive Checks (PPC) in SBI","text":"<p>A common safety check performed as part of inference are Posterior Predictive Checks (PPC). A PPC compares data \\(x_{\\text{pp}}\\) generated using the parameters \\(\\theta_{\\text{posterior}}\\) sampled from the posterior with the observed data \\(x_o\\). The general concept is that -if the inference is correct- the generated data \\(x_{\\text{pp}}\\) should \u201clook similar\u201d the oberved data \\(x_0\\). Said differently, \\(x_o\\) should be within the support of \\(x_{\\text{pp}}\\).</p> <p>A PPC usually shouldn\u2019t be used as a validation metric. Nonetheless a PPC is a good start for an inference diagnosis and can provide with an intuition about any bias introduced in inference: does \\(x_{\\text{pp}}\\) systematically differ from \\(x_o\\)?</p>"},{"location":"tutorial/12_diagnostics_posterior_predictive_check/#main-syntax","title":"Main syntax","text":"<pre><code>from sbi.analysis import pairplot\n\n# A PPC is performed after we trained or neural posterior\nposterior.set_default_x(x_o)\n\n# We draw theta samples from the posterior. This part is not in the scope of SBI\nposterior_samples = posterior.sample((5_000,))\n\n# We use posterior theta samples to generate x data\nx_pp = simulator(posterior_samples)\n\n# We verify if the observed data falls within the support of the generated data\n_ = pairplot(\n    samples=x_pp,\n    points=x_o\n)\n</code></pre>"},{"location":"tutorial/12_diagnostics_posterior_predictive_check/#performing-a-ppc-over-a-toy-example","title":"Performing a PPC over a toy example","text":"<p>Below we provide an example Posterior Predictive Check (PPC) over some toy example:</p> <pre><code>from sbi.analysis import pairplot\nimport torch\n\n_ = torch.manual_seed(0)\n</code></pre> <p>We work on an inference problem over three parameters using any of the techniques implemented in <code>sbi</code>. In this tutorial, we load the dummy posterior:</p> <pre><code>from toy_posterior_for_07_cc import ExamplePosterior\n\nposterior = ExamplePosterior()\n</code></pre> <p>Let us say that we are observing the data point \\(x_o\\):</p> <pre><code>D = 5  # simulator output was 5-dimensional\nx_o = torch.ones(1, D)\nposterior.set_default_x(x_o)\n</code></pre> <p>The posterior can be used to draw \\(\\theta_{\\text{posterior}}\\) samples:</p> <pre><code>posterior_samples = posterior.sample((5_000,))\n\nfig, ax = pairplot(\n    samples=posterior_samples,\n    limits=torch.tensor([[-2.5, 2.5]] * 3),\n    offdiag=[\"kde\"],\n    diag=[\"kde\"],\n    figsize=(5, 5),\n    labels=[rf\"$\\theta_{d}$\" for d in range(3)],\n)\n</code></pre> <p></p> <p>Now we can use our simulator to generate some data \\(x_{\\text{PP}}\\), using as input parameters the poterior samples \\(\\theta_{\\text{posterior}}\\). Note that the simulation part is not in the <code>sbi</code> scope, so any simulator -including a non-Python one- can be used at this stage. In our case we\u2019ll use a dummy simulator:</p> <pre><code>def dummy_simulator(posterior_samples: torch.Tensor, *args, **kwargs) -&gt; torch.Tensor:\n    sample_size = posterior_samples.shape[0]\n    scale = 1.0\n\n    shift = torch.distributions.Gumbel(loc=torch.zeros(D), scale=scale / 2).sample()\n    return torch.distributions.Gumbel(loc=x_o[0] + shift, scale=scale).sample(\n        (sample_size,)\n    )\n\n\nx_pp = dummy_simulator(posterior_samples)\n</code></pre> <p>Plotting \\(x_o\\) against the \\(x_{\\text{pp}}\\), we perform a PPC that plays the role of a sanity check. In this case, the check indicates that \\(x_o\\) falls right within the support of \\(x_{\\text{pp}}\\), which should make the experimenter rather confident about the estimated <code>posterior</code>:</p> <pre><code>_ = pairplot(\n    samples=x_pp,\n    points=x_o[0],\n    limits=torch.tensor([[-2.0, 5.0]] * 5),\n    points_colors=\"red\",\n    figsize=(8, 8),\n    offdiag=\"scatter\",\n    scatter_offdiag=dict(marker=\".\", s=5),\n    points_offdiag=dict(marker=\"+\", markersize=20),\n    labels=[rf\"$x_{d}$\" for d in range(D)],\n)\n</code></pre> <p></p> <p>In contrast, \\(x_o\\) falling well outside the support of \\(x_{\\text{pp}}\\) is indicative of a failure to estimate the correct posterior. Here we simulate such a failure mode:</p> <pre><code>error_shift = -2.0 * torch.ones(1, 5)\n\n_ = pairplot(\n    samples=x_pp,\n    points=x_o[0] + error_shift,\n    limits=torch.tensor([[-2.0, 5.0]] * 5),\n    points_colors=\"red\",\n    figsize=(8, 8),\n    offdiag=\"scatter\",\n    scatter_offdiag=dict(marker=\".\", s=5),\n    points_offdiag=dict(marker=\"+\", markersize=20),\n    labels=[rf\"$x_{d}$\" for d in range(D)],\n)\n</code></pre> <p></p> <p>A typical way to investigate this issue would be to run a prior* predictive check, applying the same plotting strategy, but drawing \\(\\theta\\) from the prior instead of the posterior. **The support for \\(x_{\\text{pp}}\\) should be larger and should contain \\(x_o\\)*. If this check is successful, the \u201cblame\u201d can then be shifted to the inference (method used, convergence of density estimators, number of sequential rounds, etc\u2026).</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/","title":"Simulation-based Calibration in SBI","text":"<p>After a density estimator has been trained with simulated data to obtain a posterior, the estimator should be made subject to several diagnostic tests, before being used for inference given the actual observed data. Posterior Predictive Checks (see previous tutorial) provide one way to \u201ccritique\u201d a trained estimator via its predictive performance. Another important approach to such diagnostics is simulation-based calibration as developed by Cook et al, 2006 and Talts et al, 2018.</p> <p>Simulation-based calibration (SBC) provides a (qualitative) view and a quantitive measure to check, whether the uncertainties of the posterior are balanced, i.e., neither over-confident nor under-confident. As such, SBC can be viewed as a necessary condition (but not sufficient) for a valid inference algorithm: If SBC checks fail, this tells you that your inference is invalid. If SBC checks pass, this is no guarantee that the posterior estimation is working.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#in-a-nutshell","title":"In a nutshell","text":"<p>To run SBC,  </p> <ol> <li>we sample <code>theta_o_i</code> values from the prior of the problem at hand</li> <li>we simulate \u201cobservations\u201d from these parameters: <code>x_o_i = simulator(theta_o_i)</code> </li> <li>we perform inference given each observation <code>x_o_i</code>.</li> </ol> <p>This produces a separate posterior \\(p_i(\\theta | x_{o,i})\\) for each of <code>x_o_i</code>. The key step for SBC is to generate a set of posterior samples \\(\\{\\theta\\}_i\\) from each posterior (let\u2019s call this <code>theta_i_s</code>, referring to <code>s</code> samples from posterior \\(p_i(\\theta | x_{o,i})\\)), and to rank the corresponding <code>theta_o_i</code> under this set of samples. A rank is computed by counting how many samples <code>theta_i_s</code> fall below their corresponding <code>theta_o_i</code> (see section 4.1 in Talts et al.). These ranks are then used to perform the SBC check.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#key-ideas-behind-sbc","title":"Key ideas behind SBC","text":"<p>The core idea behind SBC is two fold: </p> <ul> <li> <p>SBC ranks of ground truth parameters under the inferred posterior samples follow a uniform distribution. (If the SBC ranks are not uniformly distributed, the posterior is not well calibrated.)</p> </li> <li> <p>samples from the data averaged posterior (ensemble of randomly chosen posterior samples given multiple distinct observations <code>x_o</code>) are distributed according to the prior</p> </li> </ul>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#what-can-sbc-diagnose","title":"What can SBC diagnose?","text":"<p>SBC can inform us whether we are not wrong. However, it cannot tell us whether we are right, i.e., SBC checks a necessary condition. For example, imagine you run SBC using the prior as a posterior. The ranks would be perfectly uniform. But the inference would be wrong.</p> <p>The Posterior Predictive Checks (see tutorial 12) can be seen as the complementary sufficient check for the posterior (only as a methaphor, no theoretical guarantees here). Using the prior as a posterior and then doing predictive checks would clearly show that inference failed. </p> <p>To summarize SBC can:</p> <ul> <li>tell us whether the SBI method applied to the problem at hand produces posteriors that have well-calibrated uncertainties,</li> <li>and if not, what kind of systematic bias it has: negative or positive bias (shift in the mean of the predictions) or over- or underdispersion (too large or too small variance)</li> </ul>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#a-healthy-posterior","title":"A healthy posterior","text":"<p>Let\u2019s take the gaussian linear simulator from the previous tutorials and run inference with NPE on it. </p> <p>Note: SBC requires running inference several times. Using SBC with amortized methods like NPE is hence a justified endavour: repeated inference is cheap and SBC can be performed with little runtime penalty. This does not hold for sequential methods or anything relying on MCMC or VI (here, parallelization is your friend, <code>num_workers&gt;1</code>).</p> <pre><code>import torch\n\nfrom torch import eye, ones, zeros\nfrom torch.distributions import MultivariateNormal\n\nfrom sbi.analysis import check_sbc, run_sbc, get_nltp, sbc_rank_plot\nfrom sbi.inference import SNPE, SNPE_C, prepare_for_sbi, simulate_for_sbi\nfrom sbi.simulators import linear_gaussian, diagonal_linear_gaussian\n</code></pre> <pre><code>num_dim = 2\nnum_simulations = 10_000\n\nprior_mean = ones(num_dim)\nprior_cov = 2 * eye(num_dim)\nprior = MultivariateNormal(\n    loc=prior_mean, covariance_matrix=prior_cov, validate_args=False\n)\n</code></pre>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#an-ideal-case","title":"An ideal case","text":"<p>To explore SBC, we make our life easy and assume that we deal with a problem where the likelihood is modelled by an identity mapping and a bit of smear. But to start, we only use an almost vanishing smear of <code>0.01</code>.</p> <pre><code>default_likelihood_loc = 0.0  # let's start with 0 shift\ndefault_likelihood_scale = 0.01  # let's smear theta only by a little bit\n\n\ndef simulator(theta, loc=default_likelihood_loc, scale=default_likelihood_scale):\n    \"\"\"linear gaussian inspired by sbibm\n    https://github.com/sbi-benchmark/sbibm/blob/15f068a08a938383116ffd92b92de50c580810a3/sbibm/tasks/gaussian_linear/task.py#L74\n    \"\"\"\n    num_dim = theta.shape[-1]\n    cov_ = scale * eye(num_dim)  # always positively semi-definite\n\n    # using validate_args=False disables sanity checks on `covariance_matrix`\n    # for the sake of speed\n    value = MultivariateNormal(\n        loc=(theta + loc), covariance_matrix=cov_, validate_args=False\n    ).sample()\n    return value\n\n\n_ = torch.manual_seed(3)\ntheta, x = simulate_for_sbi(simulator, prior, num_simulations)\n</code></pre> <pre><code>Running 10000 simulations.:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code>_ = torch.manual_seed(1)\n\n# let's obtain an observation\ntheta_o = prior.sample((1,))\nx_o = simulator(theta_o)\nprint(\"theta:\", theta_o.numpy())\nprint(\"x    :\", x_o.numpy())\n</code></pre> <pre><code>theta: [[1.9352932 1.3774877]]\nx    : [[1.941461  1.4396194]]\n</code></pre> <pre><code>_ = torch.manual_seed(2)\n\n# we use a mdn model to have a fast turnaround with training.\ninferer = SNPE(prior, density_estimator=\"mdn\")\n# append simulations and run training.\ninferer.append_simulations(theta, x).train();\n</code></pre> <pre><code> Neural network successfully converged after 63 epochs.\n</code></pre> <pre><code>posterior = inferer.build_posterior()\nposterior_samples = posterior.sample((15_000,), x=x_o)\n# Generate predictive samples by simulating from posterior samples.\nposterior_predictive_samples = simulator(posterior_samples)\n</code></pre> <pre><code>Drawing 15000 posterior samples:   0%|          | 0/15000 [00:00&lt;?, ?it/s]\n</code></pre> <pre><code># let's do some posterior predictive checks to see if the\n# posterior predictive samples cluster aournd the observation `x_o`.\nfrom sbi.analysis import pairplot\n\nfig, ax = pairplot(\n    samples=posterior_predictive_samples,\n    points=x_o,\n    limits=list(zip(x_o.flatten() - 1.0, x_o.flatten() + 1.0)),\n    offdiag=\"kde\",\n    diag=\"kde\",\n    figsize=(5, 5),\n    labels=[rf\"$x_{d}$\" for d in range(3)],\n)\n</code></pre> <p></p> <p>The observation <code>x_o</code> falls into the support of the predicted posterior samples, i.e. it is within <code>simulator(posterior_samples)</code>. Given the simulator, this is indicative that our posterior estimates the data well.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#running-sbc","title":"Running SBC","text":"<p>We have a working and trained posterior at this point! Hurray! Let\u2019s look at the SBC metrics now.</p> <pre><code>num_sbc_runs = 1_000  # choose a number of sbc runs, should be ~100s or ideally 1000\n# generate ground truth parameters and corresponding simulated observations for SBC.\nthetas = prior.sample((num_sbc_runs,))\nxs = simulator(thetas)\n</code></pre> <p>SBC is implemented in <code>sbi</code> for your use on any <code>sbi</code> posterior. To run it, we only need to call <code>run_sbc</code> with appropriate parameters. </p> <p>Note: For amortized neural posteriors (like in this tutorial), execution of <code>sbc</code> is expected to be fast. For posteriors that conduct inference with MCMC and hence are slow, <code>run_sbc</code> exposes the use of multiple internal parallel workers to the user. To use this feature, add <code>num_workers = 2</code> to the parameters for use of two workers. See the API documentation for details.</p> <pre><code># run SBC: for each inference we draw 1000 posterior samples.\nnum_posterior_samples = 1_000\nranks, dap_samples = run_sbc(\n    thetas, xs, posterior, num_posterior_samples=num_posterior_samples\n)\n</code></pre> <pre><code>Running 1000 sbc samples.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n</code></pre> <p><code>sbi</code> establishes two methods to do simulation-based calibration:</p> <ul> <li>metrics to compare the sbc ranks with a uniform distribution </li> <li>control plots for visual inspections like fig. 1 or 2 in Talts et al, 2018</li> </ul> <p>The <code>ranks</code> count is performed per dimension of <code>theta</code>, i.e. on the 1-D marginal posterior estimates. According to theory, the distribution of these ranks (per dimension of <code>theta</code>) should turn out to be uniformly distributed. </p> <p>The data average posterior <code>dap</code> (see equation 1 of Talts et al, 2018) is yet another metric of interest. It is built from singular random samples of the estimated posterior samples for each <code>xs</code> above. The <code>dap</code> is expected to match the prior distribution used (see equation 1 in Talts et al, 2018 too). </p> <pre><code>check_stats = check_sbc(\n    ranks, thetas, dap_samples, num_posterior_samples=num_posterior_samples\n)\n</code></pre> <p>The <code>check_stats</code> variable created contains a dictionary with 3 metrics that help to judge our posterior. The \u201cfirst\u201d two compare the ranks to a uniform distribution.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#ranks-versus-uniform-distribution","title":"Ranks versus Uniform distribution","text":"<pre><code>print(\n    f\"kolmogorov-smirnov p-values \\ncheck_stats['ks_pvals'] = {check_stats['ks_pvals'].numpy()}\"\n)\n</code></pre> <pre><code>kolmogorov-smirnov p-values \ncheck_stats['ks_pvals'] = [0.28580528 0.12618546]\n</code></pre> <p>The Kolmogorov-Smirnov (KS test, see also here) as used by <code>check_sbc</code> provides p-values <code>pvals</code> on the null hypothesis that the samples from <code>ranks</code> are drawn from a uniform distribution (in other words <code>H_0: PDF(ranks) == PDF(uniform)</code>). We are provided two values as our problem is two-dimensional - one p-value for each dimension. </p> <p>The null hypothesis (of both distributions being equal) is rejected if the p-values fall below a significance threshold (usually <code>&lt; 0.05</code>). Therefor, vanishing p-values (<code>ks_pvals=0</code>) are interpreted to indicate a vanishing false positive rate to (mistakenly) consider both distrubtions being \u201cequal\u201d. Both values are above <code>0.05</code> and we, therefore, cannot claim that inference clearly went wrong. Nonetheless, we can add additional checks:</p> <pre><code>print(\n    f\"c2st accuracies \\ncheck_stats['c2st_ranks'] = {check_stats['c2st_ranks'].numpy()}\"\n)\n</code></pre> <pre><code>c2st accuracies \ncheck_stats['c2st_ranks'] = [0.5765 0.5735]\n</code></pre> <p>The second tier of metrics comparing <code>ranks</code> with a uniform distributions is a <code>c2st</code> test (see here for details). This is a nonparametric two sample test based on training a classifier to differented one of the ensembles (<code>ranks</code> versus samples from a uniform distribution) by being trained on the other. The values reported are the accuracies from cross-validation. If you see values around <code>0.5</code>, the classifier was unable to differentiate both ensembles, i.e. <code>ranks</code> are very uniform. If the values are high towards <code>1</code>, this matches the case where <code>ranks</code> is very unlike a uniform distribution.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#data-averaged-posterior-dap-versus-prior","title":"Data averaged posterior (DAP) versus prior","text":"<pre><code>print(f\"- c2st accuracies check_stats['c2st_dap'] = {check_stats['c2st_dap'].numpy()}\")\n</code></pre> <pre><code>- c2st accuracies check_stats['c2st_dap'] = [0.474 0.488]\n</code></pre> <p>The last metric reported is again based on <code>c2st</code> computed per dimension of <code>theta</code>. If you see values around <code>0.5</code>, the <code>c2st</code> classifier was unable to differentiate both ensembles for each dimension of <code>theta</code>, i.e. <code>dap</code> are much like (if not identical to) the prior. If the values are very high towards <code>1</code>, this represents the case where <code>dap</code> is very unlike the prior distribution.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#visual-inspection","title":"Visual Inspection","text":"<pre><code>from sbi.analysis import sbc_rank_plot\n\nf, ax = sbc_rank_plot(\n    ranks=ranks,\n    num_posterior_samples=num_posterior_samples,\n    plot_type=\"hist\",\n    num_bins=None,  # by passing None we use a heuristic for the number of bins.\n)\n</code></pre> <p>The two plots visualize the distribution of <code>ranks</code> (here depicted in red) in each dimension. Highlighted in grey you see the 99% confidence interval of a uniform distribution given the number of samples provided. In plain english: for a uniform distribution, we would expect 1 out of 100 (red) bars to lie outside the grey area.</p> <p>We also observe, that the entries fluctuate to some degree. This can be considered a hint that <code>sbc</code> should be conducted with a lot more samples than 1000. A good rule of thumb is that given the number of bins <code>B</code> and the number of SBC samples <code>N</code> (chosed to be <code>1_000</code> here) should amount to <code>N / B ~ 20</code>.</p> <pre><code>f, ax = sbc_rank_plot(ranks, 1_000, plot_type=\"cdf\")\n</code></pre> <p></p> <p>The above provides a visual representation of the cumulative density function (CDF) of <code>ranks</code> (blue and orange for each dimension of <code>theta</code>) with respect to the 95% confidence interval of a uniform distribution (grey).</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#when-things-go-haywire","title":"When things go haywire","text":"<p>Next, we would like to explore some pathologies visible in sbc plots which can hint at our estimated posterior being somewhat wrong or completely off.</p>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#a-shifted-posterior-mean","title":"A shifted posterior mean","text":"<p>In this scenario we emulate the situation that our posterior estimates incorrectly with a constant shift. We reuse our trained NPE posterior from above and wrap it so that all samples returned expose a constant shift by <code>+0.1</code>.</p> <pre><code>from utils_13_diagnosis_sbc import BiasedPosterior\n\n# this posterior shifts the expected value of the prior by .1\nposterior_ = BiasedPosterior(posterior, shift=0.1)\n</code></pre> <pre><code>ranks, dap_samples = run_sbc(thetas, xs, posterior_)\ncheck_stats = check_sbc(ranks, thetas, dap_samples, 1_000)\nprint(check_stats)\n</code></pre> <pre><code>Running 1000 sbc samples.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n{'ks_pvals': tensor([0., 0.]), 'c2st_ranks': tensor([0.6815, 0.6730]), 'c2st_dap': tensor([0.5025, 0.4935])}\n</code></pre> <p>We can see that the Kolmogorv-Smirnov p-values vanish (<code>'ks_pvals': tensor([0., 0.])</code>). Thus, we can reject the hypothesis that the <code>ranks</code> PDF is the uniform PDF. The <code>c2st</code> accuracies show values higher than <code>0.5</code>. This is indicative that the <code>ranks</code> distribution is not a uniform PDF as well.</p> <pre><code>f, ax = sbc_rank_plot(ranks, 1_000, plot_type=\"hist\", num_bins=30)\n</code></pre> <p></p> <p>Inspecting the histograms for both dimenions, the rank distribution is clearly tilted to low rank values for both dimensions. Because we have shifted the expected value of the posterior to higher values (by <code>0.1</code>), we see more entries at low rank values.</p> <p>Let\u2019s try to shift all posterior samples in the opposite direction. We shift the expectation value by <code>-0.1</code>:</p> <pre><code>posterior_ = BiasedPosterior(posterior, shift=-0.1)\n</code></pre> <pre><code>ranks, dap_samples = run_sbc(thetas, xs, posterior_)\ncheck_stats = check_sbc(ranks, thetas, dap_samples, 1_000)\nprint(check_stats)\nf, ax = sbc_rank_plot(ranks, 1_000, plot_type=\"hist\", num_bins=30)\n</code></pre> <pre><code>Running 1000 sbc samples.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n{'ks_pvals': tensor([0., 0.]), 'c2st_ranks': tensor([0.6795, 0.6955]), 'c2st_dap': tensor([0.4910, 0.4955])}\n</code></pre> <p></p> <p>A similar behavior is observed, but this time we see an upshot of ranks to higher values. Because we have shifted the expected value of the posterior to smaller values, we see an upshot in high rank counts.</p> <p>It is interesting to see that the historgams obtained provide very convincing evidence that this is not a uniform distribution. </p> <p>To conlude at this point, the rank distribution is capable of identifying pathologies of the estimated posterior:</p> <ul> <li>a left-skewed rank distribution shows a systematic underestimation of the posterior mean (we shifted the posterior by <code>0.1</code>)</li> <li>a rank-skewed rank distribution shows a systematic overestimation of the posterior mean (we shifted the posterior by <code>-0.1</code>)</li> </ul>"},{"location":"tutorial/13_diagnostics_simulation_based_calibration/#a-dispersed-posterior","title":"A dispersed posterior","text":"<p>In this scenario we emulate the situation if our posterior estimates incorrectly with a dispersion, i.e. the posterior is too wide or too thin. We reuse our trained NPE posterior from above and wrap it so that all samples return a dispersion by 100% more wide (<code>2</code>), i.e. the variance is overestimated by a factor of 2.</p> <pre><code>from utils_13_diagnosis_sbc import DispersedPosterior\n\n# this posterior which disperses the expected posterior value of the prior by 2.\nposterior_ = DispersedPosterior(posterior, dispersion=2.0)\n</code></pre> <pre><code>ranks, dap_samples = run_sbc(thetas, xs, posterior_)\ncheck_stats = check_sbc(ranks, thetas, dap_samples, 1_000)\nprint(check_stats)\nf, ax = sbc_rank_plot(ranks, 1_000, plot_type=\"hist\", num_bins=30)\n</code></pre> <pre><code>Running 1000 sbc samples.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n{'ks_pvals': tensor([8.2151e-09, 6.9635e-07]), 'c2st_ranks': tensor([0.6150, 0.6160]), 'c2st_dap': tensor([0.5050, 0.4905])}\n</code></pre> <p></p> <p>The rank histograms now look more like a very wide gaussian distribution centered in the middle. The KS p-values again vanish unsurprisingly (we must reject the hypothesis that both distributions are from the same uniform PDF) and the c2st_ranks indicate that the rank histogram is not uniform too. As our posterior samples are distributed too broad now, we obtain more \u201cmedium\u201d range ranks and hence produce the peak of ranks in the center of the histogram.</p> <p>We can repeat this exercise by making our posterior too thin, i.e. the variance of the posterior is too small. Let\u2019s cut it by half.</p> <pre><code>posterior_ = DispersedPosterior(posterior, dispersion=0.5)\n</code></pre> <pre><code>ranks, dap_samples = run_sbc(thetas, xs, posterior_)\ncheck_stats = check_sbc(ranks, thetas, dap_samples, 1_000)\nprint(check_stats)\nf, ax = sbc_rank_plot(ranks, 1_000, plot_type=\"hist\", num_bins=30)\n</code></pre> <pre><code>Running 1000 sbc samples.:   0%|          | 0/1000 [00:00&lt;?, ?it/s]\n\n\n{'ks_pvals': tensor([1.1753e-07, 1.7929e-08]), 'c2st_ranks': tensor([0.5755, 0.6125]), 'c2st_dap': tensor([0.4980, 0.5075])}\n</code></pre> <p></p> <p>The histogram of ranks now shoots above the allowed (greyed) area for a uniform distributed around the extrema. We made the posterior samples too thin, so we received more extreme counts of ranks. The KS p-values vanish again and the <code>c2st</code> metric of the ranks is also larger than <code>.5</code> which underlines that our rank distribution is not uniformly distributed.</p> <p>We again see, the rank distribution is capable of identifying pathologies of the estimated posterior:</p> <ul> <li>a centrally peaked rank distribution shows a systematic over-estimation of the posterior variance (we dispersed the variance of the posterior by a factor of <code>2</code>)</li> <li>a U shaped rank distribution shows a systematic under-estimation of the posterior variance (we dispersed the variance of the posterior by a factor of <code>.5</code>)</li> </ul> <p>Simulation-based calibration offers a direct handle on which pathology an estimated posterior examines. Outside of this tutorial, you may very well encounter situations with mixtures of effects (a shifted mean and over-estimated variance). Moreover, uncovering a malignant posterior is only the first step to fix your analysis. </p> <pre><code>\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/","title":"SBI with iid data and permutation-invariant embeddings","text":"<p>There are scenarios in which we observe multiple data points per experiment and we can assume that they are independent and identically distributed (iid, i.e., they are assumed to have the same underlying model parameters).  For example, in decision-making experiments, the experiment is often repeated in trials with the same experimental settings and conditions. The corresponding set of trials is then assumed to be \u201ciid\u201d given a single parameter set.  In such a scenario, we may want to obtain the posterior given a set of observation \\(p(\\theta | X=\\{x_i\\}_i^N)\\). </p>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#amortization-of-neural-network-training-iid-inference-with-nle-nre","title":"Amortization of neural network training: iid-inference with NLE / NRE","text":"<p>For some SBI variants the iid assumption can be exploited: when using a likelihood-based SBI method (<code>SNLE</code>, <code>SNRE</code>) one can train the density or ratio estimator on single-trial data, and then perform inference with <code>MCMC</code> or variational inference (<code>VI</code>). Crucially, because the data is iid and the estimator is trained on single-trial data, one can repeat the inference with a different <code>x_o</code> (a different set of trials, or different number of trials) without having to retrain the density estimator. One can interpet this as amortization of the SBI training: we can obtain a neural likelihood, or likelihood-ratio estimate for new <code>x_o</code>s without retraining, but we still have to run <code>MCMC</code> or <code>VI</code> to do inference. </p> <p>In addition, one cannot only change the number of trials of a new <code>x_o</code>, but also the entire inference setting.  For example, one can apply hierarchical inference with changing hierarchical denpendencies between the model parameters\u2013all without having to retrain the density estimator because it estimates single-trail likelihoods.</p>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#full-amortization-iid-inference-with-npe-and-permutation-invariant-embedding-nets","title":"Full amortization: iid-inference with NPE and permutation-invariant embedding nets","text":"<p>When performing neural posterior estimation (<code>SNPE</code>) we cannot exploit the iid assumption directly.  Thus, the underlying neural network takes <code>x</code> as input and predicts the parameters of the density estimator.  As a consequence, if <code>x</code> is a set of iid observations \\(X=\\{x_i\\}_i^N\\) then the neural network has to be invariant to permutations of this set, i.e., it has to be permutation invariant. In addition, the neural network has to be able to consume a varying number of iid datapoints in order to be amortized over the number of trials. Therefore, in order to use <code>SNPE</code> for inference on iid data, we need to provide a corresponding embedding network that handles the iid-data.  This will likely require some hyperparameter tuning and more training data for inference to work accurately. But once we have this, inference is fully amortized, i.e., we can get new posterior samples almost instantly without retraining and without running <code>MCMC</code> or <code>VI</code>. </p>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#sbi-with-trial-based-data","title":"SBI with trial-based data","text":"<p>For illustration, we use a simple linear Gaussian simulator, as in previous tutorials. The simulator takes a single parameter (vector) which is the mean of a Gaussian. The simulator then adds noise with a fixed variance (set to one).  We define a Gaussian prior over the mean and perform inference. </p> <p>The observed data is also sampled from a Gaussian with some fixed \u201cground-truth\u201d parameter \\(\\theta_o\\).  Crucially, the observed data <code>x_o</code> can consist of multiple samples given the same ground-truth parameters and these samples are iid given \\(\\theta\\): </p> \\[  \\theta \\sim \\mathcal{N}(\\mu_0,\\; \\Sigma_0) \\\\ x | \\theta \\sim \\mathcal{N}(\\theta,\\; \\Sigma=I) \\\\ \\mathbf{x_o} = \\{x_o^i\\}_{i=1}^N \\sim  \\mathcal{N}(\\theta_o,\\; \\Sigma=I) \\] <p>For this toy problem, the ground-truth posterior is well defined, it is again a Gaussian, centered on the mean of \\(\\mathbf{x_o}\\) and with variance scaled by the number of trials \\(N\\), i.e., the more trials we observe, the more information about the underlying \\(\\theta_o\\) we have and the more concentrated the posteriors becomes.</p> <p>We will illustrate this below:</p> <pre><code>import torch\nimport matplotlib.pyplot as plt\n\nfrom torch import zeros, ones, eye\nfrom torch.distributions import MultivariateNormal\nfrom sbi.inference import SNLE, SNPE, prepare_for_sbi, simulate_for_sbi\nfrom sbi.analysis import pairplot\nfrom sbi.utils.metrics import c2st\n\nfrom sbi.simulators.linear_gaussian import (\n    linear_gaussian,\n    true_posterior_linear_gaussian_mvn_prior,\n)\n\n# Seeding\ntorch.manual_seed(1);\n</code></pre> <pre><code># Gaussian simulator\ntheta_dim = 2\nx_dim = theta_dim\n\n# likelihood_mean will be likelihood_shift+theta\nlikelihood_shift = -1.0 * zeros(x_dim)\nlikelihood_cov = 0.3 * eye(x_dim)\n\nprior_mean = zeros(theta_dim)\nprior_cov = eye(theta_dim)\nprior = MultivariateNormal(loc=prior_mean, covariance_matrix=prior_cov)\n\n# Define Gaussian simulator\nsimulator, prior = prepare_for_sbi(\n    lambda theta: linear_gaussian(theta, likelihood_shift, likelihood_cov), prior\n)\n\n\n# Use built-in function to obtain ground-truth posterior given x_o\ndef get_true_posterior_samples(x_o, num_samples=1):\n    return true_posterior_linear_gaussian_mvn_prior(\n        x_o, likelihood_shift, likelihood_cov, prior_mean, prior_cov\n    ).sample((num_samples,))\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#the-analytical-posterior-concentrates-around-true-parameters-with-increasing-number-of-iid-trials","title":"The analytical posterior concentrates around true parameters with increasing number of IID trials","text":"<pre><code>num_trials = [1, 5, 15, 20]\ntheta_o = zeros(1, theta_dim)\n\n# Generate multiple x_os with increasing number of trials.\nxos = [theta_o.repeat(nt, 1) for nt in num_trials]\n\n# Obtain analytical posterior samples for each of them.\ntrue_samples = [get_true_posterior_samples(xo, 5000) for xo in xos]\n</code></pre> <pre><code># Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    true_samples,\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n)\nplt.sca(ax[1, 1])\nplt.legend(\n    [f\"{nt} trials\" if nt &gt; 1 else f\"{nt} trial\" for nt in num_trials]\n    + [r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <p>Indeed, with increasing number of trials the posterior density concentrates around the true underlying parameter.</p>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#iid-inference-with-nle","title":"IID inference with NLE","text":"<p>(S)NLE and (S)NRE can perform inference given multiple IID obserations by using only single-trial training data (i.e., for training, we run the simulator only once per parameter set). Once the likelihood is learned on single trials (i.e., a neural network that predicts the likelihood of a single observation given a parameter set), one can sample the posterior for any number of trials. This works because, given a single-trial neural likelihood from (S)NLE or (S)NRE, we can calculate the joint likelihoods of all trials by multiplying them together (or adding them in log-space). The joint likelihood can then be plugged into <code>MCMC</code> or <code>VI</code>. <code>sbi</code> takes care of all of these steps, so you do not have to implement anything yourself:</p> <pre><code># Train SNLE.\ninferer = SNLE(prior, show_progress_bars=True, density_estimator=\"mdn\")\ntheta, x = simulate_for_sbi(simulator, prior, 10000, simulation_batch_size=1000)\ninferer.append_simulations(theta, x).train(training_batch_size=1000);\n</code></pre> <pre><code>Running 10000 simulations.:   0%|          | 0/10000 [00:00&lt;?, ?it/s]\n\n\n Neural network successfully converged after 43 epochs.\n</code></pre> <pre><code># Obtain posterior samples for different number of iid xos.\nnle_samples = []\nnum_samples = 5000\n\nmcmc_parameters = dict(\n    num_chains=50,\n    thin=10,\n    warmup_steps=50,\n    init_strategy=\"proposal\",\n)\nmcmc_method = \"slice_np_vectorized\"\n\nposterior = inferer.build_posterior(\n    mcmc_method=mcmc_method,\n    mcmc_parameters=mcmc_parameters,\n)\n\n# Generate samples with MCMC given the same set of x_os as above.\nfor xo in xos:\n    nle_samples.append(posterior.sample(sample_shape=(num_samples,), x=xo))\n</code></pre> <pre><code>Running vectorized MCMC with 50 chains:   0%|          | 0/75000 [00:00&lt;?, ?it/s]\n\n\n/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 5 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 50 chains:   0%|          | 0/75000 [00:00&lt;?, ?it/s]\n\n\n/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 15 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 50 chains:   0%|          | 0/75000 [00:00&lt;?, ?it/s]\n\n\n/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:342: UserWarning: An x with a batch size of 20 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n\n\n\nRunning vectorized MCMC with 50 chains:   0%|          | 0/75000 [00:00&lt;?, ?it/s]\n</code></pre> <p>Note that <code>sbi</code> warns about <code>iid-x</code> with increasing number of trial here. We ignore the warning because that\u2019s exactly what we want to do.</p> <pre><code># Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    nle_samples,\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n)\nplt.sca(ax[1, 1])\nplt.legend(\n    [f\"{nt} trials\" if nt &gt; 1 else f\"{nt} trial\" for nt in num_trials]\n    + [r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <p></p> <p>The pairplot above already indicates that (S)NLE is well able to obtain accurate posterior samples also for increasing number of trials (note that we trained the single-round version of SNLE so that we did not have to re-train it for new \\(x_o\\)). </p> <p>Quantitatively we can measure the accuracy of SNLE by calculating the <code>c2st</code> score between SNLE and the true posterior samples, where the best accuracy is perfect for <code>0.5</code>:</p> <pre><code>cs = [\n    c2st(torch.from_numpy(s1), torch.from_numpy(s2))\n    for s1, s2 in zip(true_samples, nle_samples)\n]\n\nfor _ in range(len(num_trials)):\n    print(f\"c2st score for num_trials={num_trials[_]}: {cs[_].item():.2f}\")\n</code></pre> <pre><code>c2st score for num_trials=1: 0.50\nc2st score for num_trials=5: 0.51\nc2st score for num_trials=15: 0.51\nc2st score for num_trials=20: 0.51\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#iid-inference-with-npe-using-permutation-invariant-embedding-nets","title":"IID inference with NPE using permutation-invariant embedding nets","text":"<p>For NPE we need to define an embedding net that handles the set-like structure of iid-data, i.e., that it permutation invariant and can handle different number of trials.  </p> <p>We implemented several embedding net classes that allow to construct such a permutation- and number-of-trials invariant embedding net. </p> <p>To become permutation invariant, the neural net first learns embeddings for single trials and then performs a permutation invariant operation on those embeddings, e.g., by taking the sum or the mean (Chen et al. 2018, Radev et al. 2021).</p> <p>To become invariant w.r.t. the number-of-trials, we train the net with varying number of trials for each parameter setting. This means that, unlike for (S)NLE and (S)NRE, (S)NPE requires to run the simulator multiple times for individual parameter sets to generate the training data.</p> <p>In order to implement this in <code>sbi</code>, \u201cunobserved\u201d trials in the training dataset have to be masked by NaNs (and ignore the resulting SBI warning about NaNs in the training data).</p>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#construct-training-data-set","title":"Construct training data set.","text":"<pre><code># we need to fix the maximum number of trials.\nmax_num_trials = 20\n\n# construct training data set: we want to cover the full range of possible number of\n# trials\nnum_training_samples = 5000\ntheta = prior.sample((num_training_samples,))\n\n# there are certainly smarter ways to construct the training data set, but we go with a\n# for loop here for illustration purposes.\nx = torch.ones(num_training_samples * max_num_trials, max_num_trials, x_dim) * float(\n    \"nan\"\n)\nfor i in range(num_training_samples):\n    xi = simulator(theta[i].repeat(max_num_trials, 1))\n    for j in range(max_num_trials):\n        x[i * max_num_trials + j, : j + 1, :] = xi[: j + 1, :]\n\ntheta = theta.repeat_interleave(max_num_trials, dim=0)\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#build-embedding-net","title":"Build embedding net","text":"<pre><code>from sbi.neural_nets.embedding_nets import (\n    FCEmbedding,\n    PermutationInvariantEmbedding,\n)\nfrom sbi.utils import posterior_nn\n\n# embedding\nlatent_dim = 10\nsingle_trial_net = FCEmbedding(\n    input_dim=theta_dim,\n    num_hiddens=40,\n    num_layers=2,\n    output_dim=latent_dim,\n)\nembedding_net = PermutationInvariantEmbedding(\n    single_trial_net,\n    trial_net_output_dim=latent_dim,\n    # NOTE: post-embedding is not needed really.\n    num_layers=1,\n    num_hiddens=10,\n    output_dim=10,\n)\n\n# we choose a simple MDN as the density estimator.\n# NOTE: we turn off z-scoring of the data, as we used NaNs for the missing trials.\ndensity_estimator = posterior_nn(\"mdn\", embedding_net=embedding_net, z_score_x=\"none\")\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#run-training","title":"Run training","text":"<pre><code>inference = SNPE(prior, density_estimator=density_estimator)\n# NOTE: we don't exclude invalid x because we used NaNs for the missing trials.\ninference.append_simulations(\n    theta,\n    x,\n    exclude_invalid_x=False,\n).train(training_batch_size=1000)\nposterior = inference.build_posterior()\n</code></pre> <pre><code>WARNING:root:Found 95000 NaN simulations and 0 Inf simulations. They are not excluded from training due to `exclude_invalid_x=False`.Training will likely fail, we strongly recommend `exclude_invalid_x=True` for Single-round NPE.\n\n\n Neural network successfully converged after 168 epochs.\n</code></pre>"},{"location":"tutorial/14_iid_data_and_permutation_invariant_embeddings/#amortized-inference","title":"Amortized inference","text":"<p>Comparing runtimes, we see that the NPE training takes a bit longer than the training on single trials for <code>NLE</code> above. </p> <p>However, we trained the density estimator such that it can handle multiple and changing number of iid trials (up to 20). </p> <p>Thus, we can obtain posterior samples for different <code>x_o</code> with just a single forward pass instead of having to run <code>MCMC</code> for each new observation.</p> <p>As you can see below, the c2st score for increasing number of observed trials remains close to the ideal <code>0.5</code>. </p> <pre><code>npe_samples = []\nfor xo in xos:\n    # we need to pad the x_os with NaNs to match the shape of the training data.\n    xoi = torch.ones(1, max_num_trials, x_dim) * float(\"nan\")\n    xoi[0, : len(xo), :] = xo\n    npe_samples.append(posterior.sample(sample_shape=(num_samples,), x=xoi))\n\ncs = [c2st(torch.from_numpy(s1), s2) for s1, s2 in zip(true_samples, npe_samples)]\n\nfor _ in range(len(num_trials)):\n    print(f\"c2st score for num_trials={num_trials[_]}: {cs[_].item():.2f}\")\n</code></pre> <pre><code>Drawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\nc2st score for num_trials=1: 0.50\nc2st score for num_trials=5: 0.50\nc2st score for num_trials=15: 0.52\nc2st score for num_trials=20: 0.55\n</code></pre> <pre><code>num_trials = [1, 5, 15, 20]\nxos = [theta_o.repeat(nt, 1) for nt in num_trials]\n\nnpe_samples = []\nfor xo in xos:\n    # we need to pad the x_os with NaNs to match the shape of the training data.\n    xoi = torch.ones(1, max_num_trials, x_dim) * float(\"nan\")\n    xoi[0, : len(xo), :] = xo\n    npe_samples.append(posterior.sample(sample_shape=(num_samples,), x=xoi))\n\n\n# Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    npe_samples,\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n)\nplt.sca(ax[1, 1])\nplt.legend(\n    [f\"{nt} trials\" if nt &gt; 1 else f\"{nt} trial\" for nt in num_trials]\n    + [r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <pre><code>Drawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <pre><code># We can easily obtain posteriors for many different x_os, instantly, because NPE is fully amortized:\nnum_trials = [2, 4, 6, 8, 12, 14, 18]\nnpe_samples = []\nfor xo in xos:\n    # we need to pad the x_os with NaNs to match the shape of the training data.\n    xoi = torch.ones(1, max_num_trials, x_dim) * float(\"nan\")\n    xoi[0, : len(xo), :] = xo\n    npe_samples.append(posterior.sample(sample_shape=(num_samples,), x=xoi))\n\n\n# Plot them in one pairplot as contours (obtained via KDE on the samples).\nfig, ax = pairplot(\n    npe_samples,\n    points=theta_o,\n    diag=\"kde\",\n    upper=\"contour\",\n    kde_offdiag=dict(bins=50),\n    kde_diag=dict(bins=100),\n    contour_offdiag=dict(levels=[0.95]),\n    points_colors=[\"k\"],\n    points_offdiag=dict(marker=\"*\", markersize=10),\n)\nplt.sca(ax[1, 1])\nplt.legend(\n    [f\"{nt} trials\" if nt &gt; 1 else f\"{nt} trial\" for nt in num_trials]\n    + [r\"$\\theta_o$\"],\n    frameon=False,\n    fontsize=12,\n);\n</code></pre> <pre><code>Drawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n\n\n\nDrawing 5000 posterior samples:   0%|          | 0/5000 [00:00&lt;?, ?it/s]\n</code></pre> <p></p> <pre><code>\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/","title":"MCMC diagnostics with Arviz","text":"<p>This tutorial shows how to evaluate the quality of MCMC samples generated via <code>sbi</code> using the <code>arviz</code> package. </p> <p>Outline:</p> <p>1) Train MNLE to approximate the likelihood underlying the simulator 2) Run MCMC using <code>pyro</code> MCMC samplers via <code>sbi</code> interface 3) Use <code>arviz</code> to visualize the posterior, predictive distributions and MCMC diagnostics. </p> <pre><code>import arviz as az\nimport torch\n\nfrom sbi.inference import MNLE, likelihood_estimator_based_potential\nfrom pyro.distributions import InverseGamma\nfrom torch.distributions import Beta, Binomial, Gamma\nfrom sbi.utils import MultipleIndependent\n\nfrom sbi.inference import MCMCPosterior\n\n# Seeding\ntorch.manual_seed(1);\n</code></pre> <pre><code># Toy simulator for mixed data\ndef mixed_simulator(theta):\n    beta, ps = theta[:, :1], theta[:, 1:]\n\n    choices = Binomial(probs=ps).sample()\n    rts = InverseGamma(concentration=2 * torch.ones_like(beta), rate=beta).sample()\n\n    return torch.cat((rts, choices), dim=1)\n\n\n# Define independent priors for each dimension.\nprior = MultipleIndependent(\n    [\n        Gamma(torch.tensor([1.0]), torch.tensor([0.5])),\n        Beta(torch.tensor([2.0]), torch.tensor([2.0])),\n    ],\n    validate_args=False,\n)\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/#train-mnle-to-approximate-the-likelihood","title":"Train MNLE to approximate the likelihood","text":"<p>For this tutorial, we will use a simple simulator with two parameters. For details see the example on the decision making model. </p> <p>Here, we pass <code>mcmc_method=\"nuts\"</code> in order to use the underlying <code>pyro</code> No-U-turn sampler, but it would work as well with other samplers (e.g. \u201cslice_np_vectorized\u201d, \u201chmc\u201d). </p> <p>Additionally, when calling <code>posterior.sample(...)</code> we pass <code>return_arviz=True</code> so that the <code>Arviz InferenceData</code> object is returned. This object gives us access to the wealth of MCMC diagnostics tool provided by <code>arviz</code>.</p> <pre><code># Generate training data and train MNLE.\nnum_simulations = 10000\ntheta = prior.sample((num_simulations,))\nx = mixed_simulator(theta)\n\ntrainer = MNLE(prior)\nlikelihood_estimator = trainer.append_simulations(theta, x).train()\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/neural_nets/mnle.py:60: UserWarning: The mixed neural likelihood estimator assumes that x contains\n        continuous data in the first n-1 columns (e.g., reaction times) and\n        categorical data in the last column (e.g., corresponding choices). If\n        this is not the case for the passed `x` do not use this function.\n  warnings.warn(\n\n\n Neural network successfully converged after 65 epochs.\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/#run-pyro-nuts-mcmc-and-obtain-arviz-inferencedata-object","title":"Run Pyro NUTS MCMC and obtain <code>arviz InferenceData</code> object","text":"<pre><code># Simulate \"observed\" data x_o\ntorch.manual_seed(42)\nnum_trials = 100\ntheta_o = prior.sample((1,))\nx_o = mixed_simulator(theta_o.repeat(num_trials, 1))\n\n# Set MCMC parameters and run Pyro NUTS.\nmcmc_parameters = dict(\n    num_chains=4,\n    thin=5,\n    warmup_steps=50,\n    init_strategy=\"proposal\",\n    method=\"nuts\",\n)\nnum_samples = 1000\n\n# get the potential function and parameter transform for constructing the posterior\npotential_fn, parameter_transform = likelihood_estimator_based_potential(\n    likelihood_estimator, prior, x_o\n)\nmnle_posterior = MCMCPosterior(\n    potential_fn, proposal=prior, theta_transform=parameter_transform, **mcmc_parameters\n)\n\nmnle_samples = mnle_posterior.sample(\n    (num_samples,), x=x_o, show_progress_bars=False\n)\n# get arviz InferenceData object from posterior\ninference_data = mnle_posterior.get_arviz_inference_data()\n</code></pre> <pre><code>/Users/janbolts/qode/sbi/sbi/utils/sbiutils.py:280: UserWarning: An x with a batch size of 100 was passed. It will be interpreted as a batch of independent and identically\n            distributed data X={x_1, ..., x_n}, i.e., data generated based on the\n            same underlying (unknown) parameter. The resulting posterior will be with\n            respect to entire batch, i.e,. p(theta | X).\n  warnings.warn(\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/#generate-arviz-plots","title":"Generate <code>arviz</code> plots","text":"<p>The resulting <code>InferenceData</code> object can be passed to most <code>arviz</code> plotting functions, and there are plenty see here for an overview.</p> <p>To get a better understanding of the <code>InferenceData</code> object see here. </p> <p>Below and overview of common MCMC diagnostics plot, see the corresponding <code>arviz</code> documentation for interpretation of the plots. </p> <p>We will a full use-case using the SBI-MCMC-arviz workflow soon.</p> <pre><code>print(inference_data.posterior)\n</code></pre> <pre><code>&lt;xarray.Dataset&gt;\nDimensions:      (chain: 4, draw: 1254, theta_dim_0: 2)\nCoordinates:\n  * chain        (chain) int64 0 1 2 3\n  * draw         (draw) int64 0 1 2 3 4 5 6 ... 1248 1249 1250 1251 1252 1253\n  * theta_dim_0  (theta_dim_0) int64 0 1\nData variables:\n    theta        (chain, draw, theta_dim_0) float32 2.125 0.8092 ... 0.8088\nAttributes:\n    created_at:     2022-08-10T14:02:41.300799\n    arviz_version:  0.11.2\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/#diagnostic-plots","title":"Diagnostic plots","text":"<pre><code>az.style.use(\"arviz-darkgrid\")\naz.plot_rank(inference_data)\n</code></pre> <pre><code>array([&lt;AxesSubplot:title={'center':'theta\\n0'}, xlabel='Rank (all chains)', ylabel='Chain'&gt;,\n       &lt;AxesSubplot:title={'center':'theta\\n1'}, xlabel='Rank (all chains)', ylabel='Chain'&gt;],\n      dtype=object)\n</code></pre> <pre><code>az.plot_autocorr(inference_data);\n</code></pre> <pre><code>az.plot_trace(inference_data, compact=False);\n</code></pre> <pre><code>az.plot_ess(inference_data, kind=\"evolution\");\n</code></pre>"},{"location":"tutorial/15_mcmc_diagnostics_with_arviz/#posterior-density-plots","title":"Posterior density  plots","text":"<pre><code>az.plot_posterior(inference_data)\n</code></pre> <pre><code>array([&lt;AxesSubplot:title={'center':'theta\\n0'}&gt;,\n       &lt;AxesSubplot:title={'center':'theta\\n1'}&gt;], dtype=object)\n</code></pre> <pre><code>print(\n    f\"Given the {num_trials} we observed, the posterior is centered around true underlying parameters theta_o: {theta_o}\"\n)\n</code></pre> <pre><code>Given the 100 we observed, the posterior is centered around true underlying parameters theta_o: tensor([[1.9622, 0.7550]])\n</code></pre> <pre><code>az.plot_pair(inference_data)\n</code></pre> <pre><code>&lt;AxesSubplot:xlabel='theta\\n0', ylabel='theta\\n1'&gt;\n</code></pre> <pre><code>az.plot_pair(\n    inference_data,\n    var_names=[\"theta\"],\n    kind=\"hexbin\",\n    marginals=True,\n    figsize=(10, 10),\n)\n</code></pre> <pre><code>array([[&lt;AxesSubplot:&gt;, None],\n       [&lt;AxesSubplot:xlabel='theta\\n0', ylabel='theta\\n1'&gt;,\n        &lt;AxesSubplot:&gt;]], dtype=object)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"tutorial/16_implemented_methods/","title":"API of implemented methods","text":"<p>This notebook spells out the API for all algorithms implemented in the <code>sbi</code> toolbox:</p> <ul> <li> <p>Posterior estimation (SNPE)</p> </li> <li> <p>Likelihood estimation (SNLE)</p> </li> <li> <p>Likelihood-ratio estimation (SNRE)</p> </li> <li> <p>Utilities  </p> </li> </ul>"},{"location":"tutorial/16_implemented_methods/#posterior-estimation-snpe","title":"Posterior estimation (SNPE)","text":"<p>Fast \u03b5-free Inference of Simulation Models with Bayesian Conditional Density Estimation by Papamakarios &amp; Murray (NeurIPS 2016) [PDF] [BibTeX]</p> <pre><code>from sbi.inference import SNPE_A\n\ninference = SNPE_A(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x, proposal=proposal).train()\n    posterior = inference.build_posterior().set_default_x(x_o)\n    proposal = posterior\n</code></pre> <p>Automatic posterior transformation for likelihood-free inferenceby Greenberg, Nonnenmacher &amp; Macke (ICML 2019) [PDF]</p> <pre><code>from sbi.inference import SNPE\n\ninference = SNPE(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x, proposal=proposal).train()\n    posterior = inference.build_posterior().set_default_x(x_o)\n    proposal = posterior\n</code></pre> <p>Truncated proposals for scalable and hassle-free simulation-based inference  by Deistler, Goncalves &amp; Macke (NeurIPS 2022) [Paper]</p> <pre><code>from sbi.inference import SNPE\nfrom sbi.utils import get_density_thresholder, RestrictedPrior\n\ninference = SNPE(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x).train(force_first_round_loss=True)\n    posterior = inference.build_posterior().set_default_x(x_o)\n\n    accept_reject_fn = get_density_thresholder(posterior, quantile=1e-4)\n    proposal = RestrictedPrior(prior, accept_reject_fn, sample_with=\"rejection\")\n</code></pre>"},{"location":"tutorial/16_implemented_methods/#likelihood-estimation-snle","title":"Likelihood estimation (SNLE)","text":"<p>Sequential neural likelihood: Fast likelihood-free inference with autoregressive flowsby Papamakarios, Sterratt &amp; Murray (AISTATS 2019) [PDF] [BibTeX]</p> <pre><code>from sbi.inference import SNLE\n\ninference = SNLE(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x).train()\n    posterior = inference.build_posterior().set_default_x(x_o)\n    proposal = posterior\n</code></pre> <p>Variational methods for simulation-based inference  by Gl\u00f6ckler, Deistler, Macke (ICLR 2022) [Paper]</p> <pre><code>from sbi.inference import SNLE\n\ninference = SNLE(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x).train()\n    posterior = inference.build_posterior(sample_with=\"vi\", vi_method=\"fKL\").set_default_x(x_o)\n    proposal = posterior\n</code></pre> <p>Flexible and efficient simulation-based inference for models of decision-making  by Boelts, Lueckmann, Gao, Macke (Elife 2022) [Paper]</p> <pre><code>from sbi.inference import MNLE\n\ninference = MNLE(prior)\ntheta = prior.sample((num_sims,))\nx = simulator(theta)\n_ = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior().set_default_x(x_o)\n</code></pre>"},{"location":"tutorial/16_implemented_methods/#likelihood-ratio-estimation-snre","title":"Likelihood-ratio estimation (SNRE)","text":"<p>Likelihood-free MCMC with Amortized Approximate Likelihood Ratiosby Hermans, Begy &amp; Louppe (ICML 2020) [PDF]</p> <pre><code>from sbi.inference import SNRE_A\n\ninference = SNRE_A(prior)\ntheta = prior.sample((num_sims,))\nx = simulator(theta)\n_ = inference.append_simulations(theta, x).train()\nposterior = inference.build_posterior().set_default_x(x_o)\n</code></pre> <p>On Contrastive Learning for Likelihood-free InferenceDurkan, Murray &amp; Papamakarios (ICML 2020) [PDF].</p> <pre><code>from sbi.inference import SNRE\n\ninference = SNRE(prior)\nproposal = prior\nfor _ in range(rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    _ = inference.append_simulations(theta, x).train()\n    posterior = inference.build_posterior().set_default_x(x_o)\n    proposal = posterior\n</code></pre> <p>Towards Reliable Simulation-Based Inference with Balanced Neural Ratio Estimationby Delaunoy, Hermans, Rozet, Wehenkel &amp; Louppe (NeurIPS 2022) [PDF]</p> <pre><code>from sbi.inference import BNRE\n\ninference = BNRE(prior)\ntheta = prior.sample((num_sims,))\nx = simulator(theta)\n_ = inference.append_simulations(theta, x).train(regularization_strength=100.)\nposterior = inference.build_posterior().set_default_x(x_o)\n</code></pre> <p>Contrastive Neural Ratio EstimationBenjamin Kurt Miller, Christoph Weniger, Patrick Forr\u00e9 (NeurIPS 2022) [PDF]</p> <pre><code># The main feature of NRE-C is producing an exact ratio of densities at optimum, even when using multiple contrastive pairs (classes).\n\nfrom sbi.inference import SNRE_C\n\n# Amortized inference\ninference = SNRE_C(prior)\nproposal = prior\ntheta = proposal.sample((num_sims,))\nx = simulator(theta)\n_ = inference.append_simulations(theta, x).train(\n    num_classes=5,  # SNRE_C sees `2 * num_classes - 1` marginally drawn contrastive pairs.\n    gamma=1.0,  # SNRE_C can control the weight between terms in its loss function.\n)\nposterior = inference.build_posterior().set_default_x(x_o)\n</code></pre>"},{"location":"tutorial/16_implemented_methods/#utilities","title":"Utilities","text":"<p>Simulation-based calibrationby Talts, Betancourt, Simpson, Vehtari, Gelman (arxiv 2018) [Paper])</p> <pre><code>from sbi.analysis import run_sbc, sbc_rank_plot\n\nthetas = prior.sample((1_000,))\nxs = simulator(thetas)\n\nranks, dap_samples = run_sbc(\n    thetas, xs, posterior, num_posterior_samples=1_000\n)\n\n_ = sbc_rank_plot(\n    ranks=ranks,\n    num_posterior_samples=num_posterior_samples,\n    plot_type=\"hist\",\n    num_bins=None,\n)\n</code></pre> <p>Restriction estimatorby Deistler, Macke &amp; Goncalves (PNAS 2022) [Paper]</p> <pre><code>from sbi.inference import SNPE\nfrom sbi.utils import RestrictionEstimator\n\nrestriction_estimator = RestrictionEstimator(prior=prior)\nproposal = prior\n\nfor _ in range(num_rounds):\n    theta = proposal.sample((num_sims,))\n    x = simulator(theta)\n    restriction_estimator.append_simulations(theta, x)\n    classifier = restriction_estimator.train()\n    proposal = restriction_estimator.restrict_prior()\n\nall_theta, all_x, _ = restriction_estimator.get_simulations()\n\ninference = SNPE(prior)\ndensity_estimator = inference.append_simulations(all_theta, all_x).train()\nposterior = inference.build_posterior()\n</code></pre> <p>Expected coverage (sample-based)as computed in Deistler, Goncalves, Macke (Neurips 2022) [Paper] and in Rozet, Louppe (2021) [Paper]</p> <pre><code>from sbi.analysis import run_sbc, sbc_rank_plot\n\nthetas = prior.sample((1_000,))\nxs = simulator(thetas)\n\nranks, dap_samples = run_sbc(\n    thetas, xs, posterior, num_posterior_samples=1_000, reduce_fns=posterior.log_prob\n)\n\n_ = sbc_rank_plot(\n    ranks=ranks,\n    num_posterior_samples=num_posterior_samples,\n    plot_type=\"hist\",\n    num_bins=None,\n)\n</code></pre>"}]}